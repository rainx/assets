!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(t,e){t.exports=require("path")},function(t,e){t.exports=require("fs")},function(t,e,r){t.exports=g,g.Minimatch=d;var n={sep:"/"};try{n=r(0)}catch(t){}var i=g.GLOBSTAR=d.GLOBSTAR={},o=r(3),s={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},a="[^/]",u=a+"*?",c="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",p="(?:(?!(?:\\/|^)\\.).)*?",h="().*{}+?[]^$\\!".split("").reduce(function(t,e){return t[e]=!0,t},{});var f=/\/+/;function l(t,e){t=t||{},e=e||{};var r={};return Object.keys(e).forEach(function(t){r[t]=e[t]}),Object.keys(t).forEach(function(e){r[e]=t[e]}),r}function g(t,e,r){if("string"!=typeof e)throw new TypeError("glob pattern string required");return r||(r={}),!(!r.nocomment&&"#"===e.charAt(0))&&(""===e.trim()?""===t:new d(e,r).match(t))}function d(t,e){if(!(this instanceof d))return new d(t,e);if("string"!=typeof t)throw new TypeError("glob pattern string required");e||(e={}),t=t.trim(),"/"!==n.sep&&(t=t.split(n.sep).join("/")),this.options=e,this.set=[],this.pattern=t,this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.make()}function m(t,e){if(e||(e=this instanceof d?this.options:{}),void 0===(t=void 0===t?this.pattern:t))throw new TypeError("undefined pattern");return e.nobrace||!t.match(/\{.*\}/)?[t]:o(t)}g.filter=function(t,e){return e=e||{},function(r,n,i){return g(r,t,e)}},g.defaults=function(t){if(!t||!Object.keys(t).length)return g;var e=g,r=function(r,n,i){return e.minimatch(r,n,l(t,i))};return r.Minimatch=function(r,n){return new e.Minimatch(r,l(t,n))},r},d.defaults=function(t){return t&&Object.keys(t).length?g.defaults(t).Minimatch:d},d.prototype.debug=function(){},d.prototype.make=function(){if(this._made)return;var t=this.pattern,e=this.options;if(!e.nocomment&&"#"===t.charAt(0))return void(this.comment=!0);if(!t)return void(this.empty=!0);this.parseNegate();var r=this.globSet=this.braceExpand();e.debug&&(this.debug=console.error);this.debug(this.pattern,r),r=this.globParts=r.map(function(t){return t.split(f)}),this.debug(this.pattern,r),r=r.map(function(t,e,r){return t.map(this.parse,this)},this),this.debug(this.pattern,r),r=r.filter(function(t){return-1===t.indexOf(!1)}),this.debug(this.pattern,r),this.set=r},d.prototype.parseNegate=function(){var t=this.pattern,e=!1,r=this.options,n=0;if(r.nonegate)return;for(var i=0,o=t.length;i<o&&"!"===t.charAt(i);i++)e=!e,n++;n&&(this.pattern=t.substr(n));this.negate=e},g.braceExpand=function(t,e){return m(t,e)},d.prototype.braceExpand=m,d.prototype.parse=function(t,e){if(t.length>65536)throw new TypeError("pattern is too long");var r=this.options;if(!r.noglobstar&&"**"===t)return i;if(""===t)return"";var n,o="",c=!!r.nocase,p=!1,f=[],l=[],g=!1,d=-1,m=-1,b="."===t.charAt(0)?"":r.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",y=this;function x(){if(n){switch(n){case"*":o+=u,c=!0;break;case"?":o+=a,c=!0;break;default:o+="\\"+n}y.debug("clearStateChar %j %j",n,o),n=!1}}for(var j,E=0,O=t.length;E<O&&(j=t.charAt(E));E++)if(this.debug("%s\t%s %s %j",t,E,o,j),p&&h[j])o+="\\"+j,p=!1;else switch(j){case"/":return!1;case"\\":x(),p=!0;continue;case"?":case"*":case"+":case"@":case"!":if(this.debug("%s\t%s %s %j <-- stateChar",t,E,o,j),g){this.debug("  in class"),"!"===j&&E===m+1&&(j="^"),o+=j;continue}y.debug("call clearStateChar %j",n),x(),n=j,r.noext&&x();continue;case"(":if(g){o+="(";continue}if(!n){o+="\\(";continue}f.push({type:n,start:E-1,reStart:o.length,open:s[n].open,close:s[n].close}),o+="!"===n?"(?:(?!(?:":"(?:",this.debug("plType %j %j",n,o),n=!1;continue;case")":if(g||!f.length){o+="\\)";continue}x(),c=!0;var w=f.pop();o+=w.close,"!"===w.type&&l.push(w),w.reEnd=o.length;continue;case"|":if(g||!f.length||p){o+="\\|",p=!1;continue}x(),o+="|";continue;case"[":if(x(),g){o+="\\"+j;continue}g=!0,m=E,d=o.length,o+=j;continue;case"]":if(E===m+1||!g){o+="\\"+j,p=!1;continue}if(g){var $=t.substring(m+1,E);try{RegExp("["+$+"]")}catch(t){var S=this.parse($,v);o=o.substr(0,d)+"\\["+S[0]+"\\]",c=c||S[1],g=!1;continue}}c=!0,g=!1,o+=j;continue;default:x(),p?p=!1:!h[j]||"^"===j&&g||(o+="\\"),o+=j}g&&($=t.substr(m+1),S=this.parse($,v),o=o.substr(0,d)+"\\["+S[0],c=c||S[1]);for(w=f.pop();w;w=f.pop()){var A=o.slice(w.reStart+w.open.length);this.debug("setting tail",o,w),A=A.replace(/((?:\\{2}){0,64})(\\?)\|/g,function(t,e,r){return r||(r="\\"),e+e+r+"|"}),this.debug("tail=%j\n   %s",A,A,w,o);var R="*"===w.type?u:"?"===w.type?a:"\\"+w.type;c=!0,o=o.slice(0,w.reStart)+R+"\\("+A}x(),p&&(o+="\\\\");var C=!1;switch(o.charAt(0)){case".":case"[":case"(":C=!0}for(var M=l.length-1;M>-1;M--){var L=l[M],k=o.slice(0,L.reStart),T=o.slice(L.reStart,L.reEnd-8),D=o.slice(L.reEnd-8,L.reEnd),I=o.slice(L.reEnd);D+=I;var _=k.split("(").length-1,N=I;for(E=0;E<_;E++)N=N.replace(/\)[+*?]?/,"");var F="";""===(I=N)&&e!==v&&(F="$");var P=k+T+I+F+D;o=P}""!==o&&c&&(o="(?=.)"+o);C&&(o=b+o);if(e===v)return[o,c];if(!c)return t.replace(/\\(.)/g,"$1");var B=r.nocase?"i":"";try{var q=new RegExp("^"+o+"$",B)}catch(t){return new RegExp("$.")}return q._glob=t,q._src=o,q};var v={};g.makeRe=function(t,e){return new d(t,e||{}).makeRe()},d.prototype.makeRe=function(){if(this.regexp||!1===this.regexp)return this.regexp;var t=this.set;if(!t.length)return this.regexp=!1,this.regexp;var e=this.options,r=e.noglobstar?u:e.dot?c:p,n=e.nocase?"i":"",o=t.map(function(t){return t.map(function(t){return t===i?r:"string"==typeof t?t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"):t._src}).join("\\/")}).join("|");o="^(?:"+o+")$",this.negate&&(o="^(?!"+o+").*$");try{this.regexp=new RegExp(o,n)}catch(t){this.regexp=!1}return this.regexp},g.match=function(t,e,r){var n=new d(e,r=r||{});return t=t.filter(function(t){return n.match(t)}),n.options.nonull&&!t.length&&t.push(e),t},d.prototype.match=function(t,e){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return""===t;if("/"===t&&e)return!0;var r=this.options;"/"!==n.sep&&(t=t.split(n.sep).join("/"));t=t.split(f),this.debug(this.pattern,"split",t);var i,o,s=this.set;for(this.debug(this.pattern,"set",s),o=t.length-1;o>=0&&!(i=t[o]);o--);for(o=0;o<s.length;o++){var a=s[o],u=t;r.matchBase&&1===a.length&&(u=[i]);var c=this.matchOne(u,a,e);if(c)return!!r.flipNegate||!this.negate}return!r.flipNegate&&this.negate},d.prototype.matchOne=function(t,e,r){var n=this.options;this.debug("matchOne",{this:this,file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var o=0,s=0,a=t.length,u=e.length;o<a&&s<u;o++,s++){this.debug("matchOne loop");var c,p=e[s],h=t[o];if(this.debug(e,p,h),!1===p)return!1;if(p===i){this.debug("GLOBSTAR",[e,p,h]);var f=o,l=s+1;if(l===u){for(this.debug("** at the end");o<a;o++)if("."===t[o]||".."===t[o]||!n.dot&&"."===t[o].charAt(0))return!1;return!0}for(;f<a;){var g=t[f];if(this.debug("\nglobstar while",t,f,e,l,g),this.matchOne(t.slice(f),e.slice(l),r))return this.debug("globstar found match!",f,a,g),!0;if("."===g||".."===g||!n.dot&&"."===g.charAt(0)){this.debug("dot detected!",t,f,e,l);break}this.debug("globstar swallow a segment, and continue"),f++}return!(!r||(this.debug("\n>>> no match, partial?",t,f,e,l),f!==a))}if("string"==typeof p?(c=n.nocase?h.toLowerCase()===p.toLowerCase():h===p,this.debug("string match",p,h,c)):(c=h.match(p),this.debug("pattern match",p,h,c)),!c)return!1}if(o===a&&s===u)return!0;if(o===a)return r;if(s===u)return o===a-1&&""===t[o];throw new Error("wtf?")}},function(t,e,r){var n=r(4),i=r(5);t.exports=function(t){if(!t)return[];"{}"===t.substr(0,2)&&(t="\\{\\}"+t.substr(2));return function t(e,r){var o=[];var s=i("{","}",e);if(!s||/\$$/.test(s.pre))return[e];var u=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(s.body);var c=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(s.body);var h=u||c;var m=s.body.indexOf(",")>=0;if(!h&&!m)return s.post.match(/,.*\}/)?(e=s.pre+"{"+s.body+a+s.post,t(e)):[e];var v;if(h)v=s.body.split(/\.\./);else if(1===(v=function t(e){if(!e)return[""];var r=[];var n=i("{","}",e);if(!n)return e.split(",");var o=n.pre;var s=n.body;var a=n.post;var u=o.split(",");u[u.length-1]+="{"+s+"}";var c=t(a);a.length&&(u[u.length-1]+=c.shift(),u.push.apply(u,c));r.push.apply(r,u);return r}(s.body)).length&&1===(v=t(v[0],!1).map(f)).length){var b=s.post.length?t(s.post,!1):[""];return b.map(function(t){return s.pre+v[0]+t})}var y=s.pre;var b=s.post.length?t(s.post,!1):[""];var x;if(h){var j=p(v[0]),E=p(v[1]),O=Math.max(v[0].length,v[1].length),w=3==v.length?Math.abs(p(v[2])):1,$=g,S=E<j;S&&(w*=-1,$=d);var A=v.some(l);x=[];for(var R=j;$(R,E);R+=w){var C;if(c)"\\"===(C=String.fromCharCode(R))&&(C="");else if(C=String(R),A){var M=O-C.length;if(M>0){var L=new Array(M+1).join("0");C=R<0?"-"+L+C.slice(1):L+C}}x.push(C)}}else x=n(v,function(e){return t(e,!1)});for(var k=0;k<x.length;k++)for(var T=0;T<b.length;T++){var D=y+x[k]+b[T];(!r||h||D)&&o.push(D)}return o}(function(t){return t.split("\\\\").join(o).split("\\{").join(s).split("\\}").join(a).split("\\,").join(u).split("\\.").join(c)}(t),!0).map(h)};var o="\0SLASH"+Math.random()+"\0",s="\0OPEN"+Math.random()+"\0",a="\0CLOSE"+Math.random()+"\0",u="\0COMMA"+Math.random()+"\0",c="\0PERIOD"+Math.random()+"\0";function p(t){return parseInt(t,10)==t?parseInt(t,10):t.charCodeAt(0)}function h(t){return t.split(o).join("\\").split(s).join("{").split(a).join("}").split(u).join(",").split(c).join(".")}function f(t){return"{"+t+"}"}function l(t){return/^-?0\d/.test(t)}function g(t,e){return t<=e}function d(t,e){return t>=e}},function(t,e){t.exports=function(t,e){for(var n=[],i=0;i<t.length;i++){var o=e(t[i],i);r(o)?n.push.apply(n,o):n.push(o)}return n};var r=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,r){"use strict";function n(t,e,r){t instanceof RegExp&&(t=i(t,r)),e instanceof RegExp&&(e=i(e,r));var n=o(t,e,r);return n&&{start:n[0],end:n[1],pre:r.slice(0,n[0]),body:r.slice(n[0]+t.length,n[1]),post:r.slice(n[1]+e.length)}}function i(t,e){var r=e.match(t);return r?r[0]:null}function o(t,e,r){var n,i,o,s,a,u=r.indexOf(t),c=r.indexOf(e,u+1),p=u;if(u>=0&&c>0){for(n=[],o=r.length;p>=0&&!a;)p==u?(n.push(p),u=r.indexOf(t,p+1)):1==n.length?a=[n.pop(),c]:((i=n.pop())<o&&(o=i,s=c),c=r.indexOf(e,p+1)),p=u<c&&u>=0?u:c;n.length&&(a=[o,s])}return a}t.exports=n,n.range=o},function(t,e,r){"use strict";var n=t.exports={camelback:function(t){var e=n.split(t);return e.shift()+i(e).join("")},camelcase:function(t){return i(n.split(t)).join("")},dash:function(t){return n.split(t).join("-")},underscore:function(t){return n.split(t).join("_")},split:function(t){return(e=t=t.replace(/[^a-z0-9]+/gi," ").replace(/([A-Z0-9]+)([A-Z][a-z])/g,"$1 $2").replace(/([a-z0-9])([A-Z])/g,"$1 $2").toLowerCase(),e.replace(/^\s+|\s+$/g,"")).split(/\s+/);var e}};function i(t){for(var e=[],r=0;r<t.length;r++)e.push(t[r].charAt(0).toUpperCase()+t[r].substr(1));return e}},function(t,e,r){"use strict";let n;r.r(e),function(t){t[t.FILE=1]="FILE",t[t.DIRECTORY=2]="DIRECTORY"}(n||(n={}));const i={module:"es6",filetype:"ts",match:"*.+(png|jpg|png|svg|pdf|gif|mov|ico|xml)",assetsPathList:["./assets"],exportReactComponentForSvg:!1};var o=r(0);var s=r(1),a=r(2);const u=r(6);r.d(e,"generateIndexFileForDirectory",function(){return c});const c=(t,e,r=i,p=!1)=>{const h=class{static parseDirectory(t,e=i){let r;try{if(!(r=s.lstatSync(t)).isDirectory())return}catch(t){return}return s.readdirSync(t).map(e=>({filename:e,stats:s.lstatSync(o.resolve(t,e))})).filter(({filename:t,stats:r})=>!!r.isDirectory()||!!r.isFile()&&a(t,e.match,{matchBase:!0})).map(({filename:e,stats:r})=>{const i=u.camelback(e),o=/\d/.test(i.substr(0,1))?"num"+i:i;return{type:r.isDirectory()?n.DIRECTORY:n.FILE,filename:e,basedir:t,exportedName:o}})}}.parseDirectory(t,r);if(h){let a="index";const u=class{static generateContentByEnteryList(t,e=i){const r=[],n=[];t.sort((t,e)=>t.type-e.type).forEach(t=>{if(r.push(t.exportedName),"es6"==e.module){if(n.push(`import ${t.exportedName} from './${t.filename}';`),e.exportReactComponentForSvg&&".svg"===o.extname(t.filename).toLowerCase()){const e=`${t.exportedName}Component`;n.push(`import { ReactComponent as ${e} } from './${t.filename}';`),r.push(e)}}else"commonjs"==e.module&&n.push(`const ${t.exportedName} = require('./${t.filename}');`)});const s=n.join("\n");let a;return"es6"===e.module?a=`export default {\n    ${r.join(",\n    ")}\n};`:"commonjs"===e.module&&(a=`module.exports = {\n    ${r.join(",\n    ")}\n};`),[s,"\n",a].join("\n")}}.generateContentByEnteryList(h,r);"ts"===r.filetype?a+=".ts":a+=".js";const f=o.resolve(t,a);s.writeFileSync(f,u),p&&console.log(`Generated ${a} on directory: ${t}`),e&&h.filter(t=>t.type===n.DIRECTORY).forEach(n=>{c(o.resolve(t,n.filename),e,r,p)})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,