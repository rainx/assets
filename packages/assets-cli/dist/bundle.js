!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=11)}([function(t,e,n){var r=n(4).EventEmitter,i=n(5).spawn,o=n(2),s=o.dirname,a=o.basename,u=n(1);function c(t,e){this.flags=t,this.required=t.indexOf("<")>=0,this.optional=t.indexOf("[")>=0,this.bool=-1===t.indexOf("-no-"),(t=t.split(/[ ,|]+/)).length>1&&!/^[[<]/.test(t[1])&&(this.short=t.shift()),this.long=t.shift(),this.description=e||""}function p(t){this.commands=[],this.options=[],this._execs={},this._allowUnknownOption=!1,this._args=[],this._name=t||""}function h(t,e){var n=Math.max(0,e-t.length);return t+Array(n+1).join(" ")}function l(t,e){e=e||[];for(var n=0;n<e.length;n++)"--help"!==e[n]&&"-h"!==e[n]||(t.outputHelp(),process.exit(0))}function f(t){var e=t.name+(!0===t.variadic?"...":"");return t.required?"<"+e+">":"["+e+"]"}function g(t){try{if(u.statSync(t).isFile())return!0}catch(t){return!1}}n(6).inherits(p,r),(e=t.exports=new p).Command=p,e.Option=c,c.prototype.name=function(){return this.long.replace("--","").replace("no-","")},c.prototype.attributeName=function(){return this.name().split("-").reduce(function(t,e){return t+e[0].toUpperCase()+e.slice(1)})},c.prototype.is=function(t){return this.short===t||this.long===t},p.prototype.command=function(t,e,n){"object"==typeof e&&null!==e&&(n=e,e=null),n=n||{};var r=t.split(/ +/),i=new p(r.shift());return e&&(i.description(e),this.executables=!0,this._execs[i._name]=!0,n.isDefault&&(this.defaultExecutable=i._name)),i._noHelp=!!n.noHelp,this.commands.push(i),i.parseExpectedArgs(r),i.parent=this,e?this:i},p.prototype.arguments=function(t){return this.parseExpectedArgs(t.split(/ +/))},p.prototype.addImplicitHelpCommand=function(){this.command("help [cmd]","display help for [cmd]")},p.prototype.parseExpectedArgs=function(t){if(t.length){var e=this;return t.forEach(function(t){var n={required:!1,name:"",variadic:!1};switch(t[0]){case"<":n.required=!0,n.name=t.slice(1,-1);break;case"[":n.name=t.slice(1,-1)}n.name.length>3&&"..."===n.name.slice(-3)&&(n.variadic=!0,n.name=n.name.slice(0,-3)),n.name&&e._args.push(n)}),this}},p.prototype.action=function(t){var e=this,n=function(n,r){n=n||[],r=r||[];var i=e.parseOptions(r);l(e,i.unknown),i.unknown.length>0&&e.unknownOption(i.unknown[0]),i.args.length&&(n=i.args.concat(n)),e._args.forEach(function(t,r){t.required&&null==n[r]?e.missingArgument(t.name):t.variadic&&(r!==e._args.length-1&&e.variadicArgNotLast(t.name),n[r]=n.splice(r))}),e._args.length?n[e._args.length]=e:n.push(e),t.apply(e,n)},r=this.parent||this,i=r===this?"*":this._name;return r.on("command:"+i,n),this._alias&&r.on("command:"+this._alias,n),this},p.prototype.option=function(t,e,n,r){var i=this,o=new c(t,e),s=o.name(),a=o.attributeName();if("function"!=typeof n)if(n instanceof RegExp){var u=n;n=function(t,e){var n=u.exec(t);return n?n[0]:e}}else r=n,n=null;return(!o.bool||o.optional||o.required)&&(o.bool||(r=!0),void 0!==r&&(i[a]=r,o.defaultValue=r)),this.options.push(o),this.on("option:"+s,function(t){null!==t&&n&&(t=n(t,void 0===i[a]?r:i[a])),"boolean"==typeof i[a]||void 0===i[a]?i[a]=null==t?!!o.bool&&(r||!0):t:null!==t&&(i[a]=t)}),this},p.prototype.allowUnknownOption=function(t){return this._allowUnknownOption=0===arguments.length||t,this},p.prototype.parse=function(t){this.executables&&this.addImplicitHelpCommand(),this.rawArgs=t,this._name=this._name||a(t[1],".js"),this.executables&&t.length<3&&!this.defaultExecutable&&t.push("--help");var e=this.parseOptions(this.normalize(t.slice(2))),n=this.args=e.args,r=this.parseArgs(this.args,e.unknown),i=r.args[0],o=null;return i&&(o=this.commands.filter(function(t){return t.alias()===i})[0]),this._execs[i]&&"function"!=typeof this._execs[i]?this.executeSubCommand(t,n,e.unknown):o?(n[0]=o._name,this.executeSubCommand(t,n,e.unknown)):this.defaultExecutable?(n.unshift(this.defaultExecutable),this.executeSubCommand(t,n,e.unknown)):r},p.prototype.executeSubCommand=function(t,e,n){(e=e.concat(n)).length||this.help(),"help"===e[0]&&1===e.length&&this.help(),"help"===e[0]&&(e[0]=e[1],e[1]="--help");var r,c=t[1],p=a(c,o.extname(c))+"-"+e[0],h=u.lstatSync(c).isSymbolicLink()?u.readlinkSync(c):c;h!==c&&"/"!==h.charAt(0)&&(h=o.join(s(c),h)),r=s(h);var l,f=o.join(r,p),m=!1;g(f+".js")?(p=f+".js",m=!0):g(f+".ts")?(p=f+".ts",m=!0):g(f)&&(p=f),e=e.slice(1),"win32"!==process.platform?m?(e.unshift(p),e=(process.execArgv||[]).concat(e),l=i(process.argv[0],e,{stdio:"inherit",customFds:[0,1,2]})):l=i(p,e,{stdio:"inherit",customFds:[0,1,2]}):(e.unshift(p),l=i(process.execPath,e,{stdio:"inherit"}));["SIGUSR1","SIGUSR2","SIGTERM","SIGINT","SIGHUP"].forEach(function(t){process.on(t,function(){!1===l.killed&&null===l.exitCode&&l.kill(t)})}),l.on("close",process.exit.bind(process)),l.on("error",function(t){"ENOENT"===t.code?console.error("error: %s(1) does not exist, try --help",p):"EACCES"===t.code&&console.error("error: %s(1) not executable. try chmod or run with root",p),process.exit(1)}),this.runningCommand=l},p.prototype.normalize=function(t){for(var e,n,r,i=[],o=0,s=t.length;o<s;++o){if(e=t[o],o>0&&(n=this.optionFor(t[o-1])),"--"===e){i=i.concat(t.slice(o));break}n&&n.required?i.push(e):e.length>1&&"-"===e[0]&&"-"!==e[1]?e.slice(1).split("").forEach(function(t){i.push("-"+t)}):/^--/.test(e)&&~(r=e.indexOf("="))?i.push(e.slice(0,r),e.slice(r+1)):i.push(e)}return i},p.prototype.parseArgs=function(t,e){var n;return t.length?(n=t[0],this.listeners("command:"+n).length?this.emit("command:"+t.shift(),t,e):this.emit("command:*",t)):(l(this,e),e.length>0&&this.unknownOption(e[0]),0===this.commands.length&&0===this._args.filter(function(t){return t.required}).length&&this.emit("command:*")),this},p.prototype.optionFor=function(t){for(var e=0,n=this.options.length;e<n;++e)if(this.options[e].is(t))return this.options[e]},p.prototype.parseOptions=function(t){for(var e,n,r,i=[],o=t.length,s=[],a=0;a<o;++a)if(r=t[a],e)i.push(r);else if("--"!==r)if(n=this.optionFor(r))if(n.required){if(null==(r=t[++a]))return this.optionMissingArgument(n);this.emit("option:"+n.name(),r)}else n.optional?(null==(r=t[a+1])||"-"===r[0]&&"-"!==r?r=null:++a,this.emit("option:"+n.name(),r)):this.emit("option:"+n.name());else r.length>1&&"-"===r[0]?(s.push(r),a+1<t.length&&"-"!==t[a+1][0]&&s.push(t[++a])):i.push(r);else e=!0;return{args:i,unknown:s}},p.prototype.opts=function(){for(var t={},e=this.options.length,n=0;n<e;n++){var r=this.options[n].attributeName();t[r]=r===this._versionOptionName?this._version:this[r]}return t},p.prototype.missingArgument=function(t){console.error("error: missing required argument `%s'",t),process.exit(1)},p.prototype.optionMissingArgument=function(t,e){e?console.error("error: option `%s' argument missing, got `%s'",t.flags,e):console.error("error: option `%s' argument missing",t.flags),process.exit(1)},p.prototype.unknownOption=function(t){this._allowUnknownOption||(console.error("error: unknown option `%s'",t),process.exit(1))},p.prototype.variadicArgNotLast=function(t){console.error("error: variadic arguments must be last `%s'",t),process.exit(1)},p.prototype.version=function(t,e){if(0===arguments.length)return this._version;this._version=t;var n=new c(e=e||"-V, --version","output the version number");return this._versionOptionName=n.long.substr(2)||"version",this.options.push(n),this.on("option:"+this._versionOptionName,function(){process.stdout.write(t+"\n"),process.exit(0)}),this},p.prototype.description=function(t,e){return 0===arguments.length?this._description:(this._description=t,this._argsDescription=e,this)},p.prototype.alias=function(t){var e=this;if(0!==this.commands.length&&(e=this.commands[this.commands.length-1]),0===arguments.length)return e._alias;if(t===e._name)throw new Error("Command alias can't be the same as its name");return e._alias=t,this},p.prototype.usage=function(t){var e=this._args.map(function(t){return f(t)}),n="[options]"+(this.commands.length?" [command]":"")+(this._args.length?" "+e.join(" "):"");return 0===arguments.length?this._usage||n:(this._usage=t,this)},p.prototype.name=function(t){return 0===arguments.length?this._name:(this._name=t,this)},p.prototype.prepareCommands=function(){return this.commands.filter(function(t){return!t._noHelp}).map(function(t){var e=t._args.map(function(t){return f(t)}).join(" ");return[t._name+(t._alias?"|"+t._alias:"")+(t.options.length?" [options]":"")+(e?" "+e:""),t._description]})},p.prototype.largestCommandLength=function(){return this.prepareCommands().reduce(function(t,e){return Math.max(t,e[0].length)},0)},p.prototype.largestOptionLength=function(){var t=[].slice.call(this.options);return t.push({flags:"-h, --help"}),t.reduce(function(t,e){return Math.max(t,e.flags.length)},0)},p.prototype.largestArgLength=function(){return this._args.reduce(function(t,e){return Math.max(t,e.name.length)},0)},p.prototype.padWidth=function(){var t=this.largestOptionLength();return this._argsDescription&&this._args.length&&this.largestArgLength()>t&&(t=this.largestArgLength()),this.commands&&this.commands.length&&this.largestCommandLength()>t&&(t=this.largestCommandLength()),t},p.prototype.optionHelp=function(){var t=this.padWidth();return this.options.map(function(e){return h(e.flags,t)+"  "+e.description+(e.bool&&void 0!==e.defaultValue?" (default: "+JSON.stringify(e.defaultValue)+")":"")}).concat([h("-h, --help",t)+"  output usage information"]).join("\n")},p.prototype.commandHelp=function(){if(!this.commands.length)return"";var t=this.prepareCommands(),e=this.padWidth();return["Commands:",t.map(function(t){var n=t[1]?"  "+t[1]:"";return(n?h(t[0],e):t[0])+n}).join("\n").replace(/^/gm,"  "),""].join("\n")},p.prototype.helpInformation=function(){var t=[];if(this._description){t=[this._description,""];var e=this._argsDescription;if(e&&this._args.length){var n=this.padWidth();t.push("Arguments:"),t.push(""),this._args.forEach(function(r){t.push("  "+h(r.name,n)+"  "+e[r.name])}),t.push("")}}var r=this._name;this._alias&&(r=r+"|"+this._alias);var i=["Usage: "+r+" "+this.usage(),""],o=[],s=this.commandHelp();s&&(o=[s]);var a=["Options:",""+this.optionHelp().replace(/^/gm,"  "),""];return i.concat(t).concat(a).concat(o).join("\n")},p.prototype.outputHelp=function(t){t||(t=function(t){return t}),process.stdout.write(t(this.helpInformation())),this.emit("--help")},p.prototype.help=function(t){this.outputHelp(t),process.exit()}},function(t,e){t.exports=require("fs")},function(t,e){t.exports=require("path")},function(t,e,n){t.exports=g,g.Minimatch=m;var r={sep:"/"};try{r=n(2)}catch(t){}var i=g.GLOBSTAR=m.GLOBSTAR={},o=n(7),s={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},a="[^/]",u=a+"*?",c="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",p="(?:(?!(?:\\/|^)\\.).)*?",h="().*{}+?[]^$\\!".split("").reduce(function(t,e){return t[e]=!0,t},{});var l=/\/+/;function f(t,e){t=t||{},e=e||{};var n={};return Object.keys(e).forEach(function(t){n[t]=e[t]}),Object.keys(t).forEach(function(e){n[e]=t[e]}),n}function g(t,e,n){if("string"!=typeof e)throw new TypeError("glob pattern string required");return n||(n={}),!(!n.nocomment&&"#"===e.charAt(0))&&(""===e.trim()?""===t:new m(e,n).match(t))}function m(t,e){if(!(this instanceof m))return new m(t,e);if("string"!=typeof t)throw new TypeError("glob pattern string required");e||(e={}),t=t.trim(),"/"!==r.sep&&(t=t.split(r.sep).join("/")),this.options=e,this.set=[],this.pattern=t,this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.make()}function d(t,e){if(e||(e=this instanceof m?this.options:{}),void 0===(t=void 0===t?this.pattern:t))throw new TypeError("undefined pattern");return e.nobrace||!t.match(/\{.*\}/)?[t]:o(t)}g.filter=function(t,e){return e=e||{},function(n,r,i){return g(n,t,e)}},g.defaults=function(t){if(!t||!Object.keys(t).length)return g;var e=g,n=function(n,r,i){return e.minimatch(n,r,f(t,i))};return n.Minimatch=function(n,r){return new e.Minimatch(n,f(t,r))},n},m.defaults=function(t){return t&&Object.keys(t).length?g.defaults(t).Minimatch:m},m.prototype.debug=function(){},m.prototype.make=function(){if(this._made)return;var t=this.pattern,e=this.options;if(!e.nocomment&&"#"===t.charAt(0))return void(this.comment=!0);if(!t)return void(this.empty=!0);this.parseNegate();var n=this.globSet=this.braceExpand();e.debug&&(this.debug=console.error);this.debug(this.pattern,n),n=this.globParts=n.map(function(t){return t.split(l)}),this.debug(this.pattern,n),n=n.map(function(t,e,n){return t.map(this.parse,this)},this),this.debug(this.pattern,n),n=n.filter(function(t){return-1===t.indexOf(!1)}),this.debug(this.pattern,n),this.set=n},m.prototype.parseNegate=function(){var t=this.pattern,e=!1,n=this.options,r=0;if(n.nonegate)return;for(var i=0,o=t.length;i<o&&"!"===t.charAt(i);i++)e=!e,r++;r&&(this.pattern=t.substr(r));this.negate=e},g.braceExpand=function(t,e){return d(t,e)},m.prototype.braceExpand=d,m.prototype.parse=function(t,e){if(t.length>65536)throw new TypeError("pattern is too long");var n=this.options;if(!n.noglobstar&&"**"===t)return i;if(""===t)return"";var r,o="",c=!!n.nocase,p=!1,l=[],f=[],g=!1,m=-1,d=-1,y="."===t.charAt(0)?"":n.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",b=this;function x(){if(r){switch(r){case"*":o+=u,c=!0;break;case"?":o+=a,c=!0;break;default:o+="\\"+r}b.debug("clearStateChar %j %j",r,o),r=!1}}for(var _,w=0,j=t.length;w<j&&(_=t.charAt(w));w++)if(this.debug("%s\t%s %s %j",t,w,o,_),p&&h[_])o+="\\"+_,p=!1;else switch(_){case"/":return!1;case"\\":x(),p=!0;continue;case"?":case"*":case"+":case"@":case"!":if(this.debug("%s\t%s %s %j <-- stateChar",t,w,o,_),g){this.debug("  in class"),"!"===_&&w===d+1&&(_="^"),o+=_;continue}b.debug("call clearStateChar %j",r),x(),r=_,n.noext&&x();continue;case"(":if(g){o+="(";continue}if(!r){o+="\\(";continue}l.push({type:r,start:w-1,reStart:o.length,open:s[r].open,close:s[r].close}),o+="!"===r?"(?:(?!(?:":"(?:",this.debug("plType %j %j",r,o),r=!1;continue;case")":if(g||!l.length){o+="\\)";continue}x(),c=!0;var O=l.pop();o+=O.close,"!"===O.type&&f.push(O),O.reEnd=o.length;continue;case"|":if(g||!l.length||p){o+="\\|",p=!1;continue}x(),o+="|";continue;case"[":if(x(),g){o+="\\"+_;continue}g=!0,d=w,m=o.length,o+=_;continue;case"]":if(w===d+1||!g){o+="\\"+_,p=!1;continue}if(g){var E=t.substring(d+1,w);try{RegExp("["+E+"]")}catch(t){var S=this.parse(E,v);o=o.substr(0,m)+"\\["+S[0]+"\\]",c=c||S[1],g=!1;continue}}c=!0,g=!1,o+=_;continue;default:x(),p?p=!1:!h[_]||"^"===_&&g||(o+="\\"),o+=_}g&&(E=t.substr(d+1),S=this.parse(E,v),o=o.substr(0,m)+"\\["+S[0],c=c||S[1]);for(O=l.pop();O;O=l.pop()){var A=o.slice(O.reStart+O.open.length);this.debug("setting tail",o,O),A=A.replace(/((?:\\{2}){0,64})(\\?)\|/g,function(t,e,n){return n||(n="\\"),e+e+n+"|"}),this.debug("tail=%j\n   %s",A,A,O,o);var C="*"===O.type?u:"?"===O.type?a:"\\"+O.type;c=!0,o=o.slice(0,O.reStart)+C+"\\("+A}x(),p&&(o+="\\\\");var k=!1;switch(o.charAt(0)){case".":case"[":case"(":k=!0}for(var $=f.length-1;$>-1;$--){var L=f[$],R=o.slice(0,L.reStart),M=o.slice(L.reStart,L.reEnd-8),N=o.slice(L.reEnd-8,L.reEnd),I=o.slice(L.reEnd);N+=I;var q=R.split("(").length-1,F=I;for(w=0;w<q;w++)F=F.replace(/\)[+*?]?/,"");var T="";""===(I=F)&&e!==v&&(T="$");var D=R+M+I+T+N;o=D}""!==o&&c&&(o="(?=.)"+o);k&&(o=y+o);if(e===v)return[o,c];if(!c)return t.replace(/\\(.)/g,"$1");var H=n.nocase?"i":"";try{var P=new RegExp("^"+o+"$",H)}catch(t){return new RegExp("$.")}return P._glob=t,P._src=o,P};var v={};g.makeRe=function(t,e){return new m(t,e||{}).makeRe()},m.prototype.makeRe=function(){if(this.regexp||!1===this.regexp)return this.regexp;var t=this.set;if(!t.length)return this.regexp=!1,this.regexp;var e=this.options,n=e.noglobstar?u:e.dot?c:p,r=e.nocase?"i":"",o=t.map(function(t){return t.map(function(t){return t===i?n:"string"==typeof t?t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"):t._src}).join("\\/")}).join("|");o="^(?:"+o+")$",this.negate&&(o="^(?!"+o+").*$");try{this.regexp=new RegExp(o,r)}catch(t){this.regexp=!1}return this.regexp},g.match=function(t,e,n){var r=new m(e,n=n||{});return t=t.filter(function(t){return r.match(t)}),r.options.nonull&&!t.length&&t.push(e),t},m.prototype.match=function(t,e){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return""===t;if("/"===t&&e)return!0;var n=this.options;"/"!==r.sep&&(t=t.split(r.sep).join("/"));t=t.split(l),this.debug(this.pattern,"split",t);var i,o,s=this.set;for(this.debug(this.pattern,"set",s),o=t.length-1;o>=0&&!(i=t[o]);o--);for(o=0;o<s.length;o++){var a=s[o],u=t;n.matchBase&&1===a.length&&(u=[i]);var c=this.matchOne(u,a,e);if(c)return!!n.flipNegate||!this.negate}return!n.flipNegate&&this.negate},m.prototype.matchOne=function(t,e,n){var r=this.options;this.debug("matchOne",{this:this,file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var o=0,s=0,a=t.length,u=e.length;o<a&&s<u;o++,s++){this.debug("matchOne loop");var c,p=e[s],h=t[o];if(this.debug(e,p,h),!1===p)return!1;if(p===i){this.debug("GLOBSTAR",[e,p,h]);var l=o,f=s+1;if(f===u){for(this.debug("** at the end");o<a;o++)if("."===t[o]||".."===t[o]||!r.dot&&"."===t[o].charAt(0))return!1;return!0}for(;l<a;){var g=t[l];if(this.debug("\nglobstar while",t,l,e,f,g),this.matchOne(t.slice(l),e.slice(f),n))return this.debug("globstar found match!",l,a,g),!0;if("."===g||".."===g||!r.dot&&"."===g.charAt(0)){this.debug("dot detected!",t,l,e,f);break}this.debug("globstar swallow a segment, and continue"),l++}return!(!n||(this.debug("\n>>> no match, partial?",t,l,e,f),l!==a))}if("string"==typeof p?(c=r.nocase?h.toLowerCase()===p.toLowerCase():h===p,this.debug("string match",p,h,c)):(c=h.match(p),this.debug("pattern match",p,h,c)),!c)return!1}if(o===a&&s===u)return!0;if(o===a)return n;if(s===u)return o===a-1&&""===t[o];throw new Error("wtf?")}},function(t,e){t.exports=require("events")},function(t,e){t.exports=require("child_process")},function(t,e){t.exports=require("util")},function(t,e,n){var r=n(8),i=n(9);t.exports=function(t){if(!t)return[];"{}"===t.substr(0,2)&&(t="\\{\\}"+t.substr(2));return function t(e,n){var o=[];var s=i("{","}",e);if(!s||/\$$/.test(s.pre))return[e];var u=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(s.body);var c=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(s.body);var h=u||c;var d=s.body.indexOf(",")>=0;if(!h&&!d)return s.post.match(/,.*\}/)?(e=s.pre+"{"+s.body+a+s.post,t(e)):[e];var v;if(h)v=s.body.split(/\.\./);else if(1===(v=function t(e){if(!e)return[""];var n=[];var r=i("{","}",e);if(!r)return e.split(",");var o=r.pre;var s=r.body;var a=r.post;var u=o.split(",");u[u.length-1]+="{"+s+"}";var c=t(a);a.length&&(u[u.length-1]+=c.shift(),u.push.apply(u,c));n.push.apply(n,u);return n}(s.body)).length&&1===(v=t(v[0],!1).map(l)).length){var y=s.post.length?t(s.post,!1):[""];return y.map(function(t){return s.pre+v[0]+t})}var b=s.pre;var y=s.post.length?t(s.post,!1):[""];var x;if(h){var _=p(v[0]),w=p(v[1]),j=Math.max(v[0].length,v[1].length),O=3==v.length?Math.abs(p(v[2])):1,E=g,S=w<_;S&&(O*=-1,E=m);var A=v.some(f);x=[];for(var C=_;E(C,w);C+=O){var k;if(c)"\\"===(k=String.fromCharCode(C))&&(k="");else if(k=String(C),A){var $=j-k.length;if($>0){var L=new Array($+1).join("0");k=C<0?"-"+L+k.slice(1):L+k}}x.push(k)}}else x=r(v,function(e){return t(e,!1)});for(var R=0;R<x.length;R++)for(var M=0;M<y.length;M++){var N=b+x[R]+y[M];(!n||h||N)&&o.push(N)}return o}(function(t){return t.split("\\\\").join(o).split("\\{").join(s).split("\\}").join(a).split("\\,").join(u).split("\\.").join(c)}(t),!0).map(h)};var o="\0SLASH"+Math.random()+"\0",s="\0OPEN"+Math.random()+"\0",a="\0CLOSE"+Math.random()+"\0",u="\0COMMA"+Math.random()+"\0",c="\0PERIOD"+Math.random()+"\0";function p(t){return parseInt(t,10)==t?parseInt(t,10):t.charCodeAt(0)}function h(t){return t.split(o).join("\\").split(s).join("{").split(a).join("}").split(u).join(",").split(c).join(".")}function l(t){return"{"+t+"}"}function f(t){return/^-?0\d/.test(t)}function g(t,e){return t<=e}function m(t,e){return t>=e}},function(t,e){t.exports=function(t,e){for(var r=[],i=0;i<t.length;i++){var o=e(t[i],i);n(o)?r.push.apply(r,o):r.push(o)}return r};var n=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,n){"use strict";function r(t,e,n){t instanceof RegExp&&(t=i(t,n)),e instanceof RegExp&&(e=i(e,n));var r=o(t,e,n);return r&&{start:r[0],end:r[1],pre:n.slice(0,r[0]),body:n.slice(r[0]+t.length,r[1]),post:n.slice(r[1]+e.length)}}function i(t,e){var n=e.match(t);return n?n[0]:null}function o(t,e,n){var r,i,o,s,a,u=n.indexOf(t),c=n.indexOf(e,u+1),p=u;if(u>=0&&c>0){for(r=[],o=n.length;p>=0&&!a;)p==u?(r.push(p),u=n.indexOf(t,p+1)):1==r.length?a=[r.pop(),c]:((i=r.pop())<o&&(o=i,s=c),c=n.indexOf(e,p+1)),p=u<c&&u>=0?u:c;r.length&&(a=[o,s])}return a}t.exports=r,r.range=o},function(t,e,n){"use strict";var r=t.exports={camelback:function(t){var e=r.split(t);return e.shift()+i(e).join("")},camelcase:function(t){return i(r.split(t)).join("")},dash:function(t){return r.split(t).join("-")},underscore:function(t){return r.split(t).join("_")},split:function(t){return(e=t=t.replace(/[^a-z0-9]+/gi," ").replace(/([A-Z0-9]+)([A-Z][a-z])/g,"$1 $2").replace(/([a-z0-9])([A-Z])/g,"$1 $2").toLowerCase(),e.replace(/^\s+|\s+$/g,"")).split(/\s+/);var e}};function i(t){for(var e=[],n=0;n<t.length;n++)e.push(t[n].charAt(0).toUpperCase()+t[n].substr(1));return e}},function(t,e,n){"use strict";let r;n.r(e),function(t){t[t.FILE=1]="FILE",t[t.DIRECTORY=2]="DIRECTORY"}(r||(r={}));const i={module:"es6",filetype:"ts",match:"*.+(png|jpg|png|svg|pdf|gif|mov|ico|xml)",assetsPathList:["./assets"]};var o=n(1);var s=n(0);var a=n(2),u=n(3);const c=n(10);const p=(t,e,n=i,s=!1)=>{const h=class{static parseDirectory(t,e=i){let n;try{if(!(n=o.lstatSync(t)).isDirectory())return}catch(t){return}return o.readdirSync(t).map(e=>({filename:e,stats:o.lstatSync(a.resolve(t,e))})).filter(({filename:t,stats:n})=>!!n.isDirectory()||!!n.isFile()&&u(t,e.match,{matchBase:!0})).map(({filename:e,stats:n})=>({type:n.isDirectory()?r.DIRECTORY:r.FILE,filename:e,basedir:t,exportedName:c.camelback(e)}))}}.parseDirectory(t,n);if(h){let u="index";const c=class{static generateContentByEnteryList(t,e=i){const n=[],r=[];t.sort((t,e)=>t.type-e.type).forEach(t=>{n.push(t.exportedName),"es6"==e.module?r.push(`import ${t.exportedName} from './${t.filename}';`):"commonjs"==e.module&&r.push(`const ${t.exportedName} = require('./${t.filename}');`)});const o=r.join("\n");let s;return"es6"===e.module?s=`export default {\n    ${n.join(",\n    ")}\n};`:"commonjs"===e.module&&(s=`module.exports = {\n    ${n.join(",\n    ")}\n};`),[o,"\n",s].join("\n")}}.generateContentByEnteryList(h,n);"ts"===n.filetype?u+=".ts":u+=".js";const l=a.resolve(t,u);o.writeFileSync(l,c),s&&console.log(`Generated ${u} on directory: ${t}`),e&&h.filter(t=>t.type===r.DIRECTORY).forEach(r=>{p(a.resolve(t,r.filename),e,n,s)})}};let h;s.arguments("<direcotry>").option("-m, --module <module>","use which JS module systems: es6/commonjs").option("-v, --verbose","ouput detail message to stdout").option("-t, --filetype <filetype>","which file extionsion to use: ts/js").option("-c, --config <config>","config file to read. default <cwd>/.assetsrc","./assetsrc").option("-m, --match <match>","Which files to import. in minimatch format: eg. *.+(png/svg)").action(t=>{h=t}).parse(process.argv);let l=i;if(void 0!==s.config)try{o.lstatSync(s.config).isFile()?s.verbose&&(console.log(`Config file founded! load from ${s.config}`),l=class{static loadOptionsFromConfigFile(t){if(!o.lstatSync(t).isFile())return i;const e=o.readFileSync(t,{encoding:"utf-8"});if(!e)return i;try{const t=JSON.parse(e);return{...i,...t}}catch(t){return i}}}.loadOptionsFromConfigFile(s.config)):s.verbose&&console.log("Config file not founded! use default config")}catch(t){s.verbose&&console.log("Config file your provide has some problems, can not load, fallback to use default config")}else s.verbose&&console.log("Config file not founded! use default config");void 0!==h&&(l={...l,assetsPathList:[h]}),s.module&&(l={...l,module:s.module}),s.filetype&&(l={...l,filetype:s.filetype}),s.match&&(l={...l,match:s.match}),s.verbose&&console.log(`Options is: \n${JSON.stringify(l,void 0,2)}`),l.assetsPathList.forEach(t=>{p(t,!0,l,s.verbose)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbW1hbmRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcInBhdGhcIiIsIndlYnBhY2s6Ly8vLi4vYXNzZXRzLWNvcmUvbm9kZV9tb2R1bGVzL21pbmltYXRjaC9taW5pbWF0Y2guanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZXZlbnRzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY2hpbGRfcHJvY2Vzc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcInV0aWxcIiIsIndlYnBhY2s6Ly8vLi4vYXNzZXRzLWNvcmUvbm9kZV9tb2R1bGVzL2JyYWNlLWV4cGFuc2lvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vYXNzZXRzLWNvcmUvbm9kZV9tb2R1bGVzL2NvbmNhdC1tYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL2Fzc2V0cy1jb3JlL25vZGVfbW9kdWxlcy9iYWxhbmNlZC1tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vYXNzZXRzLWNvcmUvbm9kZV9tb2R1bGVzL3Zhcm5hbWUvbGliL3Zhcm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4uL2Fzc2V0cy1jb3JlL3NyYy90eXBlcy50cyIsIndlYnBhY2s6Ly8vLi4vYXNzZXRzLWNvcmUvc3JjL3BhcnNlci50cyIsIndlYnBhY2s6Ly8vLi4vYXNzZXRzLWNvcmUvc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uLi9hc3NldHMtY29yZS9zcmMvZ2VuZXJhdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi4vYXNzZXRzLWNvcmUvc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkV2ZW50RW1pdHRlciIsInNwYXduIiwicGF0aCIsImRpcm5hbWUiLCJiYXNlbmFtZSIsImZzIiwiT3B0aW9uIiwiZmxhZ3MiLCJkZXNjcmlwdGlvbiIsInRoaXMiLCJyZXF1aXJlZCIsImluZGV4T2YiLCJvcHRpb25hbCIsImJvb2wiLCJzcGxpdCIsImxlbmd0aCIsInRlc3QiLCJzaG9ydCIsInNoaWZ0IiwibG9uZyIsIkNvbW1hbmQiLCJjb21tYW5kcyIsIm9wdGlvbnMiLCJfZXhlY3MiLCJfYWxsb3dVbmtub3duT3B0aW9uIiwiX2FyZ3MiLCJfbmFtZSIsInBhZCIsInN0ciIsIndpZHRoIiwibGVuIiwiTWF0aCIsIm1heCIsIkFycmF5Iiwiam9pbiIsIm91dHB1dEhlbHBJZk5lY2Vzc2FyeSIsImNtZCIsIm91dHB1dEhlbHAiLCJwcm9jZXNzIiwiZXhpdCIsImh1bWFuUmVhZGFibGVBcmdOYW1lIiwiYXJnIiwibmFtZU91dHB1dCIsInZhcmlhZGljIiwiZXhpc3RzIiwiZmlsZSIsInN0YXRTeW5jIiwiaXNGaWxlIiwiZSIsImluaGVyaXRzIiwicmVwbGFjZSIsImF0dHJpYnV0ZU5hbWUiLCJyZWR1Y2UiLCJ3b3JkIiwidG9VcHBlckNhc2UiLCJzbGljZSIsImlzIiwiY29tbWFuZCIsImRlc2MiLCJvcHRzIiwiYXJncyIsImV4ZWN1dGFibGVzIiwiaXNEZWZhdWx0IiwiZGVmYXVsdEV4ZWN1dGFibGUiLCJfbm9IZWxwIiwibm9IZWxwIiwicHVzaCIsInBhcnNlRXhwZWN0ZWRBcmdzIiwicGFyZW50IiwiYXJndW1lbnRzIiwiYWRkSW1wbGljaXRIZWxwQ29tbWFuZCIsInNlbGYiLCJmb3JFYWNoIiwiYXJnRGV0YWlscyIsImFjdGlvbiIsImZuIiwibGlzdGVuZXIiLCJ1bmtub3duIiwicGFyc2VkIiwicGFyc2VPcHRpb25zIiwidW5rbm93bk9wdGlvbiIsImNvbmNhdCIsIm1pc3NpbmdBcmd1bWVudCIsInZhcmlhZGljQXJnTm90TGFzdCIsInNwbGljZSIsImFwcGx5Iiwib24iLCJfYWxpYXMiLCJvcHRpb24iLCJkZWZhdWx0VmFsdWUiLCJvbmFtZSIsIlJlZ0V4cCIsInJlZ2V4IiwidmFsIiwiZGVmIiwiZXhlYyIsInVuZGVmaW5lZCIsImFsbG93VW5rbm93bk9wdGlvbiIsInBhcnNlIiwiYXJndiIsInJhd0FyZ3MiLCJub3JtYWxpemUiLCJyZXN1bHQiLCJwYXJzZUFyZ3MiLCJhbGlhc0NvbW1hbmQiLCJmaWx0ZXIiLCJhbGlhcyIsImV4ZWN1dGVTdWJDb21tYW5kIiwidW5zaGlmdCIsImhlbHAiLCJiYXNlRGlyIiwiZiIsImJpbiIsImV4dG5hbWUiLCJsaW5rIiwibHN0YXRTeW5jIiwiaXNTeW1ib2xpY0xpbmsiLCJyZWFkbGlua1N5bmMiLCJjaGFyQXQiLCJwcm9jIiwibG9jYWxCaW4iLCJpc0V4cGxpY2l0SlMiLCJwbGF0Zm9ybSIsImV4ZWNBcmd2Iiwic3RkaW8iLCJjdXN0b21GZHMiLCJleGVjUGF0aCIsInNpZ25hbCIsImtpbGxlZCIsImV4aXRDb2RlIiwia2lsbCIsImVyciIsImNvZGUiLCJjb25zb2xlIiwiZXJyb3IiLCJydW5uaW5nQ29tbWFuZCIsImxhc3RPcHQiLCJpbmRleCIsInJldCIsIm9wdGlvbkZvciIsImxpc3RlbmVycyIsImVtaXQiLCJhIiwibGl0ZXJhbCIsInVua25vd25PcHRpb25zIiwib3B0aW9uTWlzc2luZ0FyZ3VtZW50IiwiX3ZlcnNpb25PcHRpb25OYW1lIiwiX3ZlcnNpb24iLCJmbGFnIiwidmVyc2lvbiIsInZlcnNpb25PcHRpb24iLCJzdWJzdHIiLCJzdGRvdXQiLCJ3cml0ZSIsImFyZ3NEZXNjcmlwdGlvbiIsIl9kZXNjcmlwdGlvbiIsIl9hcmdzRGVzY3JpcHRpb24iLCJFcnJvciIsInVzYWdlIiwibWFwIiwiX3VzYWdlIiwicHJlcGFyZUNvbW1hbmRzIiwibGFyZ2VzdENvbW1hbmRMZW5ndGgiLCJsYXJnZXN0T3B0aW9uTGVuZ3RoIiwibGFyZ2VzdEFyZ0xlbmd0aCIsInBhZFdpZHRoIiwib3B0aW9uSGVscCIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb21tYW5kSGVscCIsImhlbHBJbmZvcm1hdGlvbiIsImNtZE5hbWUiLCJjbWRzIiwiY2IiLCJwYXNzdGhydSIsInJlcXVpcmUiLCJtaW5pbWF0Y2giLCJNaW5pbWF0Y2giLCJzZXAiLCJlciIsIkdMT0JTVEFSIiwiZXhwYW5kIiwicGxUeXBlcyIsIiEiLCJvcGVuIiwiY2xvc2UiLCI/IiwiKyIsIioiLCJAIiwicW1hcmsiLCJzdGFyIiwidHdvU3RhckRvdCIsInR3b1N0YXJOb0RvdCIsInJlU3BlY2lhbHMiLCJzZXQiLCJzbGFzaFNwbGl0IiwiZXh0IiwiYiIsImtleXMiLCJrIiwicGF0dGVybiIsIlR5cGVFcnJvciIsIm5vY29tbWVudCIsInRyaW0iLCJtYXRjaCIsInJlZ2V4cCIsIm5lZ2F0ZSIsImNvbW1lbnQiLCJlbXB0eSIsIm1ha2UiLCJicmFjZUV4cGFuZCIsIm5vYnJhY2UiLCJsaXN0IiwiZGVmYXVsdHMiLCJvcmlnIiwiZGVidWciLCJfbWFkZSIsInBhcnNlTmVnYXRlIiwiZ2xvYlNldCIsImdsb2JQYXJ0cyIsInNpIiwibmVnYXRlT2Zmc2V0Iiwibm9uZWdhdGUiLCJpc1N1YiIsIm5vZ2xvYnN0YXIiLCJzdGF0ZUNoYXIiLCJyZSIsImhhc01hZ2ljIiwibm9jYXNlIiwiZXNjYXBpbmciLCJwYXR0ZXJuTGlzdFN0YWNrIiwibmVnYXRpdmVMaXN0cyIsImluQ2xhc3MiLCJyZUNsYXNzU3RhcnQiLCJjbGFzc1N0YXJ0IiwicGF0dGVyblN0YXJ0IiwiZG90IiwiY2xlYXJTdGF0ZUNoYXIiLCJub2V4dCIsInR5cGUiLCJzdGFydCIsInJlU3RhcnQiLCJwbCIsInBvcCIsInJlRW5kIiwiY3MiLCJzdWJzdHJpbmciLCJzcCIsIlNVQlBBUlNFIiwidGFpbCIsIl8iLCIkMSIsIiQyIiwiYWRkUGF0dGVyblN0YXJ0IiwibmwiLCJubEJlZm9yZSIsIm5sRmlyc3QiLCJubExhc3QiLCJubEFmdGVyIiwib3BlblBhcmVuc0JlZm9yZSIsImNsZWFuQWZ0ZXIiLCJkb2xsYXIiLCJuZXdSZSIsInJlZ0V4cCIsIl9nbG9iIiwiX3NyYyIsIm1ha2VSZSIsInR3b1N0YXIiLCJleCIsIm1tIiwibm9udWxsIiwicGFydGlhbCIsImZpbGVuYW1lIiwibWF0Y2hCYXNlIiwiaGl0IiwibWF0Y2hPbmUiLCJmbGlwTmVnYXRlIiwiZmkiLCJwaSIsImZsIiwiZnIiLCJwciIsInN3YWxsb3dlZSIsInRvTG93ZXJDYXNlIiwiY29uY2F0TWFwIiwiYmFsYW5jZWQiLCJpc1RvcCIsImV4cGFuc2lvbnMiLCJwcmUiLCJpc051bWVyaWNTZXF1ZW5jZSIsImJvZHkiLCJpc0FscGhhU2VxdWVuY2UiLCJpc1NlcXVlbmNlIiwiaXNPcHRpb25zIiwicG9zdCIsImVzY0Nsb3NlIiwicGFyc2VDb21tYVBhcnRzIiwicGFydHMiLCJwb3N0UGFydHMiLCJlbWJyYWNlIiwiTiIsIngiLCJudW1lcmljIiwieSIsImluY3IiLCJhYnMiLCJsdGUiLCJyZXZlcnNlIiwiZ3RlIiwic29tZSIsImlzUGFkZGVkIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwibmVlZCIsInoiLCJlbCIsImoiLCJleHBhbnNpb24iLCJlc2NTbGFzaCIsImVzY09wZW4iLCJlc2NDb21tYSIsImVzY1BlcmlvZCIsImVzY2FwZUJyYWNlcyIsInVuZXNjYXBlQnJhY2VzIiwicmFuZG9tIiwicGFyc2VJbnQiLCJjaGFyQ29kZUF0IiwieHMiLCJyZXMiLCJpc0FycmF5IiwidG9TdHJpbmciLCJtYXliZU1hdGNoIiwicmFuZ2UiLCJlbmQiLCJyZWciLCJiZWdzIiwiYmVnIiwibGVmdCIsInJpZ2h0IiwiYWkiLCJiaSIsInZhcm5hbWUiLCJjYW1lbGJhY2siLCJ0aXRsZUNhc2VXb3JkcyIsImNhbWVsY2FzZSIsImRhc2giLCJ1bmRlcnNjb3JlIiwic3RyaW5nIiwicmVzdWx0cyIsIklFbnRyeVR5cGUiLCJkZWZhdWx0QXNzZXRzT3B0aW9ucyIsImZpbGV0eXBlIiwiYXNzZXRzUGF0aExpc3QiLCJnZW5lcmF0ZUluZGV4RmlsZUZvckRpcmVjdG9yeSIsImRpcnBhdGgiLCJyZWN1cnNpdmUiLCJ2ZXJib3NlIiwiZW50cnlMaXN0IiwiW29iamVjdCBPYmplY3RdIiwiZGlyU3RhdHMiLCJpc0RpcmVjdG9yeSIsInN0YXRzIiwiRElSRUNUT1JZIiwiRklMRSIsImJhc2VkaXIiLCJleHBvcnRlZE5hbWUiLCJwYXJzZURpcmVjdG9yeSIsImluZGV4RmlsZW5hbWUiLCJpbmRleEZpbGVDb250ZW50Iiwic3ltYm9sc1RvRXhwb3J0IiwiaW1wb3J0TGluZXMiLCJzb3J0IiwiZW50cnkiLCJlbnRyeU5leHQiLCJpbXBvcnRCbG9jayIsImV4cG9ydEJsb2NrIiwiZ2VuZXJhdGVDb250ZW50QnlFbnRlcnlMaXN0IiwiaW5kZXhGaWxlRnVsbFBhdGgiLCJsb2ciLCJkaXJlY3RvcnkiLCJwcm9ncmFtIiwicm9vdERpcmVjb3RyeSIsImNvbmZpZ0ZpbGVOYW1lIiwiY29udGVudCIsImVuY29kaW5nIiwiY29uZmlnT2JqZWN0IiwibG9hZE9wdGlvbnNGcm9tQ29uZmlnRmlsZSIsImFzc2V0c1BhdGgiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFG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QVUsSUFDTEEsRUFDSDBVLFNBQVU2QixhQUlWQSxVQUNGdlcsRUFBVSxJQUNMQSxFQUNIdUwsTUFBT2dMLFVBSVBBLFdBQ0Z4UCxRQUFRc1AscUJBQXFCcE4sS0FBS0MsVUFBVWxKLE9BQVMwRSxFQUFXLE1BR2xFMUUsRUFBUTJVLGVBQWV6UixRQUFRNFQsSUFFN0JsQyxFQUE4QmtDLEdBQVksRUFBTTlXLEVBQVN1VyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTEpO1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgc3Bhd24gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykuc3Bhd247XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBkaXJuYW1lID0gcGF0aC5kaXJuYW1lO1xudmFyIGJhc2VuYW1lID0gcGF0aC5iYXNlbmFtZTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbi8qKlxuICogSW5oZXJpdCBgQ29tbWFuZGAgZnJvbSBgRXZlbnRFbWl0dGVyLnByb3RvdHlwZWAuXG4gKi9cblxucmVxdWlyZSgndXRpbCcpLmluaGVyaXRzKENvbW1hbmQsIEV2ZW50RW1pdHRlcik7XG5cbi8qKlxuICogRXhwb3NlIHRoZSByb290IGNvbW1hbmQuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gbmV3IENvbW1hbmQoKTtcblxuLyoqXG4gKiBFeHBvc2UgYENvbW1hbmRgLlxuICovXG5cbmV4cG9ydHMuQ29tbWFuZCA9IENvbW1hbmQ7XG5cbi8qKlxuICogRXhwb3NlIGBPcHRpb25gLlxuICovXG5cbmV4cG9ydHMuT3B0aW9uID0gT3B0aW9uO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYE9wdGlvbmAgd2l0aCB0aGUgZ2l2ZW4gYGZsYWdzYCBhbmQgYGRlc2NyaXB0aW9uYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmxhZ3NcbiAqIEBwYXJhbSB7U3RyaW5nfSBkZXNjcmlwdGlvblxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBPcHRpb24oZmxhZ3MsIGRlc2NyaXB0aW9uKSB7XG4gIHRoaXMuZmxhZ3MgPSBmbGFncztcbiAgdGhpcy5yZXF1aXJlZCA9IGZsYWdzLmluZGV4T2YoJzwnKSA+PSAwO1xuICB0aGlzLm9wdGlvbmFsID0gZmxhZ3MuaW5kZXhPZignWycpID49IDA7XG4gIHRoaXMuYm9vbCA9IGZsYWdzLmluZGV4T2YoJy1uby0nKSA9PT0gLTE7XG4gIGZsYWdzID0gZmxhZ3Muc3BsaXQoL1sgLHxdKy8pO1xuICBpZiAoZmxhZ3MubGVuZ3RoID4gMSAmJiAhL15bWzxdLy50ZXN0KGZsYWdzWzFdKSkgdGhpcy5zaG9ydCA9IGZsYWdzLnNoaWZ0KCk7XG4gIHRoaXMubG9uZyA9IGZsYWdzLnNoaWZ0KCk7XG4gIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbiB8fCAnJztcbn1cblxuLyoqXG4gKiBSZXR1cm4gb3B0aW9uIG5hbWUuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuT3B0aW9uLnByb3RvdHlwZS5uYW1lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmxvbmdcbiAgICAucmVwbGFjZSgnLS0nLCAnJylcbiAgICAucmVwbGFjZSgnbm8tJywgJycpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gb3B0aW9uIG5hbWUsIGluIGEgY2FtZWxjYXNlIGZvcm1hdCB0aGF0IGNhbiBiZSB1c2VkXG4gKiBhcyBhIG9iamVjdCBhdHRyaWJ1dGUga2V5LlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk9wdGlvbi5wcm90b3R5cGUuYXR0cmlidXRlTmFtZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY2FtZWxjYXNlKHRoaXMubmFtZSgpKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYGFyZ2AgbWF0Y2hlcyB0aGUgc2hvcnQgb3IgbG9uZyBmbGFnLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBhcmdcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5PcHRpb24ucHJvdG90eXBlLmlzID0gZnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0aGlzLnNob3J0ID09PSBhcmcgfHwgdGhpcy5sb25nID09PSBhcmc7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYENvbW1hbmRgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIENvbW1hbmQobmFtZSkge1xuICB0aGlzLmNvbW1hbmRzID0gW107XG4gIHRoaXMub3B0aW9ucyA9IFtdO1xuICB0aGlzLl9leGVjcyA9IHt9O1xuICB0aGlzLl9hbGxvd1Vua25vd25PcHRpb24gPSBmYWxzZTtcbiAgdGhpcy5fYXJncyA9IFtdO1xuICB0aGlzLl9uYW1lID0gbmFtZSB8fCAnJztcbn1cblxuLyoqXG4gKiBBZGQgY29tbWFuZCBgbmFtZWAuXG4gKlxuICogVGhlIGAuYWN0aW9uKClgIGNhbGxiYWNrIGlzIGludm9rZWQgd2hlbiB0aGVcbiAqIGNvbW1hbmQgYG5hbWVgIGlzIHNwZWNpZmllZCB2aWEgX19BUkdWX18sXG4gKiBhbmQgdGhlIHJlbWFpbmluZyBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gdGhlXG4gKiBmdW5jdGlvbiBmb3IgYWNjZXNzLlxuICpcbiAqIFdoZW4gdGhlIGBuYW1lYCBpcyBcIipcIiBhbiB1bi1tYXRjaGVkIGNvbW1hbmRcbiAqIHdpbGwgYmUgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmcsIGZvbGxvd2VkIGJ5XG4gKiB0aGUgcmVzdCBvZiBfX0FSR1ZfXyByZW1haW5pbmcuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgICBwcm9ncmFtXG4gKiAgICAgICAgLnZlcnNpb24oJzAuMC4xJylcbiAqICAgICAgICAub3B0aW9uKCctQywgLS1jaGRpciA8cGF0aD4nLCAnY2hhbmdlIHRoZSB3b3JraW5nIGRpcmVjdG9yeScpXG4gKiAgICAgICAgLm9wdGlvbignLWMsIC0tY29uZmlnIDxwYXRoPicsICdzZXQgY29uZmlnIHBhdGguIGRlZmF1bHRzIHRvIC4vZGVwbG95LmNvbmYnKVxuICogICAgICAgIC5vcHRpb24oJy1ULCAtLW5vLXRlc3RzJywgJ2lnbm9yZSB0ZXN0IGhvb2snKVxuICpcbiAqICAgICAgcHJvZ3JhbVxuICogICAgICAgIC5jb21tYW5kKCdzZXR1cCcpXG4gKiAgICAgICAgLmRlc2NyaXB0aW9uKCdydW4gcmVtb3RlIHNldHVwIGNvbW1hbmRzJylcbiAqICAgICAgICAuYWN0aW9uKGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgY29uc29sZS5sb2coJ3NldHVwJyk7XG4gKiAgICAgICAgfSk7XG4gKlxuICogICAgICBwcm9ncmFtXG4gKiAgICAgICAgLmNvbW1hbmQoJ2V4ZWMgPGNtZD4nKVxuICogICAgICAgIC5kZXNjcmlwdGlvbigncnVuIHRoZSBnaXZlbiByZW1vdGUgY29tbWFuZCcpXG4gKiAgICAgICAgLmFjdGlvbihmdW5jdGlvbihjbWQpIHtcbiAqICAgICAgICAgIGNvbnNvbGUubG9nKCdleGVjIFwiJXNcIicsIGNtZCk7XG4gKiAgICAgICAgfSk7XG4gKlxuICogICAgICBwcm9ncmFtXG4gKiAgICAgICAgLmNvbW1hbmQoJ3RlYXJkb3duIDxkaXI+IFtvdGhlckRpcnMuLi5dJylcbiAqICAgICAgICAuZGVzY3JpcHRpb24oJ3J1biB0ZWFyZG93biBjb21tYW5kcycpXG4gKiAgICAgICAgLmFjdGlvbihmdW5jdGlvbihkaXIsIG90aGVyRGlycykge1xuICogICAgICAgICAgY29uc29sZS5sb2coJ2RpciBcIiVzXCInLCBkaXIpO1xuICogICAgICAgICAgaWYgKG90aGVyRGlycykge1xuICogICAgICAgICAgICBvdGhlckRpcnMuZm9yRWFjaChmdW5jdGlvbiAob0Rpcikge1xuICogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkaXIgXCIlc1wiJywgb0Rpcik7XG4gKiAgICAgICAgICAgIH0pO1xuICogICAgICAgICAgfVxuICogICAgICAgIH0pO1xuICpcbiAqICAgICAgcHJvZ3JhbVxuICogICAgICAgIC5jb21tYW5kKCcqJylcbiAqICAgICAgICAuZGVzY3JpcHRpb24oJ2RlcGxveSB0aGUgZ2l2ZW4gZW52JylcbiAqICAgICAgICAuYWN0aW9uKGZ1bmN0aW9uKGVudikge1xuICogICAgICAgICAgY29uc29sZS5sb2coJ2RlcGxveWluZyBcIiVzXCInLCBlbnYpO1xuICogICAgICAgIH0pO1xuICpcbiAqICAgICAgcHJvZ3JhbS5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuICAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IFtkZXNjXSBmb3IgZ2l0LXN0eWxlIHN1Yi1jb21tYW5kc1xuICogQHJldHVybiB7Q29tbWFuZH0gdGhlIG5ldyBjb21tYW5kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkNvbW1hbmQucHJvdG90eXBlLmNvbW1hbmQgPSBmdW5jdGlvbihuYW1lLCBkZXNjLCBvcHRzKSB7XG4gIGlmICh0eXBlb2YgZGVzYyA9PT0gJ29iamVjdCcgJiYgZGVzYyAhPT0gbnVsbCkge1xuICAgIG9wdHMgPSBkZXNjO1xuICAgIGRlc2MgPSBudWxsO1xuICB9XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICB2YXIgYXJncyA9IG5hbWUuc3BsaXQoLyArLyk7XG4gIHZhciBjbWQgPSBuZXcgQ29tbWFuZChhcmdzLnNoaWZ0KCkpO1xuXG4gIGlmIChkZXNjKSB7XG4gICAgY21kLmRlc2NyaXB0aW9uKGRlc2MpO1xuICAgIHRoaXMuZXhlY3V0YWJsZXMgPSB0cnVlO1xuICAgIHRoaXMuX2V4ZWNzW2NtZC5fbmFtZV0gPSB0cnVlO1xuICAgIGlmIChvcHRzLmlzRGVmYXVsdCkgdGhpcy5kZWZhdWx0RXhlY3V0YWJsZSA9IGNtZC5fbmFtZTtcbiAgfVxuICBjbWQuX25vSGVscCA9ICEhb3B0cy5ub0hlbHA7XG4gIHRoaXMuY29tbWFuZHMucHVzaChjbWQpO1xuICBjbWQucGFyc2VFeHBlY3RlZEFyZ3MoYXJncyk7XG4gIGNtZC5wYXJlbnQgPSB0aGlzO1xuXG4gIGlmIChkZXNjKSByZXR1cm4gdGhpcztcbiAgcmV0dXJuIGNtZDtcbn07XG5cbi8qKlxuICogRGVmaW5lIGFyZ3VtZW50IHN5bnRheCBmb3IgdGhlIHRvcC1sZXZlbCBjb21tYW5kLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQ29tbWFuZC5wcm90b3R5cGUuYXJndW1lbnRzID0gZnVuY3Rpb24oZGVzYykge1xuICByZXR1cm4gdGhpcy5wYXJzZUV4cGVjdGVkQXJncyhkZXNjLnNwbGl0KC8gKy8pKTtcbn07XG5cbi8qKlxuICogQWRkIGFuIGltcGxpY2l0IGBoZWxwIFtjbWRdYCBzdWJjb21tYW5kXG4gKiB3aGljaCBpbnZva2VzIGAtLWhlbHBgIGZvciB0aGUgZ2l2ZW4gY29tbWFuZC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Db21tYW5kLnByb3RvdHlwZS5hZGRJbXBsaWNpdEhlbHBDb21tYW5kID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29tbWFuZCgnaGVscCBbY21kXScsICdkaXNwbGF5IGhlbHAgZm9yIFtjbWRdJyk7XG59O1xuXG4vKipcbiAqIFBhcnNlIGV4cGVjdGVkIGBhcmdzYC5cbiAqXG4gKiBGb3IgZXhhbXBsZSBgW1wiW3R5cGVdXCJdYCBiZWNvbWVzIGBbeyByZXF1aXJlZDogZmFsc2UsIG5hbWU6ICd0eXBlJyB9XWAuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJnc1xuICogQHJldHVybiB7Q29tbWFuZH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkNvbW1hbmQucHJvdG90eXBlLnBhcnNlRXhwZWN0ZWRBcmdzID0gZnVuY3Rpb24oYXJncykge1xuICBpZiAoIWFyZ3MubGVuZ3RoKSByZXR1cm47XG4gIHZhciBzZWxmID0gdGhpcztcbiAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uKGFyZykge1xuICAgIHZhciBhcmdEZXRhaWxzID0ge1xuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgbmFtZTogJycsXG4gICAgICB2YXJpYWRpYzogZmFsc2VcbiAgICB9O1xuXG4gICAgc3dpdGNoIChhcmdbMF0pIHtcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICBhcmdEZXRhaWxzLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgYXJnRGV0YWlscy5uYW1lID0gYXJnLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdbJzpcbiAgICAgICAgYXJnRGV0YWlscy5uYW1lID0gYXJnLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGFyZ0RldGFpbHMubmFtZS5sZW5ndGggPiAzICYmIGFyZ0RldGFpbHMubmFtZS5zbGljZSgtMykgPT09ICcuLi4nKSB7XG4gICAgICBhcmdEZXRhaWxzLnZhcmlhZGljID0gdHJ1ZTtcbiAgICAgIGFyZ0RldGFpbHMubmFtZSA9IGFyZ0RldGFpbHMubmFtZS5zbGljZSgwLCAtMyk7XG4gICAgfVxuICAgIGlmIChhcmdEZXRhaWxzLm5hbWUpIHtcbiAgICAgIHNlbGYuX2FyZ3MucHVzaChhcmdEZXRhaWxzKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVnaXN0ZXIgY2FsbGJhY2sgYGZuYCBmb3IgdGhlIGNvbW1hbmQuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgICBwcm9ncmFtXG4gKiAgICAgICAgLmNvbW1hbmQoJ2hlbHAnKVxuICogICAgICAgIC5kZXNjcmlwdGlvbignZGlzcGxheSB2ZXJib3NlIGhlbHAnKVxuICogICAgICAgIC5hY3Rpb24oZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgLy8gb3V0cHV0IGhlbHAgaGVyZVxuICogICAgICAgIH0pO1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtDb21tYW5kfSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQ29tbWFuZC5wcm90b3R5cGUuYWN0aW9uID0gZnVuY3Rpb24oZm4pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihhcmdzLCB1bmtub3duKSB7XG4gICAgLy8gUGFyc2UgYW55IHNvLWZhciB1bmtub3duIG9wdGlvbnNcbiAgICBhcmdzID0gYXJncyB8fCBbXTtcbiAgICB1bmtub3duID0gdW5rbm93biB8fCBbXTtcblxuICAgIHZhciBwYXJzZWQgPSBzZWxmLnBhcnNlT3B0aW9ucyh1bmtub3duKTtcblxuICAgIC8vIE91dHB1dCBoZWxwIGlmIG5lY2Vzc2FyeVxuICAgIG91dHB1dEhlbHBJZk5lY2Vzc2FyeShzZWxmLCBwYXJzZWQudW5rbm93bik7XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgc3RpbGwgYW55IHVua25vd24gb3B0aW9ucywgdGhlbiB3ZSBzaW1wbHlcbiAgICAvLyBkaWUsIHVubGVzcyBzb21lb25lIGFza2VkIGZvciBoZWxwLCBpbiB3aGljaCBjYXNlIHdlIGdpdmUgaXRcbiAgICAvLyB0byB0aGVtLCBhbmQgdGhlbiB3ZSBkaWUuXG4gICAgaWYgKHBhcnNlZC51bmtub3duLmxlbmd0aCA+IDApIHtcbiAgICAgIHNlbGYudW5rbm93bk9wdGlvbihwYXJzZWQudW5rbm93blswXSk7XG4gICAgfVxuXG4gICAgLy8gTGVmdG92ZXIgYXJndW1lbnRzIG5lZWQgdG8gYmUgcHVzaGVkIGJhY2suIEZpeGVzIGlzc3VlICM1NlxuICAgIGlmIChwYXJzZWQuYXJncy5sZW5ndGgpIGFyZ3MgPSBwYXJzZWQuYXJncy5jb25jYXQoYXJncyk7XG5cbiAgICBzZWxmLl9hcmdzLmZvckVhY2goZnVuY3Rpb24oYXJnLCBpKSB7XG4gICAgICBpZiAoYXJnLnJlcXVpcmVkICYmIGFyZ3NbaV0gPT0gbnVsbCkge1xuICAgICAgICBzZWxmLm1pc3NpbmdBcmd1bWVudChhcmcubmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKGFyZy52YXJpYWRpYykge1xuICAgICAgICBpZiAoaSAhPT0gc2VsZi5fYXJncy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgc2VsZi52YXJpYWRpY0FyZ05vdExhc3QoYXJnLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXJnc1tpXSA9IGFyZ3Muc3BsaWNlKGkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQWx3YXlzIGFwcGVuZCBvdXJzZWx2ZXMgdG8gdGhlIGVuZCBvZiB0aGUgYXJndW1lbnRzLFxuICAgIC8vIHRvIG1ha2Ugc3VyZSB3ZSBtYXRjaCB0aGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0aGUgdXNlclxuICAgIC8vIGV4cGVjdHNcbiAgICBpZiAoc2VsZi5fYXJncy5sZW5ndGgpIHtcbiAgICAgIGFyZ3Nbc2VsZi5fYXJncy5sZW5ndGhdID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXJncy5wdXNoKHNlbGYpO1xuICAgIH1cblxuICAgIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9O1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcztcbiAgdmFyIG5hbWUgPSBwYXJlbnQgPT09IHRoaXMgPyAnKicgOiB0aGlzLl9uYW1lO1xuICBwYXJlbnQub24oJ2NvbW1hbmQ6JyArIG5hbWUsIGxpc3RlbmVyKTtcbiAgaWYgKHRoaXMuX2FsaWFzKSBwYXJlbnQub24oJ2NvbW1hbmQ6JyArIHRoaXMuX2FsaWFzLCBsaXN0ZW5lcik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBEZWZpbmUgb3B0aW9uIHdpdGggYGZsYWdzYCwgYGRlc2NyaXB0aW9uYCBhbmQgb3B0aW9uYWxcbiAqIGNvZXJjaW9uIGBmbmAuXG4gKlxuICogVGhlIGBmbGFnc2Agc3RyaW5nIHNob3VsZCBjb250YWluIGJvdGggdGhlIHNob3J0IGFuZCBsb25nIGZsYWdzLFxuICogc2VwYXJhdGVkIGJ5IGNvbW1hLCBhIHBpcGUgb3Igc3BhY2UuIFRoZSBmb2xsb3dpbmcgYXJlIGFsbCB2YWxpZFxuICogYWxsIHdpbGwgb3V0cHV0IHRoaXMgd2F5IHdoZW4gYC0taGVscGAgaXMgdXNlZC5cbiAqXG4gKiAgICBcIi1wLCAtLXBlcHBlclwiXG4gKiAgICBcIi1wfC0tcGVwcGVyXCJcbiAqICAgIFwiLXAgLS1wZXBwZXJcIlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAvLyBzaW1wbGUgYm9vbGVhbiBkZWZhdWx0aW5nIHRvIGZhbHNlXG4gKiAgICAgcHJvZ3JhbS5vcHRpb24oJy1wLCAtLXBlcHBlcicsICdhZGQgcGVwcGVyJyk7XG4gKlxuICogICAgIC0tcGVwcGVyXG4gKiAgICAgcHJvZ3JhbS5wZXBwZXJcbiAqICAgICAvLyA9PiBCb29sZWFuXG4gKlxuICogICAgIC8vIHNpbXBsZSBib29sZWFuIGRlZmF1bHRpbmcgdG8gdHJ1ZVxuICogICAgIHByb2dyYW0ub3B0aW9uKCctQywgLS1uby1jaGVlc2UnLCAncmVtb3ZlIGNoZWVzZScpO1xuICpcbiAqICAgICBwcm9ncmFtLmNoZWVzZVxuICogICAgIC8vID0+IHRydWVcbiAqXG4gKiAgICAgLS1uby1jaGVlc2VcbiAqICAgICBwcm9ncmFtLmNoZWVzZVxuICogICAgIC8vID0+IGZhbHNlXG4gKlxuICogICAgIC8vIHJlcXVpcmVkIGFyZ3VtZW50XG4gKiAgICAgcHJvZ3JhbS5vcHRpb24oJy1DLCAtLWNoZGlyIDxwYXRoPicsICdjaGFuZ2UgdGhlIHdvcmtpbmcgZGlyZWN0b3J5Jyk7XG4gKlxuICogICAgIC0tY2hkaXIgL3RtcFxuICogICAgIHByb2dyYW0uY2hkaXJcbiAqICAgICAvLyA9PiBcIi90bXBcIlxuICpcbiAqICAgICAvLyBvcHRpb25hbCBhcmd1bWVudFxuICogICAgIHByb2dyYW0ub3B0aW9uKCctYywgLS1jaGVlc2UgW3R5cGVdJywgJ2FkZCBjaGVlc2UgW21hcmJsZV0nKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmxhZ3NcbiAqIEBwYXJhbSB7U3RyaW5nfSBkZXNjcmlwdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbnwqfSBbZm5dIG9yIGRlZmF1bHRcbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV1cbiAqIEByZXR1cm4ge0NvbW1hbmR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Db21tYW5kLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbihmbGFncywgZGVzY3JpcHRpb24sIGZuLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgIG9wdGlvbiA9IG5ldyBPcHRpb24oZmxhZ3MsIGRlc2NyaXB0aW9uKSxcbiAgICBvbmFtZSA9IG9wdGlvbi5uYW1lKCksXG4gICAgbmFtZSA9IG9wdGlvbi5hdHRyaWJ1dGVOYW1lKCk7XG5cbiAgLy8gZGVmYXVsdCBhcyAzcmQgYXJnXG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZm4gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHZhciByZWdleCA9IGZuO1xuICAgICAgZm4gPSBmdW5jdGlvbih2YWwsIGRlZikge1xuICAgICAgICB2YXIgbSA9IHJlZ2V4LmV4ZWModmFsKTtcbiAgICAgICAgcmV0dXJuIG0gPyBtWzBdIDogZGVmO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmYXVsdFZhbHVlID0gZm47XG4gICAgICBmbiA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJlYXNzaWduIGRlZmF1bHQgdmFsdWUgb25seSBmb3IgLS1uby0qLCBbb3B0aW9uYWxdLCBvciA8cmVxdWlyZWQ+XG4gIGlmICghb3B0aW9uLmJvb2wgfHwgb3B0aW9uLm9wdGlvbmFsIHx8IG9wdGlvbi5yZXF1aXJlZCkge1xuICAgIC8vIHdoZW4gLS1uby0qIHdlIG1ha2Ugc3VyZSBkZWZhdWx0IGlzIHRydWVcbiAgICBpZiAoIW9wdGlvbi5ib29sKSBkZWZhdWx0VmFsdWUgPSB0cnVlO1xuICAgIC8vIHByZWFzc2lnbiBvbmx5IGlmIHdlIGhhdmUgYSBkZWZhdWx0XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZWxmW25hbWVdID0gZGVmYXVsdFZhbHVlO1xuICAgICAgb3B0aW9uLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyByZWdpc3RlciB0aGUgb3B0aW9uXG4gIHRoaXMub3B0aW9ucy5wdXNoKG9wdGlvbik7XG5cbiAgLy8gd2hlbiBpdCdzIHBhc3NlZCBhc3NpZ24gdGhlIHZhbHVlXG4gIC8vIGFuZCBjb25kaXRpb25hbGx5IGludm9rZSB0aGUgY2FsbGJhY2tcbiAgdGhpcy5vbignb3B0aW9uOicgKyBvbmFtZSwgZnVuY3Rpb24odmFsKSB7XG4gICAgLy8gY29lcmNpb25cbiAgICBpZiAodmFsICE9PSBudWxsICYmIGZuKSB7XG4gICAgICB2YWwgPSBmbih2YWwsIHNlbGZbbmFtZV0gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHNlbGZbbmFtZV0pO1xuICAgIH1cblxuICAgIC8vIHVuYXNzaWduZWQgb3IgYm9vbFxuICAgIGlmICh0eXBlb2Ygc2VsZltuYW1lXSA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiBzZWxmW25hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gaWYgbm8gdmFsdWUsIGJvb2wgdHJ1ZSwgYW5kIHdlIGhhdmUgYSBkZWZhdWx0LCB0aGVuIHVzZSBpdCFcbiAgICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgICBzZWxmW25hbWVdID0gb3B0aW9uLmJvb2xcbiAgICAgICAgICA/IGRlZmF1bHRWYWx1ZSB8fCB0cnVlXG4gICAgICAgICAgOiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGZbbmFtZV0gPSB2YWw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWwgIT09IG51bGwpIHtcbiAgICAgIC8vIHJlYXNzaWduXG4gICAgICBzZWxmW25hbWVdID0gdmFsO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFsbG93IHVua25vd24gb3B0aW9ucyBvbiB0aGUgY29tbWFuZCBsaW5lLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYXJnIGlmIGB0cnVlYCBvciBvbWl0dGVkLCBubyBlcnJvciB3aWxsIGJlIHRocm93blxuICogZm9yIHVua25vd24gb3B0aW9ucy5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkNvbW1hbmQucHJvdG90eXBlLmFsbG93VW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKGFyZykge1xuICB0aGlzLl9hbGxvd1Vua25vd25PcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IGFyZztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFBhcnNlIGBhcmd2YCwgc2V0dGluZ3Mgb3B0aW9ucyBhbmQgaW52b2tpbmcgY29tbWFuZHMgd2hlbiBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3ZcbiAqIEByZXR1cm4ge0NvbW1hbmR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Db21tYW5kLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKGFyZ3YpIHtcbiAgLy8gaW1wbGljaXQgaGVscFxuICBpZiAodGhpcy5leGVjdXRhYmxlcykgdGhpcy5hZGRJbXBsaWNpdEhlbHBDb21tYW5kKCk7XG5cbiAgLy8gc3RvcmUgcmF3IGFyZ3NcbiAgdGhpcy5yYXdBcmdzID0gYXJndjtcblxuICAvLyBndWVzcyBuYW1lXG4gIHRoaXMuX25hbWUgPSB0aGlzLl9uYW1lIHx8IGJhc2VuYW1lKGFyZ3ZbMV0sICcuanMnKTtcblxuICAvLyBnaXRodWItc3R5bGUgc3ViLWNvbW1hbmRzIHdpdGggbm8gc3ViLWNvbW1hbmRcbiAgaWYgKHRoaXMuZXhlY3V0YWJsZXMgJiYgYXJndi5sZW5ndGggPCAzICYmICF0aGlzLmRlZmF1bHRFeGVjdXRhYmxlKSB7XG4gICAgLy8gdGhpcyB1c2VyIG5lZWRzIGhlbHBcbiAgICBhcmd2LnB1c2goJy0taGVscCcpO1xuICB9XG5cbiAgLy8gcHJvY2VzcyBhcmd2XG4gIHZhciBwYXJzZWQgPSB0aGlzLnBhcnNlT3B0aW9ucyh0aGlzLm5vcm1hbGl6ZShhcmd2LnNsaWNlKDIpKSk7XG4gIHZhciBhcmdzID0gdGhpcy5hcmdzID0gcGFyc2VkLmFyZ3M7XG5cbiAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VBcmdzKHRoaXMuYXJncywgcGFyc2VkLnVua25vd24pO1xuXG4gIC8vIGV4ZWN1dGFibGUgc3ViLWNvbW1hbmRzXG4gIHZhciBuYW1lID0gcmVzdWx0LmFyZ3NbMF07XG5cbiAgdmFyIGFsaWFzQ29tbWFuZCA9IG51bGw7XG4gIC8vIGNoZWNrIGFsaWFzIG9mIHN1YiBjb21tYW5kc1xuICBpZiAobmFtZSkge1xuICAgIGFsaWFzQ29tbWFuZCA9IHRoaXMuY29tbWFuZHMuZmlsdGVyKGZ1bmN0aW9uKGNvbW1hbmQpIHtcbiAgICAgIHJldHVybiBjb21tYW5kLmFsaWFzKCkgPT09IG5hbWU7XG4gICAgfSlbMF07XG4gIH1cblxuICBpZiAodGhpcy5fZXhlY3NbbmFtZV0gJiYgdHlwZW9mIHRoaXMuX2V4ZWNzW25hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZVN1YkNvbW1hbmQoYXJndiwgYXJncywgcGFyc2VkLnVua25vd24pO1xuICB9IGVsc2UgaWYgKGFsaWFzQ29tbWFuZCkge1xuICAgIC8vIGlzIGFsaWFzIG9mIGEgc3ViQ29tbWFuZFxuICAgIGFyZ3NbMF0gPSBhbGlhc0NvbW1hbmQuX25hbWU7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZVN1YkNvbW1hbmQoYXJndiwgYXJncywgcGFyc2VkLnVua25vd24pO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdEV4ZWN1dGFibGUpIHtcbiAgICAvLyB1c2UgdGhlIGRlZmF1bHQgc3ViY29tbWFuZFxuICAgIGFyZ3MudW5zaGlmdCh0aGlzLmRlZmF1bHRFeGVjdXRhYmxlKTtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlU3ViQ29tbWFuZChhcmd2LCBhcmdzLCBwYXJzZWQudW5rbm93bik7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBFeGVjdXRlIGEgc3ViLWNvbW1hbmQgZXhlY3V0YWJsZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcmd2XG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzXG4gKiBAcGFyYW0ge0FycmF5fSB1bmtub3duXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Db21tYW5kLnByb3RvdHlwZS5leGVjdXRlU3ViQ29tbWFuZCA9IGZ1bmN0aW9uKGFyZ3YsIGFyZ3MsIHVua25vd24pIHtcbiAgYXJncyA9IGFyZ3MuY29uY2F0KHVua25vd24pO1xuXG4gIGlmICghYXJncy5sZW5ndGgpIHRoaXMuaGVscCgpO1xuICBpZiAoYXJnc1swXSA9PT0gJ2hlbHAnICYmIGFyZ3MubGVuZ3RoID09PSAxKSB0aGlzLmhlbHAoKTtcblxuICAvLyA8Y21kPiAtLWhlbHBcbiAgaWYgKGFyZ3NbMF0gPT09ICdoZWxwJykge1xuICAgIGFyZ3NbMF0gPSBhcmdzWzFdO1xuICAgIGFyZ3NbMV0gPSAnLS1oZWxwJztcbiAgfVxuXG4gIC8vIGV4ZWN1dGFibGVcbiAgdmFyIGYgPSBhcmd2WzFdO1xuICAvLyBuYW1lIG9mIHRoZSBzdWJjb21tYW5kLCBsaW5rIGBwbS1pbnN0YWxsYFxuICB2YXIgYmluID0gYmFzZW5hbWUoZiwgcGF0aC5leHRuYW1lKGYpKSArICctJyArIGFyZ3NbMF07XG5cbiAgLy8gSW4gY2FzZSBvZiBnbG9iYWxseSBpbnN0YWxsZWQsIGdldCB0aGUgYmFzZSBkaXIgd2hlcmUgZXhlY3V0YWJsZVxuICAvLyAgc3ViY29tbWFuZCBmaWxlIHNob3VsZCBiZSBsb2NhdGVkIGF0XG4gIHZhciBiYXNlRGlyLFxuICAgIGxpbmsgPSBmcy5sc3RhdFN5bmMoZikuaXNTeW1ib2xpY0xpbmsoKSA/IGZzLnJlYWRsaW5rU3luYyhmKSA6IGY7XG5cbiAgLy8gd2hlbiBzeW1ib2xpbmsgaXMgcmVsYXRpdmUgcGF0aFxuICBpZiAobGluayAhPT0gZiAmJiBsaW5rLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgbGluayA9IHBhdGguam9pbihkaXJuYW1lKGYpLCBsaW5rKTtcbiAgfVxuICBiYXNlRGlyID0gZGlybmFtZShsaW5rKTtcblxuICAvLyBwcmVmZXIgbG9jYWwgYC4vPGJpbj5gIHRvIGJpbiBpbiB0aGUgJFBBVEhcbiAgdmFyIGxvY2FsQmluID0gcGF0aC5qb2luKGJhc2VEaXIsIGJpbik7XG5cbiAgLy8gd2hldGhlciBiaW4gZmlsZSBpcyBhIGpzIHNjcmlwdCB3aXRoIGV4cGxpY2l0IGAuanNgIG9yIGAudHNgIGV4dGVuc2lvblxuICB2YXIgaXNFeHBsaWNpdEpTID0gZmFsc2U7XG4gIGlmIChleGlzdHMobG9jYWxCaW4gKyAnLmpzJykpIHtcbiAgICBiaW4gPSBsb2NhbEJpbiArICcuanMnO1xuICAgIGlzRXhwbGljaXRKUyA9IHRydWU7XG4gIH0gZWxzZSBpZiAoZXhpc3RzKGxvY2FsQmluICsgJy50cycpKSB7XG4gICAgYmluID0gbG9jYWxCaW4gKyAnLnRzJztcbiAgICBpc0V4cGxpY2l0SlMgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGV4aXN0cyhsb2NhbEJpbikpIHtcbiAgICBiaW4gPSBsb2NhbEJpbjtcbiAgfVxuXG4gIGFyZ3MgPSBhcmdzLnNsaWNlKDEpO1xuXG4gIHZhciBwcm9jO1xuICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSAhPT0gJ3dpbjMyJykge1xuICAgIGlmIChpc0V4cGxpY2l0SlMpIHtcbiAgICAgIGFyZ3MudW5zaGlmdChiaW4pO1xuICAgICAgLy8gYWRkIGV4ZWN1dGFibGUgYXJndW1lbnRzIHRvIHNwYXduXG4gICAgICBhcmdzID0gKHByb2Nlc3MuZXhlY0FyZ3YgfHwgW10pLmNvbmNhdChhcmdzKTtcblxuICAgICAgcHJvYyA9IHNwYXduKHByb2Nlc3MuYXJndlswXSwgYXJncywgeyBzdGRpbzogJ2luaGVyaXQnLCBjdXN0b21GZHM6IFswLCAxLCAyXSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvYyA9IHNwYXduKGJpbiwgYXJncywgeyBzdGRpbzogJ2luaGVyaXQnLCBjdXN0b21GZHM6IFswLCAxLCAyXSB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYXJncy51bnNoaWZ0KGJpbik7XG4gICAgcHJvYyA9IHNwYXduKHByb2Nlc3MuZXhlY1BhdGgsIGFyZ3MsIHsgc3RkaW86ICdpbmhlcml0JyB9KTtcbiAgfVxuXG4gIHZhciBzaWduYWxzID0gWydTSUdVU1IxJywgJ1NJR1VTUjInLCAnU0lHVEVSTScsICdTSUdJTlQnLCAnU0lHSFVQJ107XG4gIHNpZ25hbHMuZm9yRWFjaChmdW5jdGlvbihzaWduYWwpIHtcbiAgICBwcm9jZXNzLm9uKHNpZ25hbCwgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocHJvYy5raWxsZWQgPT09IGZhbHNlICYmIHByb2MuZXhpdENvZGUgPT09IG51bGwpIHtcbiAgICAgICAgcHJvYy5raWxsKHNpZ25hbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBwcm9jLm9uKCdjbG9zZScsIHByb2Nlc3MuZXhpdC5iaW5kKHByb2Nlc3MpKTtcbiAgcHJvYy5vbignZXJyb3InLCBmdW5jdGlvbihlcnIpIHtcbiAgICBpZiAoZXJyLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdlcnJvcjogJXMoMSkgZG9lcyBub3QgZXhpc3QsIHRyeSAtLWhlbHAnLCBiaW4pO1xuICAgIH0gZWxzZSBpZiAoZXJyLmNvZGUgPT09ICdFQUNDRVMnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdlcnJvcjogJXMoMSkgbm90IGV4ZWN1dGFibGUuIHRyeSBjaG1vZCBvciBydW4gd2l0aCByb290JywgYmluKTtcbiAgICB9XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9KTtcblxuICAvLyBTdG9yZSB0aGUgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCBwcm9jZXNzXG4gIHRoaXMucnVubmluZ0NvbW1hbmQgPSBwcm9jO1xufTtcblxuLyoqXG4gKiBOb3JtYWxpemUgYGFyZ3NgLCBzcGxpdHRpbmcgam9pbmVkIHNob3J0IGZsYWdzLiBGb3IgZXhhbXBsZVxuICogdGhlIGFyZyBcIi1hYmNcIiBpcyBlcXVpdmFsZW50IHRvIFwiLWEgLWIgLWNcIi5cbiAqIFRoaXMgYWxzbyBub3JtYWxpemVzIGVxdWFsIHNpZ24gYW5kIHNwbGl0cyBcIi0tYWJjPWRlZlwiIGludG8gXCItLWFiYyBkZWZcIi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkNvbW1hbmQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgdmFyIHJldCA9IFtdLFxuICAgIGFyZyxcbiAgICBsYXN0T3B0LFxuICAgIGluZGV4O1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcmdzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoaSA+IDApIHtcbiAgICAgIGxhc3RPcHQgPSB0aGlzLm9wdGlvbkZvcihhcmdzW2kgLSAxXSk7XG4gICAgfVxuXG4gICAgaWYgKGFyZyA9PT0gJy0tJykge1xuICAgICAgLy8gSG9ub3Igb3B0aW9uIHRlcm1pbmF0b3JcbiAgICAgIHJldCA9IHJldC5jb25jYXQoYXJncy5zbGljZShpKSk7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKGxhc3RPcHQgJiYgbGFzdE9wdC5yZXF1aXJlZCkge1xuICAgICAgcmV0LnB1c2goYXJnKTtcbiAgICB9IGVsc2UgaWYgKGFyZy5sZW5ndGggPiAxICYmIGFyZ1swXSA9PT0gJy0nICYmIGFyZ1sxXSAhPT0gJy0nKSB7XG4gICAgICBhcmcuc2xpY2UoMSkuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24oYykge1xuICAgICAgICByZXQucHVzaCgnLScgKyBjKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoL14tLS8udGVzdChhcmcpICYmIH4oaW5kZXggPSBhcmcuaW5kZXhPZignPScpKSkge1xuICAgICAgcmV0LnB1c2goYXJnLnNsaWNlKDAsIGluZGV4KSwgYXJnLnNsaWNlKGluZGV4ICsgMSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXQucHVzaChhcmcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqIFBhcnNlIGNvbW1hbmQgYGFyZ3NgLlxuICpcbiAqIFdoZW4gbGlzdGVuZXIocykgYXJlIGF2YWlsYWJsZSB0aG9zZVxuICogY2FsbGJhY2tzIGFyZSBpbnZva2VkLCBvdGhlcndpc2UgdGhlIFwiKlwiXG4gKiBldmVudCBpcyBlbWl0dGVkIGFuZCB0aG9zZSBhY3Rpb25zIGFyZSBpbnZva2VkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3NcbiAqIEByZXR1cm4ge0NvbW1hbmR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQ29tbWFuZC5wcm90b3R5cGUucGFyc2VBcmdzID0gZnVuY3Rpb24oYXJncywgdW5rbm93bikge1xuICB2YXIgbmFtZTtcblxuICBpZiAoYXJncy5sZW5ndGgpIHtcbiAgICBuYW1lID0gYXJnc1swXTtcbiAgICBpZiAodGhpcy5saXN0ZW5lcnMoJ2NvbW1hbmQ6JyArIG5hbWUpLmxlbmd0aCkge1xuICAgICAgdGhpcy5lbWl0KCdjb21tYW5kOicgKyBhcmdzLnNoaWZ0KCksIGFyZ3MsIHVua25vd24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoJ2NvbW1hbmQ6KicsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXRwdXRIZWxwSWZOZWNlc3NhcnkodGhpcywgdW5rbm93bik7XG5cbiAgICAvLyBJZiB0aGVyZSB3ZXJlIG5vIGFyZ3MgYW5kIHdlIGhhdmUgdW5rbm93biBvcHRpb25zLFxuICAgIC8vIHRoZW4gdGhleSBhcmUgZXh0cmFuZW91cyBhbmQgd2UgbmVlZCB0byBlcnJvci5cbiAgICBpZiAodW5rbm93bi5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnVua25vd25PcHRpb24odW5rbm93blswXSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbW1hbmRzLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICB0aGlzLl9hcmdzLmZpbHRlcihmdW5jdGlvbihhKSB7IHJldHVybiBhLnJlcXVpcmVkIH0pLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5lbWl0KCdjb21tYW5kOionKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmV0dXJuIGFuIG9wdGlvbiBtYXRjaGluZyBgYXJnYCBpZiBhbnkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFyZ1xuICogQHJldHVybiB7T3B0aW9ufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQ29tbWFuZC5wcm90b3R5cGUub3B0aW9uRm9yID0gZnVuY3Rpb24oYXJnKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLm9wdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zW2ldLmlzKGFyZykpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbaV07XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFBhcnNlIG9wdGlvbnMgZnJvbSBgYXJndmAgcmV0dXJuaW5nIGBhcmd2YFxuICogdm9pZCBvZiB0aGVzZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3ZcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Db21tYW5kLnByb3RvdHlwZS5wYXJzZU9wdGlvbnMgPSBmdW5jdGlvbihhcmd2KSB7XG4gIHZhciBhcmdzID0gW10sXG4gICAgbGVuID0gYXJndi5sZW5ndGgsXG4gICAgbGl0ZXJhbCxcbiAgICBvcHRpb24sXG4gICAgYXJnO1xuXG4gIHZhciB1bmtub3duT3B0aW9ucyA9IFtdO1xuXG4gIC8vIHBhcnNlIG9wdGlvbnNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGFyZyA9IGFyZ3ZbaV07XG5cbiAgICAvLyBsaXRlcmFsIGFyZ3MgYWZ0ZXIgLS1cbiAgICBpZiAobGl0ZXJhbCkge1xuICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoYXJnID09PSAnLS0nKSB7XG4gICAgICBsaXRlcmFsID0gdHJ1ZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGZpbmQgbWF0Y2hpbmcgT3B0aW9uXG4gICAgb3B0aW9uID0gdGhpcy5vcHRpb25Gb3IoYXJnKTtcblxuICAgIC8vIG9wdGlvbiBpcyBkZWZpbmVkXG4gICAgaWYgKG9wdGlvbikge1xuICAgICAgLy8gcmVxdWlyZXMgYXJnXG4gICAgICBpZiAob3B0aW9uLnJlcXVpcmVkKSB7XG4gICAgICAgIGFyZyA9IGFyZ3ZbKytpXTtcbiAgICAgICAgaWYgKGFyZyA9PSBudWxsKSByZXR1cm4gdGhpcy5vcHRpb25NaXNzaW5nQXJndW1lbnQob3B0aW9uKTtcbiAgICAgICAgdGhpcy5lbWl0KCdvcHRpb246JyArIG9wdGlvbi5uYW1lKCksIGFyZyk7XG4gICAgICAvLyBvcHRpb25hbCBhcmdcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9uLm9wdGlvbmFsKSB7XG4gICAgICAgIGFyZyA9IGFyZ3ZbaSArIDFdO1xuICAgICAgICBpZiAoYXJnID09IG51bGwgfHwgKGFyZ1swXSA9PT0gJy0nICYmIGFyZyAhPT0gJy0nKSkge1xuICAgICAgICAgIGFyZyA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKytpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdCgnb3B0aW9uOicgKyBvcHRpb24ubmFtZSgpLCBhcmcpO1xuICAgICAgLy8gYm9vbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbWl0KCdvcHRpb246JyArIG9wdGlvbi5uYW1lKCkpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gbG9va3MgbGlrZSBhbiBvcHRpb25cbiAgICBpZiAoYXJnLmxlbmd0aCA+IDEgJiYgYXJnWzBdID09PSAnLScpIHtcbiAgICAgIHVua25vd25PcHRpb25zLnB1c2goYXJnKTtcblxuICAgICAgLy8gSWYgdGhlIG5leHQgYXJndW1lbnQgbG9va3MgbGlrZSBpdCBtaWdodCBiZVxuICAgICAgLy8gYW4gYXJndW1lbnQgZm9yIHRoaXMgb3B0aW9uLCB3ZSBwYXNzIGl0IG9uLlxuICAgICAgLy8gSWYgaXQgaXNuJ3QsIHRoZW4gaXQnbGwgc2ltcGx5IGJlIGlnbm9yZWRcbiAgICAgIGlmICgoaSArIDEpIDwgYXJndi5sZW5ndGggJiYgYXJndltpICsgMV1bMF0gIT09ICctJykge1xuICAgICAgICB1bmtub3duT3B0aW9ucy5wdXNoKGFyZ3ZbKytpXSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBhcmdcbiAgICBhcmdzLnB1c2goYXJnKTtcbiAgfVxuXG4gIHJldHVybiB7IGFyZ3M6IGFyZ3MsIHVua25vd246IHVua25vd25PcHRpb25zIH07XG59O1xuXG4vKipcbiAqIFJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyBvcHRpb25zIGFzIGtleS12YWx1ZSBwYWlyc1xuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbkNvbW1hbmQucHJvdG90eXBlLm9wdHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3VsdCA9IHt9LFxuICAgIGxlbiA9IHRoaXMub3B0aW9ucy5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBrZXkgPSB0aGlzLm9wdGlvbnNbaV0uYXR0cmlidXRlTmFtZSgpO1xuICAgIHJlc3VsdFtrZXldID0ga2V5ID09PSB0aGlzLl92ZXJzaW9uT3B0aW9uTmFtZSA/IHRoaXMuX3ZlcnNpb24gOiB0aGlzW2tleV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogQXJndW1lbnQgYG5hbWVgIGlzIG1pc3NpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkNvbW1hbmQucHJvdG90eXBlLm1pc3NpbmdBcmd1bWVudCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgY29uc29sZS5lcnJvcihcImVycm9yOiBtaXNzaW5nIHJlcXVpcmVkIGFyZ3VtZW50IGAlcydcIiwgbmFtZSk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn07XG5cbi8qKlxuICogYE9wdGlvbmAgaXMgbWlzc2luZyBhbiBhcmd1bWVudCwgYnV0IHJlY2VpdmVkIGBmbGFnYCBvciBub3RoaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBmbGFnXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Db21tYW5kLnByb3RvdHlwZS5vcHRpb25NaXNzaW5nQXJndW1lbnQgPSBmdW5jdGlvbihvcHRpb24sIGZsYWcpIHtcbiAgaWYgKGZsYWcpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiZXJyb3I6IG9wdGlvbiBgJXMnIGFyZ3VtZW50IG1pc3NpbmcsIGdvdCBgJXMnXCIsIG9wdGlvbi5mbGFncywgZmxhZyk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcihcImVycm9yOiBvcHRpb24gYCVzJyBhcmd1bWVudCBtaXNzaW5nXCIsIG9wdGlvbi5mbGFncyk7XG4gIH1cbiAgcHJvY2Vzcy5leGl0KDEpO1xufTtcblxuLyoqXG4gKiBVbmtub3duIG9wdGlvbiBgZmxhZ2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZsYWdcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkNvbW1hbmQucHJvdG90eXBlLnVua25vd25PcHRpb24gPSBmdW5jdGlvbihmbGFnKSB7XG4gIGlmICh0aGlzLl9hbGxvd1Vua25vd25PcHRpb24pIHJldHVybjtcbiAgY29uc29sZS5lcnJvcihcImVycm9yOiB1bmtub3duIG9wdGlvbiBgJXMnXCIsIGZsYWcpO1xuICBwcm9jZXNzLmV4aXQoMSk7XG59O1xuXG4vKipcbiAqIFZhcmlhZGljIGFyZ3VtZW50IHdpdGggYG5hbWVgIGlzIG5vdCB0aGUgbGFzdCBhcmd1bWVudCBhcyByZXF1aXJlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQ29tbWFuZC5wcm90b3R5cGUudmFyaWFkaWNBcmdOb3RMYXN0ID0gZnVuY3Rpb24obmFtZSkge1xuICBjb25zb2xlLmVycm9yKFwiZXJyb3I6IHZhcmlhZGljIGFyZ3VtZW50cyBtdXN0IGJlIGxhc3QgYCVzJ1wiLCBuYW1lKTtcbiAgcHJvY2Vzcy5leGl0KDEpO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHByb2dyYW0gdmVyc2lvbiB0byBgc3RyYC5cbiAqXG4gKiBUaGlzIG1ldGhvZCBhdXRvLXJlZ2lzdGVycyB0aGUgXCItViwgLS12ZXJzaW9uXCIgZmxhZ1xuICogd2hpY2ggd2lsbCBwcmludCB0aGUgdmVyc2lvbiBudW1iZXIgd2hlbiBwYXNzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IFtmbGFnc11cbiAqIEByZXR1cm4ge0NvbW1hbmR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Db21tYW5kLnByb3RvdHlwZS52ZXJzaW9uID0gZnVuY3Rpb24oc3RyLCBmbGFncykge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRoaXMuX3ZlcnNpb247XG4gIHRoaXMuX3ZlcnNpb24gPSBzdHI7XG4gIGZsYWdzID0gZmxhZ3MgfHwgJy1WLCAtLXZlcnNpb24nO1xuICB2YXIgdmVyc2lvbk9wdGlvbiA9IG5ldyBPcHRpb24oZmxhZ3MsICdvdXRwdXQgdGhlIHZlcnNpb24gbnVtYmVyJyk7XG4gIHRoaXMuX3ZlcnNpb25PcHRpb25OYW1lID0gdmVyc2lvbk9wdGlvbi5sb25nLnN1YnN0cigyKSB8fCAndmVyc2lvbic7XG4gIHRoaXMub3B0aW9ucy5wdXNoKHZlcnNpb25PcHRpb24pO1xuICB0aGlzLm9uKCdvcHRpb246JyArIHRoaXMuX3ZlcnNpb25PcHRpb25OYW1lLCBmdW5jdGlvbigpIHtcbiAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShzdHIgKyAnXFxuJyk7XG4gICAgcHJvY2Vzcy5leGl0KDApO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgZGVzY3JpcHRpb24gdG8gYHN0cmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3NEZXNjcmlwdGlvblxuICogQHJldHVybiB7U3RyaW5nfENvbW1hbmR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkNvbW1hbmQucHJvdG90eXBlLmRlc2NyaXB0aW9uID0gZnVuY3Rpb24oc3RyLCBhcmdzRGVzY3JpcHRpb24pIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB0aGlzLl9kZXNjcmlwdGlvbjtcbiAgdGhpcy5fZGVzY3JpcHRpb24gPSBzdHI7XG4gIHRoaXMuX2FyZ3NEZXNjcmlwdGlvbiA9IGFyZ3NEZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCBhbiBhbGlhcyBmb3IgdGhlIGNvbW1hbmRcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWxpYXNcbiAqIEByZXR1cm4ge1N0cmluZ3xDb21tYW5kfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Db21tYW5kLnByb3RvdHlwZS5hbGlhcyA9IGZ1bmN0aW9uKGFsaWFzKSB7XG4gIHZhciBjb21tYW5kID0gdGhpcztcbiAgaWYgKHRoaXMuY29tbWFuZHMubGVuZ3RoICE9PSAwKSB7XG4gICAgY29tbWFuZCA9IHRoaXMuY29tbWFuZHNbdGhpcy5jb21tYW5kcy5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gY29tbWFuZC5fYWxpYXM7XG5cbiAgaWYgKGFsaWFzID09PSBjb21tYW5kLl9uYW1lKSB0aHJvdyBuZXcgRXJyb3IoJ0NvbW1hbmQgYWxpYXMgY2FuXFwndCBiZSB0aGUgc2FtZSBhcyBpdHMgbmFtZScpO1xuXG4gIGNvbW1hbmQuX2FsaWFzID0gYWxpYXM7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgLyBnZXQgdGhlIGNvbW1hbmQgdXNhZ2UgYHN0cmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfENvbW1hbmR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkNvbW1hbmQucHJvdG90eXBlLnVzYWdlID0gZnVuY3Rpb24oc3RyKSB7XG4gIHZhciBhcmdzID0gdGhpcy5fYXJncy5tYXAoZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGh1bWFuUmVhZGFibGVBcmdOYW1lKGFyZyk7XG4gIH0pO1xuXG4gIHZhciB1c2FnZSA9ICdbb3B0aW9uc10nICtcbiAgICAodGhpcy5jb21tYW5kcy5sZW5ndGggPyAnIFtjb21tYW5kXScgOiAnJykgK1xuICAgICh0aGlzLl9hcmdzLmxlbmd0aCA/ICcgJyArIGFyZ3Muam9pbignICcpIDogJycpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdGhpcy5fdXNhZ2UgfHwgdXNhZ2U7XG4gIHRoaXMuX3VzYWdlID0gc3RyO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBHZXQgb3Igc2V0IHRoZSBuYW1lIG9mIHRoZSBjb21tYW5kXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfENvbW1hbmR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkNvbW1hbmQucHJvdG90eXBlLm5hbWUgPSBmdW5jdGlvbihzdHIpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB0aGlzLl9uYW1lO1xuICB0aGlzLl9uYW1lID0gc3RyO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmV0dXJuIHByZXBhcmVkIGNvbW1hbmRzLlxuICpcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQ29tbWFuZC5wcm90b3R5cGUucHJlcGFyZUNvbW1hbmRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNvbW1hbmRzLmZpbHRlcihmdW5jdGlvbihjbWQpIHtcbiAgICByZXR1cm4gIWNtZC5fbm9IZWxwO1xuICB9KS5tYXAoZnVuY3Rpb24oY21kKSB7XG4gICAgdmFyIGFyZ3MgPSBjbWQuX2FyZ3MubWFwKGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIGh1bWFuUmVhZGFibGVBcmdOYW1lKGFyZyk7XG4gICAgfSkuam9pbignICcpO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIGNtZC5fbmFtZSArXG4gICAgICAgIChjbWQuX2FsaWFzID8gJ3wnICsgY21kLl9hbGlhcyA6ICcnKSArXG4gICAgICAgIChjbWQub3B0aW9ucy5sZW5ndGggPyAnIFtvcHRpb25zXScgOiAnJykgK1xuICAgICAgICAoYXJncyA/ICcgJyArIGFyZ3MgOiAnJyksXG4gICAgICBjbWQuX2Rlc2NyaXB0aW9uXG4gICAgXTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGFyZ2VzdCBjb21tYW5kIGxlbmd0aC5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Db21tYW5kLnByb3RvdHlwZS5sYXJnZXN0Q29tbWFuZExlbmd0aCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29tbWFuZHMgPSB0aGlzLnByZXBhcmVDb21tYW5kcygpO1xuICByZXR1cm4gY29tbWFuZHMucmVkdWNlKGZ1bmN0aW9uKG1heCwgY29tbWFuZCkge1xuICAgIHJldHVybiBNYXRoLm1heChtYXgsIGNvbW1hbmRbMF0ubGVuZ3RoKTtcbiAgfSwgMCk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGFyZ2VzdCBvcHRpb24gbGVuZ3RoLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkNvbW1hbmQucHJvdG90eXBlLmxhcmdlc3RPcHRpb25MZW5ndGggPSBmdW5jdGlvbigpIHtcbiAgdmFyIG9wdGlvbnMgPSBbXS5zbGljZS5jYWxsKHRoaXMub3B0aW9ucyk7XG4gIG9wdGlvbnMucHVzaCh7XG4gICAgZmxhZ3M6ICctaCwgLS1oZWxwJ1xuICB9KTtcbiAgcmV0dXJuIG9wdGlvbnMucmVkdWNlKGZ1bmN0aW9uKG1heCwgb3B0aW9uKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KG1heCwgb3B0aW9uLmZsYWdzLmxlbmd0aCk7XG4gIH0sIDApO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxhcmdlc3QgYXJnIGxlbmd0aC5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Db21tYW5kLnByb3RvdHlwZS5sYXJnZXN0QXJnTGVuZ3RoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9hcmdzLnJlZHVjZShmdW5jdGlvbihtYXgsIGFyZykge1xuICAgIHJldHVybiBNYXRoLm1heChtYXgsIGFyZy5uYW1lLmxlbmd0aCk7XG4gIH0sIDApO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHBhZCB3aWR0aC5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Db21tYW5kLnByb3RvdHlwZS5wYWRXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd2lkdGggPSB0aGlzLmxhcmdlc3RPcHRpb25MZW5ndGgoKTtcbiAgaWYgKHRoaXMuX2FyZ3NEZXNjcmlwdGlvbiAmJiB0aGlzLl9hcmdzLmxlbmd0aCkge1xuICAgIGlmICh0aGlzLmxhcmdlc3RBcmdMZW5ndGgoKSA+IHdpZHRoKSB7XG4gICAgICB3aWR0aCA9IHRoaXMubGFyZ2VzdEFyZ0xlbmd0aCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLmNvbW1hbmRzICYmIHRoaXMuY29tbWFuZHMubGVuZ3RoKSB7XG4gICAgaWYgKHRoaXMubGFyZ2VzdENvbW1hbmRMZW5ndGgoKSA+IHdpZHRoKSB7XG4gICAgICB3aWR0aCA9IHRoaXMubGFyZ2VzdENvbW1hbmRMZW5ndGgoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gd2lkdGg7XG59O1xuXG4vKipcbiAqIFJldHVybiBoZWxwIGZvciBvcHRpb25zLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkNvbW1hbmQucHJvdG90eXBlLm9wdGlvbkhlbHAgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdpZHRoID0gdGhpcy5wYWRXaWR0aCgpO1xuXG4gIC8vIEFwcGVuZCB0aGUgaGVscCBpbmZvcm1hdGlvblxuICByZXR1cm4gdGhpcy5vcHRpb25zLm1hcChmdW5jdGlvbihvcHRpb24pIHtcbiAgICByZXR1cm4gcGFkKG9wdGlvbi5mbGFncywgd2lkdGgpICsgJyAgJyArIG9wdGlvbi5kZXNjcmlwdGlvbiArXG4gICAgICAoKG9wdGlvbi5ib29sICYmIG9wdGlvbi5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkgPyAnIChkZWZhdWx0OiAnICsgSlNPTi5zdHJpbmdpZnkob3B0aW9uLmRlZmF1bHRWYWx1ZSkgKyAnKScgOiAnJyk7XG4gIH0pLmNvbmNhdChbcGFkKCctaCwgLS1oZWxwJywgd2lkdGgpICsgJyAgJyArICdvdXRwdXQgdXNhZ2UgaW5mb3JtYXRpb24nXSlcbiAgICAuam9pbignXFxuJyk7XG59O1xuXG4vKipcbiAqIFJldHVybiBjb21tYW5kIGhlbHAgZG9jdW1lbnRhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Db21tYW5kLnByb3RvdHlwZS5jb21tYW5kSGVscCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuY29tbWFuZHMubGVuZ3RoKSByZXR1cm4gJyc7XG5cbiAgdmFyIGNvbW1hbmRzID0gdGhpcy5wcmVwYXJlQ29tbWFuZHMoKTtcbiAgdmFyIHdpZHRoID0gdGhpcy5wYWRXaWR0aCgpO1xuXG4gIHJldHVybiBbXG4gICAgJ0NvbW1hbmRzOicsXG4gICAgY29tbWFuZHMubWFwKGZ1bmN0aW9uKGNtZCkge1xuICAgICAgdmFyIGRlc2MgPSBjbWRbMV0gPyAnICAnICsgY21kWzFdIDogJyc7XG4gICAgICByZXR1cm4gKGRlc2MgPyBwYWQoY21kWzBdLCB3aWR0aCkgOiBjbWRbMF0pICsgZGVzYztcbiAgICB9KS5qb2luKCdcXG4nKS5yZXBsYWNlKC9eL2dtLCAnICAnKSxcbiAgICAnJ1xuICBdLmpvaW4oJ1xcbicpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gcHJvZ3JhbSBoZWxwIGRvY3VtZW50YXRpb24uXG4gKlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQ29tbWFuZC5wcm90b3R5cGUuaGVscEluZm9ybWF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciBkZXNjID0gW107XG4gIGlmICh0aGlzLl9kZXNjcmlwdGlvbikge1xuICAgIGRlc2MgPSBbXG4gICAgICB0aGlzLl9kZXNjcmlwdGlvbixcbiAgICAgICcnXG4gICAgXTtcblxuICAgIHZhciBhcmdzRGVzY3JpcHRpb24gPSB0aGlzLl9hcmdzRGVzY3JpcHRpb247XG4gICAgaWYgKGFyZ3NEZXNjcmlwdGlvbiAmJiB0aGlzLl9hcmdzLmxlbmd0aCkge1xuICAgICAgdmFyIHdpZHRoID0gdGhpcy5wYWRXaWR0aCgpO1xuICAgICAgZGVzYy5wdXNoKCdBcmd1bWVudHM6Jyk7XG4gICAgICBkZXNjLnB1c2goJycpO1xuICAgICAgdGhpcy5fYXJncy5mb3JFYWNoKGZ1bmN0aW9uKGFyZykge1xuICAgICAgICBkZXNjLnB1c2goJyAgJyArIHBhZChhcmcubmFtZSwgd2lkdGgpICsgJyAgJyArIGFyZ3NEZXNjcmlwdGlvblthcmcubmFtZV0pO1xuICAgICAgfSk7XG4gICAgICBkZXNjLnB1c2goJycpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjbWROYW1lID0gdGhpcy5fbmFtZTtcbiAgaWYgKHRoaXMuX2FsaWFzKSB7XG4gICAgY21kTmFtZSA9IGNtZE5hbWUgKyAnfCcgKyB0aGlzLl9hbGlhcztcbiAgfVxuICB2YXIgdXNhZ2UgPSBbXG4gICAgJ1VzYWdlOiAnICsgY21kTmFtZSArICcgJyArIHRoaXMudXNhZ2UoKSxcbiAgICAnJ1xuICBdO1xuXG4gIHZhciBjbWRzID0gW107XG4gIHZhciBjb21tYW5kSGVscCA9IHRoaXMuY29tbWFuZEhlbHAoKTtcbiAgaWYgKGNvbW1hbmRIZWxwKSBjbWRzID0gW2NvbW1hbmRIZWxwXTtcblxuICB2YXIgb3B0aW9ucyA9IFtcbiAgICAnT3B0aW9uczonLFxuICAgICcnICsgdGhpcy5vcHRpb25IZWxwKCkucmVwbGFjZSgvXi9nbSwgJyAgJyksXG4gICAgJydcbiAgXTtcblxuICByZXR1cm4gdXNhZ2VcbiAgICAuY29uY2F0KGRlc2MpXG4gICAgLmNvbmNhdChvcHRpb25zKVxuICAgIC5jb25jYXQoY21kcylcbiAgICAuam9pbignXFxuJyk7XG59O1xuXG4vKipcbiAqIE91dHB1dCBoZWxwIGluZm9ybWF0aW9uIGZvciB0aGlzIGNvbW1hbmRcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkNvbW1hbmQucHJvdG90eXBlLm91dHB1dEhlbHAgPSBmdW5jdGlvbihjYikge1xuICBpZiAoIWNiKSB7XG4gICAgY2IgPSBmdW5jdGlvbihwYXNzdGhydSkge1xuICAgICAgcmV0dXJuIHBhc3N0aHJ1O1xuICAgIH07XG4gIH1cbiAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoY2IodGhpcy5oZWxwSW5mb3JtYXRpb24oKSkpO1xuICB0aGlzLmVtaXQoJy0taGVscCcpO1xufTtcblxuLyoqXG4gKiBPdXRwdXQgaGVscCBpbmZvcm1hdGlvbiBhbmQgZXhpdC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkNvbW1hbmQucHJvdG90eXBlLmhlbHAgPSBmdW5jdGlvbihjYikge1xuICB0aGlzLm91dHB1dEhlbHAoY2IpO1xuICBwcm9jZXNzLmV4aXQoKTtcbn07XG5cbi8qKlxuICogQ2FtZWwtY2FzZSB0aGUgZ2l2ZW4gYGZsYWdgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZsYWdcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNhbWVsY2FzZShmbGFnKSB7XG4gIHJldHVybiBmbGFnLnNwbGl0KCctJykucmVkdWNlKGZ1bmN0aW9uKHN0ciwgd29yZCkge1xuICAgIHJldHVybiBzdHIgKyB3b3JkWzBdLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnNsaWNlKDEpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBQYWQgYHN0cmAgdG8gYHdpZHRoYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge051bWJlcn0gd2lkdGhcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhZChzdHIsIHdpZHRoKSB7XG4gIHZhciBsZW4gPSBNYXRoLm1heCgwLCB3aWR0aCAtIHN0ci5sZW5ndGgpO1xuICByZXR1cm4gc3RyICsgQXJyYXkobGVuICsgMSkuam9pbignICcpO1xufVxuXG4vKipcbiAqIE91dHB1dCBoZWxwIGluZm9ybWF0aW9uIGlmIG5lY2Vzc2FyeVxuICpcbiAqIEBwYXJhbSB7Q29tbWFuZH0gY29tbWFuZCB0byBvdXRwdXQgaGVscCBmb3JcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IG9mIG9wdGlvbnMgdG8gc2VhcmNoIGZvciAtaCBvciAtLWhlbHBcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG91dHB1dEhlbHBJZk5lY2Vzc2FyeShjbWQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChvcHRpb25zW2ldID09PSAnLS1oZWxwJyB8fCBvcHRpb25zW2ldID09PSAnLWgnKSB7XG4gICAgICBjbWQub3V0cHV0SGVscCgpO1xuICAgICAgcHJvY2Vzcy5leGl0KDApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFRha2VzIGFuIGFyZ3VtZW50IGFuIHJldHVybnMgaXRzIGh1bWFuIHJlYWRhYmxlIGVxdWl2YWxlbnQgZm9yIGhlbHAgdXNhZ2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFyZ1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaHVtYW5SZWFkYWJsZUFyZ05hbWUoYXJnKSB7XG4gIHZhciBuYW1lT3V0cHV0ID0gYXJnLm5hbWUgKyAoYXJnLnZhcmlhZGljID09PSB0cnVlID8gJy4uLicgOiAnJyk7XG5cbiAgcmV0dXJuIGFyZy5yZXF1aXJlZFxuICAgID8gJzwnICsgbmFtZU91dHB1dCArICc+J1xuICAgIDogJ1snICsgbmFtZU91dHB1dCArICddJztcbn1cblxuLy8gZm9yIHZlcnNpb25zIGJlZm9yZSBub2RlIHYwLjggd2hlbiB0aGVyZSB3ZXJlbid0IGBmcy5leGlzdHNTeW5jYFxuZnVuY3Rpb24gZXhpc3RzKGZpbGUpIHtcbiAgdHJ5IHtcbiAgICBpZiAoZnMuc3RhdFN5bmMoZmlsZSkuaXNGaWxlKCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGF0aFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IG1pbmltYXRjaFxubWluaW1hdGNoLk1pbmltYXRjaCA9IE1pbmltYXRjaFxuXG52YXIgcGF0aCA9IHsgc2VwOiAnLycgfVxudHJ5IHtcbiAgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxufSBjYXRjaCAoZXIpIHt9XG5cbnZhciBHTE9CU1RBUiA9IG1pbmltYXRjaC5HTE9CU1RBUiA9IE1pbmltYXRjaC5HTE9CU1RBUiA9IHt9XG52YXIgZXhwYW5kID0gcmVxdWlyZSgnYnJhY2UtZXhwYW5zaW9uJylcblxudmFyIHBsVHlwZXMgPSB7XG4gICchJzogeyBvcGVuOiAnKD86KD8hKD86JywgY2xvc2U6ICcpKVteL10qPyknfSxcbiAgJz8nOiB7IG9wZW46ICcoPzonLCBjbG9zZTogJyk/JyB9LFxuICAnKyc6IHsgb3BlbjogJyg/OicsIGNsb3NlOiAnKSsnIH0sXG4gICcqJzogeyBvcGVuOiAnKD86JywgY2xvc2U6ICcpKicgfSxcbiAgJ0AnOiB7IG9wZW46ICcoPzonLCBjbG9zZTogJyknIH1cbn1cblxuLy8gYW55IHNpbmdsZSB0aGluZyBvdGhlciB0aGFuIC9cbi8vIGRvbid0IG5lZWQgdG8gZXNjYXBlIC8gd2hlbiB1c2luZyBuZXcgUmVnRXhwKClcbnZhciBxbWFyayA9ICdbXi9dJ1xuXG4vLyAqID0+IGFueSBudW1iZXIgb2YgY2hhcmFjdGVyc1xudmFyIHN0YXIgPSBxbWFyayArICcqPydcblxuLy8gKiogd2hlbiBkb3RzIGFyZSBhbGxvd2VkLiAgQW55dGhpbmcgZ29lcywgZXhjZXB0IC4uIGFuZCAuXG4vLyBub3QgKF4gb3IgLyBmb2xsb3dlZCBieSBvbmUgb3IgdHdvIGRvdHMgZm9sbG93ZWQgYnkgJCBvciAvKSxcbi8vIGZvbGxvd2VkIGJ5IGFueXRoaW5nLCBhbnkgbnVtYmVyIG9mIHRpbWVzLlxudmFyIHR3b1N0YXJEb3QgPSAnKD86KD8hKD86XFxcXFxcL3xeKSg/OlxcXFwuezEsMn0pKCR8XFxcXFxcLykpLikqPydcblxuLy8gbm90IGEgXiBvciAvIGZvbGxvd2VkIGJ5IGEgZG90LFxuLy8gZm9sbG93ZWQgYnkgYW55dGhpbmcsIGFueSBudW1iZXIgb2YgdGltZXMuXG52YXIgdHdvU3Rhck5vRG90ID0gJyg/Oig/ISg/OlxcXFxcXC98XilcXFxcLikuKSo/J1xuXG4vLyBjaGFyYWN0ZXJzIHRoYXQgbmVlZCB0byBiZSBlc2NhcGVkIGluIFJlZ0V4cC5cbnZhciByZVNwZWNpYWxzID0gY2hhclNldCgnKCkuKnt9Kz9bXV4kXFxcXCEnKVxuXG4vLyBcImFiY1wiIC0+IHsgYTp0cnVlLCBiOnRydWUsIGM6dHJ1ZSB9XG5mdW5jdGlvbiBjaGFyU2V0IChzKSB7XG4gIHJldHVybiBzLnNwbGl0KCcnKS5yZWR1Y2UoZnVuY3Rpb24gKHNldCwgYykge1xuICAgIHNldFtjXSA9IHRydWVcbiAgICByZXR1cm4gc2V0XG4gIH0sIHt9KVxufVxuXG4vLyBub3JtYWxpemVzIHNsYXNoZXMuXG52YXIgc2xhc2hTcGxpdCA9IC9cXC8rL1xuXG5taW5pbWF0Y2guZmlsdGVyID0gZmlsdGVyXG5mdW5jdGlvbiBmaWx0ZXIgKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgcmV0dXJuIGZ1bmN0aW9uIChwLCBpLCBsaXN0KSB7XG4gICAgcmV0dXJuIG1pbmltYXRjaChwLCBwYXR0ZXJuLCBvcHRpb25zKVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dCAoYSwgYikge1xuICBhID0gYSB8fCB7fVxuICBiID0gYiB8fCB7fVxuICB2YXIgdCA9IHt9XG4gIE9iamVjdC5rZXlzKGIpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICB0W2tdID0gYltrXVxuICB9KVxuICBPYmplY3Qua2V5cyhhKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgdFtrXSA9IGFba11cbiAgfSlcbiAgcmV0dXJuIHRcbn1cblxubWluaW1hdGNoLmRlZmF1bHRzID0gZnVuY3Rpb24gKGRlZikge1xuICBpZiAoIWRlZiB8fCAhT2JqZWN0LmtleXMoZGVmKS5sZW5ndGgpIHJldHVybiBtaW5pbWF0Y2hcblxuICB2YXIgb3JpZyA9IG1pbmltYXRjaFxuXG4gIHZhciBtID0gZnVuY3Rpb24gbWluaW1hdGNoIChwLCBwYXR0ZXJuLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9yaWcubWluaW1hdGNoKHAsIHBhdHRlcm4sIGV4dChkZWYsIG9wdGlvbnMpKVxuICB9XG5cbiAgbS5NaW5pbWF0Y2ggPSBmdW5jdGlvbiBNaW5pbWF0Y2ggKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IG9yaWcuTWluaW1hdGNoKHBhdHRlcm4sIGV4dChkZWYsIG9wdGlvbnMpKVxuICB9XG5cbiAgcmV0dXJuIG1cbn1cblxuTWluaW1hdGNoLmRlZmF1bHRzID0gZnVuY3Rpb24gKGRlZikge1xuICBpZiAoIWRlZiB8fCAhT2JqZWN0LmtleXMoZGVmKS5sZW5ndGgpIHJldHVybiBNaW5pbWF0Y2hcbiAgcmV0dXJuIG1pbmltYXRjaC5kZWZhdWx0cyhkZWYpLk1pbmltYXRjaFxufVxuXG5mdW5jdGlvbiBtaW5pbWF0Y2ggKHAsIHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2dsb2IgcGF0dGVybiBzdHJpbmcgcmVxdWlyZWQnKVxuICB9XG5cbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge31cblxuICAvLyBzaG9ydGN1dDogY29tbWVudHMgbWF0Y2ggbm90aGluZy5cbiAgaWYgKCFvcHRpb25zLm5vY29tbWVudCAmJiBwYXR0ZXJuLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBcIlwiIG9ubHkgbWF0Y2hlcyBcIlwiXG4gIGlmIChwYXR0ZXJuLnRyaW0oKSA9PT0gJycpIHJldHVybiBwID09PSAnJ1xuXG4gIHJldHVybiBuZXcgTWluaW1hdGNoKHBhdHRlcm4sIG9wdGlvbnMpLm1hdGNoKHApXG59XG5cbmZ1bmN0aW9uIE1pbmltYXRjaCAocGF0dGVybiwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTWluaW1hdGNoKSkge1xuICAgIHJldHVybiBuZXcgTWluaW1hdGNoKHBhdHRlcm4sIG9wdGlvbnMpXG4gIH1cblxuICBpZiAodHlwZW9mIHBhdHRlcm4gIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZ2xvYiBwYXR0ZXJuIHN0cmluZyByZXF1aXJlZCcpXG4gIH1cblxuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fVxuICBwYXR0ZXJuID0gcGF0dGVybi50cmltKClcblxuICAvLyB3aW5kb3dzIHN1cHBvcnQ6IG5lZWQgdG8gdXNlIC8sIG5vdCBcXFxuICBpZiAocGF0aC5zZXAgIT09ICcvJykge1xuICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNwbGl0KHBhdGguc2VwKS5qb2luKCcvJylcbiAgfVxuXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgdGhpcy5zZXQgPSBbXVxuICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuXG4gIHRoaXMucmVnZXhwID0gbnVsbFxuICB0aGlzLm5lZ2F0ZSA9IGZhbHNlXG4gIHRoaXMuY29tbWVudCA9IGZhbHNlXG4gIHRoaXMuZW1wdHkgPSBmYWxzZVxuXG4gIC8vIG1ha2UgdGhlIHNldCBvZiByZWdleHBzIGV0Yy5cbiAgdGhpcy5tYWtlKClcbn1cblxuTWluaW1hdGNoLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9XG5cbk1pbmltYXRjaC5wcm90b3R5cGUubWFrZSA9IG1ha2VcbmZ1bmN0aW9uIG1ha2UgKCkge1xuICAvLyBkb24ndCBkbyBpdCBtb3JlIHRoYW4gb25jZS5cbiAgaWYgKHRoaXMuX21hZGUpIHJldHVyblxuXG4gIHZhciBwYXR0ZXJuID0gdGhpcy5wYXR0ZXJuXG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zXG5cbiAgLy8gZW1wdHkgcGF0dGVybnMgYW5kIGNvbW1lbnRzIG1hdGNoIG5vdGhpbmcuXG4gIGlmICghb3B0aW9ucy5ub2NvbW1lbnQgJiYgcGF0dGVybi5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHRoaXMuY29tbWVudCA9IHRydWVcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIXBhdHRlcm4pIHtcbiAgICB0aGlzLmVtcHR5ID0gdHJ1ZVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gc3RlcCAxOiBmaWd1cmUgb3V0IG5lZ2F0aW9uLCBldGMuXG4gIHRoaXMucGFyc2VOZWdhdGUoKVxuXG4gIC8vIHN0ZXAgMjogZXhwYW5kIGJyYWNlc1xuICB2YXIgc2V0ID0gdGhpcy5nbG9iU2V0ID0gdGhpcy5icmFjZUV4cGFuZCgpXG5cbiAgaWYgKG9wdGlvbnMuZGVidWcpIHRoaXMuZGVidWcgPSBjb25zb2xlLmVycm9yXG5cbiAgdGhpcy5kZWJ1Zyh0aGlzLnBhdHRlcm4sIHNldClcblxuICAvLyBzdGVwIDM6IG5vdyB3ZSBoYXZlIGEgc2V0LCBzbyB0dXJuIGVhY2ggb25lIGludG8gYSBzZXJpZXMgb2YgcGF0aC1wb3J0aW9uXG4gIC8vIG1hdGNoaW5nIHBhdHRlcm5zLlxuICAvLyBUaGVzZSB3aWxsIGJlIHJlZ2V4cHMsIGV4Y2VwdCBpbiB0aGUgY2FzZSBvZiBcIioqXCIsIHdoaWNoIGlzXG4gIC8vIHNldCB0byB0aGUgR0xPQlNUQVIgb2JqZWN0IGZvciBnbG9ic3RhciBiZWhhdmlvcixcbiAgLy8gYW5kIHdpbGwgbm90IGNvbnRhaW4gYW55IC8gY2hhcmFjdGVyc1xuICBzZXQgPSB0aGlzLmdsb2JQYXJ0cyA9IHNldC5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcy5zcGxpdChzbGFzaFNwbGl0KVxuICB9KVxuXG4gIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpXG5cbiAgLy8gZ2xvYiAtLT4gcmVnZXhwc1xuICBzZXQgPSBzZXQubWFwKGZ1bmN0aW9uIChzLCBzaSwgc2V0KSB7XG4gICAgcmV0dXJuIHMubWFwKHRoaXMucGFyc2UsIHRoaXMpXG4gIH0sIHRoaXMpXG5cbiAgdGhpcy5kZWJ1Zyh0aGlzLnBhdHRlcm4sIHNldClcblxuICAvLyBmaWx0ZXIgb3V0IGV2ZXJ5dGhpbmcgdGhhdCBkaWRuJ3QgY29tcGlsZSBwcm9wZXJseS5cbiAgc2V0ID0gc2V0LmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzLmluZGV4T2YoZmFsc2UpID09PSAtMVxuICB9KVxuXG4gIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpXG5cbiAgdGhpcy5zZXQgPSBzZXRcbn1cblxuTWluaW1hdGNoLnByb3RvdHlwZS5wYXJzZU5lZ2F0ZSA9IHBhcnNlTmVnYXRlXG5mdW5jdGlvbiBwYXJzZU5lZ2F0ZSAoKSB7XG4gIHZhciBwYXR0ZXJuID0gdGhpcy5wYXR0ZXJuXG4gIHZhciBuZWdhdGUgPSBmYWxzZVxuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuICB2YXIgbmVnYXRlT2Zmc2V0ID0gMFxuXG4gIGlmIChvcHRpb25zLm5vbmVnYXRlKSByZXR1cm5cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhdHRlcm4ubGVuZ3RoXG4gICAgOyBpIDwgbCAmJiBwYXR0ZXJuLmNoYXJBdChpKSA9PT0gJyEnXG4gICAgOyBpKyspIHtcbiAgICBuZWdhdGUgPSAhbmVnYXRlXG4gICAgbmVnYXRlT2Zmc2V0KytcbiAgfVxuXG4gIGlmIChuZWdhdGVPZmZzZXQpIHRoaXMucGF0dGVybiA9IHBhdHRlcm4uc3Vic3RyKG5lZ2F0ZU9mZnNldClcbiAgdGhpcy5uZWdhdGUgPSBuZWdhdGVcbn1cblxuLy8gQnJhY2UgZXhwYW5zaW9uOlxuLy8gYXtiLGN9ZCAtPiBhYmQgYWNkXG4vLyBhe2IsfWMgLT4gYWJjIGFjXG4vLyBhezAuLjN9ZCAtPiBhMGQgYTFkIGEyZCBhM2Rcbi8vIGF7Yixje2QsZX1mfWcgLT4gYWJnIGFjZGZnIGFjZWZnXG4vLyBhe2IsY31ke2UsZn1nIC0+IGFiZGVnIGFjZGVnIGFiZGVnIGFiZGZnXG4vL1xuLy8gSW52YWxpZCBzZXRzIGFyZSBub3QgZXhwYW5kZWQuXG4vLyBhezIuLn1iIC0+IGF7Mi4ufWJcbi8vIGF7Yn1jIC0+IGF7Yn1jXG5taW5pbWF0Y2guYnJhY2VFeHBhbmQgPSBmdW5jdGlvbiAocGF0dGVybiwgb3B0aW9ucykge1xuICByZXR1cm4gYnJhY2VFeHBhbmQocGF0dGVybiwgb3B0aW9ucylcbn1cblxuTWluaW1hdGNoLnByb3RvdHlwZS5icmFjZUV4cGFuZCA9IGJyYWNlRXhwYW5kXG5cbmZ1bmN0aW9uIGJyYWNlRXhwYW5kIChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgTWluaW1hdGNoKSB7XG4gICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zXG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMgPSB7fVxuICAgIH1cbiAgfVxuXG4gIHBhdHRlcm4gPSB0eXBlb2YgcGF0dGVybiA9PT0gJ3VuZGVmaW5lZCdcbiAgICA/IHRoaXMucGF0dGVybiA6IHBhdHRlcm5cblxuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndW5kZWZpbmVkIHBhdHRlcm4nKVxuICB9XG5cbiAgaWYgKG9wdGlvbnMubm9icmFjZSB8fFxuICAgICFwYXR0ZXJuLm1hdGNoKC9cXHsuKlxcfS8pKSB7XG4gICAgLy8gc2hvcnRjdXQuIG5vIG5lZWQgdG8gZXhwYW5kLlxuICAgIHJldHVybiBbcGF0dGVybl1cbiAgfVxuXG4gIHJldHVybiBleHBhbmQocGF0dGVybilcbn1cblxuLy8gcGFyc2UgYSBjb21wb25lbnQgb2YgdGhlIGV4cGFuZGVkIHNldC5cbi8vIEF0IHRoaXMgcG9pbnQsIG5vIHBhdHRlcm4gbWF5IGNvbnRhaW4gXCIvXCIgaW4gaXRcbi8vIHNvIHdlJ3JlIGdvaW5nIHRvIHJldHVybiBhIDJkIGFycmF5LCB3aGVyZSBlYWNoIGVudHJ5IGlzIHRoZSBmdWxsXG4vLyBwYXR0ZXJuLCBzcGxpdCBvbiAnLycsIGFuZCB0aGVuIHR1cm5lZCBpbnRvIGEgcmVndWxhciBleHByZXNzaW9uLlxuLy8gQSByZWdleHAgaXMgbWFkZSBhdCB0aGUgZW5kIHdoaWNoIGpvaW5zIGVhY2ggYXJyYXkgd2l0aCBhblxuLy8gZXNjYXBlZCAvLCBhbmQgYW5vdGhlciBmdWxsIG9uZSB3aGljaCBqb2lucyBlYWNoIHJlZ2V4cCB3aXRoIHwuXG4vL1xuLy8gRm9sbG93aW5nIHRoZSBsZWFkIG9mIEJhc2ggNC4xLCBub3RlIHRoYXQgXCIqKlwiIG9ubHkgaGFzIHNwZWNpYWwgbWVhbmluZ1xuLy8gd2hlbiBpdCBpcyB0aGUgKm9ubHkqIHRoaW5nIGluIGEgcGF0aCBwb3J0aW9uLiAgT3RoZXJ3aXNlLCBhbnkgc2VyaWVzXG4vLyBvZiAqIGlzIGVxdWl2YWxlbnQgdG8gYSBzaW5nbGUgKi4gIEdsb2JzdGFyIGJlaGF2aW9yIGlzIGVuYWJsZWQgYnlcbi8vIGRlZmF1bHQsIGFuZCBjYW4gYmUgZGlzYWJsZWQgYnkgc2V0dGluZyBvcHRpb25zLm5vZ2xvYnN0YXIuXG5NaW5pbWF0Y2gucHJvdG90eXBlLnBhcnNlID0gcGFyc2VcbnZhciBTVUJQQVJTRSA9IHt9XG5mdW5jdGlvbiBwYXJzZSAocGF0dGVybiwgaXNTdWIpIHtcbiAgaWYgKHBhdHRlcm4ubGVuZ3RoID4gMTAyNCAqIDY0KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGF0dGVybiBpcyB0b28gbG9uZycpXG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuXG4gIC8vIHNob3J0Y3V0c1xuICBpZiAoIW9wdGlvbnMubm9nbG9ic3RhciAmJiBwYXR0ZXJuID09PSAnKionKSByZXR1cm4gR0xPQlNUQVJcbiAgaWYgKHBhdHRlcm4gPT09ICcnKSByZXR1cm4gJydcblxuICB2YXIgcmUgPSAnJ1xuICB2YXIgaGFzTWFnaWMgPSAhIW9wdGlvbnMubm9jYXNlXG4gIHZhciBlc2NhcGluZyA9IGZhbHNlXG4gIC8vID8gPT4gb25lIHNpbmdsZSBjaGFyYWN0ZXJcbiAgdmFyIHBhdHRlcm5MaXN0U3RhY2sgPSBbXVxuICB2YXIgbmVnYXRpdmVMaXN0cyA9IFtdXG4gIHZhciBzdGF0ZUNoYXJcbiAgdmFyIGluQ2xhc3MgPSBmYWxzZVxuICB2YXIgcmVDbGFzc1N0YXJ0ID0gLTFcbiAgdmFyIGNsYXNzU3RhcnQgPSAtMVxuICAvLyAuIGFuZCAuLiBuZXZlciBtYXRjaCBhbnl0aGluZyB0aGF0IGRvZXNuJ3Qgc3RhcnQgd2l0aCAuLFxuICAvLyBldmVuIHdoZW4gb3B0aW9ucy5kb3QgaXMgc2V0LlxuICB2YXIgcGF0dGVyblN0YXJ0ID0gcGF0dGVybi5jaGFyQXQoMCkgPT09ICcuJyA/ICcnIC8vIGFueXRoaW5nXG4gIC8vIG5vdCAoc3RhcnQgb3IgLyBmb2xsb3dlZCBieSAuIG9yIC4uIGZvbGxvd2VkIGJ5IC8gb3IgZW5kKVxuICA6IG9wdGlvbnMuZG90ID8gJyg/ISg/Ol58XFxcXFxcLylcXFxcLnsxLDJ9KD86JHxcXFxcXFwvKSknXG4gIDogJyg/IVxcXFwuKSdcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgZnVuY3Rpb24gY2xlYXJTdGF0ZUNoYXIgKCkge1xuICAgIGlmIChzdGF0ZUNoYXIpIHtcbiAgICAgIC8vIHdlIGhhZCBzb21lIHN0YXRlLXRyYWNraW5nIGNoYXJhY3RlclxuICAgICAgLy8gdGhhdCB3YXNuJ3QgY29uc3VtZWQgYnkgdGhpcyBwYXNzLlxuICAgICAgc3dpdGNoIChzdGF0ZUNoYXIpIHtcbiAgICAgICAgY2FzZSAnKic6XG4gICAgICAgICAgcmUgKz0gc3RhclxuICAgICAgICAgIGhhc01hZ2ljID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgICBjYXNlICc/JzpcbiAgICAgICAgICByZSArPSBxbWFya1xuICAgICAgICAgIGhhc01hZ2ljID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlICs9ICdcXFxcJyArIHN0YXRlQ2hhclxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgc2VsZi5kZWJ1ZygnY2xlYXJTdGF0ZUNoYXIgJWogJWonLCBzdGF0ZUNoYXIsIHJlKVxuICAgICAgc3RhdGVDaGFyID0gZmFsc2VcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGF0dGVybi5sZW5ndGgsIGNcbiAgICA7IChpIDwgbGVuKSAmJiAoYyA9IHBhdHRlcm4uY2hhckF0KGkpKVxuICAgIDsgaSsrKSB7XG4gICAgdGhpcy5kZWJ1ZygnJXNcXHQlcyAlcyAlaicsIHBhdHRlcm4sIGksIHJlLCBjKVxuXG4gICAgLy8gc2tpcCBvdmVyIGFueSB0aGF0IGFyZSBlc2NhcGVkLlxuICAgIGlmIChlc2NhcGluZyAmJiByZVNwZWNpYWxzW2NdKSB7XG4gICAgICByZSArPSAnXFxcXCcgKyBjXG4gICAgICBlc2NhcGluZyA9IGZhbHNlXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHN3aXRjaCAoYykge1xuICAgICAgY2FzZSAnLyc6XG4gICAgICAgIC8vIGNvbXBsZXRlbHkgbm90IGFsbG93ZWQsIGV2ZW4gZXNjYXBlZC5cbiAgICAgICAgLy8gU2hvdWxkIGFscmVhZHkgYmUgcGF0aC1zcGxpdCBieSBub3cuXG4gICAgICAgIHJldHVybiBmYWxzZVxuXG4gICAgICBjYXNlICdcXFxcJzpcbiAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKVxuICAgICAgICBlc2NhcGluZyA9IHRydWVcbiAgICAgIGNvbnRpbnVlXG5cbiAgICAgIC8vIHRoZSB2YXJpb3VzIHN0YXRlQ2hhciB2YWx1ZXNcbiAgICAgIC8vIGZvciB0aGUgXCJleHRnbG9iXCIgc3R1ZmYuXG4gICAgICBjYXNlICc/JzpcbiAgICAgIGNhc2UgJyonOlxuICAgICAgY2FzZSAnKyc6XG4gICAgICBjYXNlICdAJzpcbiAgICAgIGNhc2UgJyEnOlxuICAgICAgICB0aGlzLmRlYnVnKCclc1xcdCVzICVzICVqIDwtLSBzdGF0ZUNoYXInLCBwYXR0ZXJuLCBpLCByZSwgYylcblxuICAgICAgICAvLyBhbGwgb2YgdGhvc2UgYXJlIGxpdGVyYWxzIGluc2lkZSBhIGNsYXNzLCBleGNlcHQgdGhhdFxuICAgICAgICAvLyB0aGUgZ2xvYiBbIWFdIG1lYW5zIFteYV0gaW4gcmVnZXhwXG4gICAgICAgIGlmIChpbkNsYXNzKSB7XG4gICAgICAgICAgdGhpcy5kZWJ1ZygnICBpbiBjbGFzcycpXG4gICAgICAgICAgaWYgKGMgPT09ICchJyAmJiBpID09PSBjbGFzc1N0YXJ0ICsgMSkgYyA9ICdeJ1xuICAgICAgICAgIHJlICs9IGNcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgd2UgYWxyZWFkeSBoYXZlIGEgc3RhdGVDaGFyLCB0aGVuIGl0IG1lYW5zXG4gICAgICAgIC8vIHRoYXQgdGhlcmUgd2FzIHNvbWV0aGluZyBsaWtlICoqIG9yICs/IGluIHRoZXJlLlxuICAgICAgICAvLyBIYW5kbGUgdGhlIHN0YXRlQ2hhciwgdGhlbiBwcm9jZWVkIHdpdGggdGhpcyBvbmUuXG4gICAgICAgIHNlbGYuZGVidWcoJ2NhbGwgY2xlYXJTdGF0ZUNoYXIgJWonLCBzdGF0ZUNoYXIpXG4gICAgICAgIGNsZWFyU3RhdGVDaGFyKClcbiAgICAgICAgc3RhdGVDaGFyID0gY1xuICAgICAgICAvLyBpZiBleHRnbG9iIGlzIGRpc2FibGVkLCB0aGVuICsoYXNkZnxmb28pIGlzbid0IGEgdGhpbmcuXG4gICAgICAgIC8vIGp1c3QgY2xlYXIgdGhlIHN0YXRlY2hhciAqbm93KiwgcmF0aGVyIHRoYW4gZXZlbiBkaXZpbmcgaW50b1xuICAgICAgICAvLyB0aGUgcGF0dGVybkxpc3Qgc3R1ZmYuXG4gICAgICAgIGlmIChvcHRpb25zLm5vZXh0KSBjbGVhclN0YXRlQ2hhcigpXG4gICAgICBjb250aW51ZVxuXG4gICAgICBjYXNlICcoJzpcbiAgICAgICAgaWYgKGluQ2xhc3MpIHtcbiAgICAgICAgICByZSArPSAnKCdcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGF0ZUNoYXIpIHtcbiAgICAgICAgICByZSArPSAnXFxcXCgnXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIHBhdHRlcm5MaXN0U3RhY2sucHVzaCh7XG4gICAgICAgICAgdHlwZTogc3RhdGVDaGFyLFxuICAgICAgICAgIHN0YXJ0OiBpIC0gMSxcbiAgICAgICAgICByZVN0YXJ0OiByZS5sZW5ndGgsXG4gICAgICAgICAgb3BlbjogcGxUeXBlc1tzdGF0ZUNoYXJdLm9wZW4sXG4gICAgICAgICAgY2xvc2U6IHBsVHlwZXNbc3RhdGVDaGFyXS5jbG9zZVxuICAgICAgICB9KVxuICAgICAgICAvLyBuZWdhdGlvbiBpcyAoPzooPyFqcylbXi9dKilcbiAgICAgICAgcmUgKz0gc3RhdGVDaGFyID09PSAnIScgPyAnKD86KD8hKD86JyA6ICcoPzonXG4gICAgICAgIHRoaXMuZGVidWcoJ3BsVHlwZSAlaiAlaicsIHN0YXRlQ2hhciwgcmUpXG4gICAgICAgIHN0YXRlQ2hhciA9IGZhbHNlXG4gICAgICBjb250aW51ZVxuXG4gICAgICBjYXNlICcpJzpcbiAgICAgICAgaWYgKGluQ2xhc3MgfHwgIXBhdHRlcm5MaXN0U3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgcmUgKz0gJ1xcXFwpJ1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBjbGVhclN0YXRlQ2hhcigpXG4gICAgICAgIGhhc01hZ2ljID0gdHJ1ZVxuICAgICAgICB2YXIgcGwgPSBwYXR0ZXJuTGlzdFN0YWNrLnBvcCgpXG4gICAgICAgIC8vIG5lZ2F0aW9uIGlzICg/Oig/IWpzKVteL10qKVxuICAgICAgICAvLyBUaGUgb3RoZXJzIGFyZSAoPzo8cGF0dGVybj4pPHR5cGU+XG4gICAgICAgIHJlICs9IHBsLmNsb3NlXG4gICAgICAgIGlmIChwbC50eXBlID09PSAnIScpIHtcbiAgICAgICAgICBuZWdhdGl2ZUxpc3RzLnB1c2gocGwpXG4gICAgICAgIH1cbiAgICAgICAgcGwucmVFbmQgPSByZS5sZW5ndGhcbiAgICAgIGNvbnRpbnVlXG5cbiAgICAgIGNhc2UgJ3wnOlxuICAgICAgICBpZiAoaW5DbGFzcyB8fCAhcGF0dGVybkxpc3RTdGFjay5sZW5ndGggfHwgZXNjYXBpbmcpIHtcbiAgICAgICAgICByZSArPSAnXFxcXHwnXG4gICAgICAgICAgZXNjYXBpbmcgPSBmYWxzZVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBjbGVhclN0YXRlQ2hhcigpXG4gICAgICAgIHJlICs9ICd8J1xuICAgICAgY29udGludWVcblxuICAgICAgLy8gdGhlc2UgYXJlIG1vc3RseSB0aGUgc2FtZSBpbiByZWdleHAgYW5kIGdsb2JcbiAgICAgIGNhc2UgJ1snOlxuICAgICAgICAvLyBzd2FsbG93IGFueSBzdGF0ZS10cmFja2luZyBjaGFyIGJlZm9yZSB0aGUgW1xuICAgICAgICBjbGVhclN0YXRlQ2hhcigpXG5cbiAgICAgICAgaWYgKGluQ2xhc3MpIHtcbiAgICAgICAgICByZSArPSAnXFxcXCcgKyBjXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGluQ2xhc3MgPSB0cnVlXG4gICAgICAgIGNsYXNzU3RhcnQgPSBpXG4gICAgICAgIHJlQ2xhc3NTdGFydCA9IHJlLmxlbmd0aFxuICAgICAgICByZSArPSBjXG4gICAgICBjb250aW51ZVxuXG4gICAgICBjYXNlICddJzpcbiAgICAgICAgLy8gIGEgcmlnaHQgYnJhY2tldCBzaGFsbCBsb3NlIGl0cyBzcGVjaWFsXG4gICAgICAgIC8vICBtZWFuaW5nIGFuZCByZXByZXNlbnQgaXRzZWxmIGluXG4gICAgICAgIC8vICBhIGJyYWNrZXQgZXhwcmVzc2lvbiBpZiBpdCBvY2N1cnNcbiAgICAgICAgLy8gIGZpcnN0IGluIHRoZSBsaXN0LiAgLS0gUE9TSVguMiAyLjguMy4yXG4gICAgICAgIGlmIChpID09PSBjbGFzc1N0YXJ0ICsgMSB8fCAhaW5DbGFzcykge1xuICAgICAgICAgIHJlICs9ICdcXFxcJyArIGNcbiAgICAgICAgICBlc2NhcGluZyA9IGZhbHNlXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB3ZSBsZWZ0IGEgY2xhc3Mgb3Blbi5cbiAgICAgICAgLy8gXCJbei1hXVwiIGlzIHZhbGlkLCBlcXVpdmFsZW50IHRvIFwiXFxbei1hXFxdXCJcbiAgICAgICAgaWYgKGluQ2xhc3MpIHtcbiAgICAgICAgICAvLyBzcGxpdCB3aGVyZSB0aGUgbGFzdCBbIHdhcywgbWFrZSBzdXJlIHdlIGRvbid0IGhhdmVcbiAgICAgICAgICAvLyBhbiBpbnZhbGlkIHJlLiBpZiBzbywgcmUtd2FsayB0aGUgY29udGVudHMgb2YgdGhlXG4gICAgICAgICAgLy8gd291bGQtYmUgY2xhc3MgdG8gcmUtdHJhbnNsYXRlIGFueSBjaGFyYWN0ZXJzIHRoYXRcbiAgICAgICAgICAvLyB3ZXJlIHBhc3NlZCB0aHJvdWdoIGFzLWlzXG4gICAgICAgICAgLy8gVE9ETzogSXQgd291bGQgcHJvYmFibHkgYmUgZmFzdGVyIHRvIGRldGVybWluZSB0aGlzXG4gICAgICAgICAgLy8gd2l0aG91dCBhIHRyeS9jYXRjaCBhbmQgYSBuZXcgUmVnRXhwLCBidXQgaXQncyB0cmlja3lcbiAgICAgICAgICAvLyB0byBkbyBzYWZlbHkuICBGb3Igbm93LCB0aGlzIGlzIHNhZmUgYW5kIHdvcmtzLlxuICAgICAgICAgIHZhciBjcyA9IHBhdHRlcm4uc3Vic3RyaW5nKGNsYXNzU3RhcnQgKyAxLCBpKVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBSZWdFeHAoJ1snICsgY3MgKyAnXScpXG4gICAgICAgICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgICAgICAgIC8vIG5vdCBhIHZhbGlkIGNsYXNzIVxuICAgICAgICAgICAgdmFyIHNwID0gdGhpcy5wYXJzZShjcywgU1VCUEFSU0UpXG4gICAgICAgICAgICByZSA9IHJlLnN1YnN0cigwLCByZUNsYXNzU3RhcnQpICsgJ1xcXFxbJyArIHNwWzBdICsgJ1xcXFxdJ1xuICAgICAgICAgICAgaGFzTWFnaWMgPSBoYXNNYWdpYyB8fCBzcFsxXVxuICAgICAgICAgICAgaW5DbGFzcyA9IGZhbHNlXG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpbmlzaCB1cCB0aGUgY2xhc3MuXG4gICAgICAgIGhhc01hZ2ljID0gdHJ1ZVxuICAgICAgICBpbkNsYXNzID0gZmFsc2VcbiAgICAgICAgcmUgKz0gY1xuICAgICAgY29udGludWVcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gc3dhbGxvdyBhbnkgc3RhdGUgY2hhciB0aGF0IHdhc24ndCBjb25zdW1lZFxuICAgICAgICBjbGVhclN0YXRlQ2hhcigpXG5cbiAgICAgICAgaWYgKGVzY2FwaW5nKSB7XG4gICAgICAgICAgLy8gbm8gbmVlZFxuICAgICAgICAgIGVzY2FwaW5nID0gZmFsc2VcbiAgICAgICAgfSBlbHNlIGlmIChyZVNwZWNpYWxzW2NdXG4gICAgICAgICAgJiYgIShjID09PSAnXicgJiYgaW5DbGFzcykpIHtcbiAgICAgICAgICByZSArPSAnXFxcXCdcbiAgICAgICAgfVxuXG4gICAgICAgIHJlICs9IGNcblxuICAgIH0gLy8gc3dpdGNoXG4gIH0gLy8gZm9yXG5cbiAgLy8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHdlIGxlZnQgYSBjbGFzcyBvcGVuLlxuICAvLyBcIlthYmNcIiBpcyB2YWxpZCwgZXF1aXZhbGVudCB0byBcIlxcW2FiY1wiXG4gIGlmIChpbkNsYXNzKSB7XG4gICAgLy8gc3BsaXQgd2hlcmUgdGhlIGxhc3QgWyB3YXMsIGFuZCBlc2NhcGUgaXRcbiAgICAvLyB0aGlzIGlzIGEgaHVnZSBwaXRhLiAgV2Ugbm93IGhhdmUgdG8gcmUtd2Fsa1xuICAgIC8vIHRoZSBjb250ZW50cyBvZiB0aGUgd291bGQtYmUgY2xhc3MgdG8gcmUtdHJhbnNsYXRlXG4gICAgLy8gYW55IGNoYXJhY3RlcnMgdGhhdCB3ZXJlIHBhc3NlZCB0aHJvdWdoIGFzLWlzXG4gICAgY3MgPSBwYXR0ZXJuLnN1YnN0cihjbGFzc1N0YXJ0ICsgMSlcbiAgICBzcCA9IHRoaXMucGFyc2UoY3MsIFNVQlBBUlNFKVxuICAgIHJlID0gcmUuc3Vic3RyKDAsIHJlQ2xhc3NTdGFydCkgKyAnXFxcXFsnICsgc3BbMF1cbiAgICBoYXNNYWdpYyA9IGhhc01hZ2ljIHx8IHNwWzFdXG4gIH1cblxuICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgd2UgaGFkIGEgKyggdGhpbmcgYXQgdGhlICplbmQqXG4gIC8vIG9mIHRoZSBwYXR0ZXJuLlxuICAvLyBlYWNoIHBhdHRlcm4gbGlzdCBzdGFjayBhZGRzIDMgY2hhcnMsIGFuZCB3ZSBuZWVkIHRvIGdvIHRocm91Z2hcbiAgLy8gYW5kIGVzY2FwZSBhbnkgfCBjaGFycyB0aGF0IHdlcmUgcGFzc2VkIHRocm91Z2ggYXMtaXMgZm9yIHRoZSByZWdleHAuXG4gIC8vIEdvIHRocm91Z2ggYW5kIGVzY2FwZSB0aGVtLCB0YWtpbmcgY2FyZSBub3QgdG8gZG91YmxlLWVzY2FwZSBhbnlcbiAgLy8gfCBjaGFycyB0aGF0IHdlcmUgYWxyZWFkeSBlc2NhcGVkLlxuICBmb3IgKHBsID0gcGF0dGVybkxpc3RTdGFjay5wb3AoKTsgcGw7IHBsID0gcGF0dGVybkxpc3RTdGFjay5wb3AoKSkge1xuICAgIHZhciB0YWlsID0gcmUuc2xpY2UocGwucmVTdGFydCArIHBsLm9wZW4ubGVuZ3RoKVxuICAgIHRoaXMuZGVidWcoJ3NldHRpbmcgdGFpbCcsIHJlLCBwbClcbiAgICAvLyBtYXliZSBzb21lIGV2ZW4gbnVtYmVyIG9mIFxcLCB0aGVuIG1heWJlIDEgXFwsIGZvbGxvd2VkIGJ5IGEgfFxuICAgIHRhaWwgPSB0YWlsLnJlcGxhY2UoLygoPzpcXFxcezJ9KXswLDY0fSkoXFxcXD8pXFx8L2csIGZ1bmN0aW9uIChfLCAkMSwgJDIpIHtcbiAgICAgIGlmICghJDIpIHtcbiAgICAgICAgLy8gdGhlIHwgaXNuJ3QgYWxyZWFkeSBlc2NhcGVkLCBzbyBlc2NhcGUgaXQuXG4gICAgICAgICQyID0gJ1xcXFwnXG4gICAgICB9XG5cbiAgICAgIC8vIG5lZWQgdG8gZXNjYXBlIGFsbCB0aG9zZSBzbGFzaGVzICphZ2FpbiosIHdpdGhvdXQgZXNjYXBpbmcgdGhlXG4gICAgICAvLyBvbmUgdGhhdCB3ZSBuZWVkIGZvciBlc2NhcGluZyB0aGUgfCBjaGFyYWN0ZXIuICBBcyBpdCB3b3JrcyBvdXQsXG4gICAgICAvLyBlc2NhcGluZyBhbiBldmVuIG51bWJlciBvZiBzbGFzaGVzIGNhbiBiZSBkb25lIGJ5IHNpbXBseSByZXBlYXRpbmdcbiAgICAgIC8vIGl0IGV4YWN0bHkgYWZ0ZXIgaXRzZWxmLiAgVGhhdCdzIHdoeSB0aGlzIHRyaWNrIHdvcmtzLlxuICAgICAgLy9cbiAgICAgIC8vIEkgYW0gc29ycnkgdGhhdCB5b3UgaGF2ZSB0byBzZWUgdGhpcy5cbiAgICAgIHJldHVybiAkMSArICQxICsgJDIgKyAnfCdcbiAgICB9KVxuXG4gICAgdGhpcy5kZWJ1ZygndGFpbD0lalxcbiAgICVzJywgdGFpbCwgdGFpbCwgcGwsIHJlKVxuICAgIHZhciB0ID0gcGwudHlwZSA9PT0gJyonID8gc3RhclxuICAgICAgOiBwbC50eXBlID09PSAnPycgPyBxbWFya1xuICAgICAgOiAnXFxcXCcgKyBwbC50eXBlXG5cbiAgICBoYXNNYWdpYyA9IHRydWVcbiAgICByZSA9IHJlLnNsaWNlKDAsIHBsLnJlU3RhcnQpICsgdCArICdcXFxcKCcgKyB0YWlsXG4gIH1cblxuICAvLyBoYW5kbGUgdHJhaWxpbmcgdGhpbmdzIHRoYXQgb25seSBtYXR0ZXIgYXQgdGhlIHZlcnkgZW5kLlxuICBjbGVhclN0YXRlQ2hhcigpXG4gIGlmIChlc2NhcGluZykge1xuICAgIC8vIHRyYWlsaW5nIFxcXFxcbiAgICByZSArPSAnXFxcXFxcXFwnXG4gIH1cblxuICAvLyBvbmx5IG5lZWQgdG8gYXBwbHkgdGhlIG5vZG90IHN0YXJ0IGlmIHRoZSByZSBzdGFydHMgd2l0aFxuICAvLyBzb21ldGhpbmcgdGhhdCBjb3VsZCBjb25jZWl2YWJseSBjYXB0dXJlIGEgZG90XG4gIHZhciBhZGRQYXR0ZXJuU3RhcnQgPSBmYWxzZVxuICBzd2l0Y2ggKHJlLmNoYXJBdCgwKSkge1xuICAgIGNhc2UgJy4nOlxuICAgIGNhc2UgJ1snOlxuICAgIGNhc2UgJygnOiBhZGRQYXR0ZXJuU3RhcnQgPSB0cnVlXG4gIH1cblxuICAvLyBIYWNrIHRvIHdvcmsgYXJvdW5kIGxhY2sgb2YgbmVnYXRpdmUgbG9va2JlaGluZCBpbiBKU1xuICAvLyBBIHBhdHRlcm4gbGlrZTogKi4hKHgpLiEoeXx6KSBuZWVkcyB0byBlbnN1cmUgdGhhdCBhIG5hbWVcbiAgLy8gbGlrZSAnYS54eXoueXonIGRvZXNuJ3QgbWF0Y2guICBTbywgdGhlIGZpcnN0IG5lZ2F0aXZlXG4gIC8vIGxvb2thaGVhZCwgaGFzIHRvIGxvb2sgQUxMIHRoZSB3YXkgYWhlYWQsIHRvIHRoZSBlbmQgb2ZcbiAgLy8gdGhlIHBhdHRlcm4uXG4gIGZvciAodmFyIG4gPSBuZWdhdGl2ZUxpc3RzLmxlbmd0aCAtIDE7IG4gPiAtMTsgbi0tKSB7XG4gICAgdmFyIG5sID0gbmVnYXRpdmVMaXN0c1tuXVxuXG4gICAgdmFyIG5sQmVmb3JlID0gcmUuc2xpY2UoMCwgbmwucmVTdGFydClcbiAgICB2YXIgbmxGaXJzdCA9IHJlLnNsaWNlKG5sLnJlU3RhcnQsIG5sLnJlRW5kIC0gOClcbiAgICB2YXIgbmxMYXN0ID0gcmUuc2xpY2UobmwucmVFbmQgLSA4LCBubC5yZUVuZClcbiAgICB2YXIgbmxBZnRlciA9IHJlLnNsaWNlKG5sLnJlRW5kKVxuXG4gICAgbmxMYXN0ICs9IG5sQWZ0ZXJcblxuICAgIC8vIEhhbmRsZSBuZXN0ZWQgc3R1ZmYgbGlrZSAqKCouanN8ISgqLmpzb24pKSwgd2hlcmUgb3BlbiBwYXJlbnNcbiAgICAvLyBtZWFuIHRoYXQgd2Ugc2hvdWxkICpub3QqIGluY2x1ZGUgdGhlICkgaW4gdGhlIGJpdCB0aGF0IGlzIGNvbnNpZGVyZWRcbiAgICAvLyBcImFmdGVyXCIgdGhlIG5lZ2F0ZWQgc2VjdGlvbi5cbiAgICB2YXIgb3BlblBhcmVuc0JlZm9yZSA9IG5sQmVmb3JlLnNwbGl0KCcoJykubGVuZ3RoIC0gMVxuICAgIHZhciBjbGVhbkFmdGVyID0gbmxBZnRlclxuICAgIGZvciAoaSA9IDA7IGkgPCBvcGVuUGFyZW5zQmVmb3JlOyBpKyspIHtcbiAgICAgIGNsZWFuQWZ0ZXIgPSBjbGVhbkFmdGVyLnJlcGxhY2UoL1xcKVsrKj9dPy8sICcnKVxuICAgIH1cbiAgICBubEFmdGVyID0gY2xlYW5BZnRlclxuXG4gICAgdmFyIGRvbGxhciA9ICcnXG4gICAgaWYgKG5sQWZ0ZXIgPT09ICcnICYmIGlzU3ViICE9PSBTVUJQQVJTRSkge1xuICAgICAgZG9sbGFyID0gJyQnXG4gICAgfVxuICAgIHZhciBuZXdSZSA9IG5sQmVmb3JlICsgbmxGaXJzdCArIG5sQWZ0ZXIgKyBkb2xsYXIgKyBubExhc3RcbiAgICByZSA9IG5ld1JlXG4gIH1cblxuICAvLyBpZiB0aGUgcmUgaXMgbm90IFwiXCIgYXQgdGhpcyBwb2ludCwgdGhlbiB3ZSBuZWVkIHRvIG1ha2Ugc3VyZVxuICAvLyBpdCBkb2Vzbid0IG1hdGNoIGFnYWluc3QgYW4gZW1wdHkgcGF0aCBwYXJ0LlxuICAvLyBPdGhlcndpc2UgYS8qIHdpbGwgbWF0Y2ggYS8sIHdoaWNoIGl0IHNob3VsZCBub3QuXG4gIGlmIChyZSAhPT0gJycgJiYgaGFzTWFnaWMpIHtcbiAgICByZSA9ICcoPz0uKScgKyByZVxuICB9XG5cbiAgaWYgKGFkZFBhdHRlcm5TdGFydCkge1xuICAgIHJlID0gcGF0dGVyblN0YXJ0ICsgcmVcbiAgfVxuXG4gIC8vIHBhcnNpbmcganVzdCBhIHBpZWNlIG9mIGEgbGFyZ2VyIHBhdHRlcm4uXG4gIGlmIChpc1N1YiA9PT0gU1VCUEFSU0UpIHtcbiAgICByZXR1cm4gW3JlLCBoYXNNYWdpY11cbiAgfVxuXG4gIC8vIHNraXAgdGhlIHJlZ2V4cCBmb3Igbm9uLW1hZ2ljYWwgcGF0dGVybnNcbiAgLy8gdW5lc2NhcGUgYW55dGhpbmcgaW4gaXQsIHRob3VnaCwgc28gdGhhdCBpdCdsbCBiZVxuICAvLyBhbiBleGFjdCBtYXRjaCBhZ2FpbnN0IGEgZmlsZSBldGMuXG4gIGlmICghaGFzTWFnaWMpIHtcbiAgICByZXR1cm4gZ2xvYlVuZXNjYXBlKHBhdHRlcm4pXG4gIH1cblxuICB2YXIgZmxhZ3MgPSBvcHRpb25zLm5vY2FzZSA/ICdpJyA6ICcnXG4gIHRyeSB7XG4gICAgdmFyIHJlZ0V4cCA9IG5ldyBSZWdFeHAoJ14nICsgcmUgKyAnJCcsIGZsYWdzKVxuICB9IGNhdGNoIChlcikge1xuICAgIC8vIElmIGl0IHdhcyBhbiBpbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbiwgdGhlbiBpdCBjYW4ndCBtYXRjaFxuICAgIC8vIGFueXRoaW5nLiAgVGhpcyB0cmljayBsb29rcyBmb3IgYSBjaGFyYWN0ZXIgYWZ0ZXIgdGhlIGVuZCBvZlxuICAgIC8vIHRoZSBzdHJpbmcsIHdoaWNoIGlzIG9mIGNvdXJzZSBpbXBvc3NpYmxlLCBleGNlcHQgaW4gbXVsdGktbGluZVxuICAgIC8vIG1vZGUsIGJ1dCBpdCdzIG5vdCBhIC9tIHJlZ2V4LlxuICAgIHJldHVybiBuZXcgUmVnRXhwKCckLicpXG4gIH1cblxuICByZWdFeHAuX2dsb2IgPSBwYXR0ZXJuXG4gIHJlZ0V4cC5fc3JjID0gcmVcblxuICByZXR1cm4gcmVnRXhwXG59XG5cbm1pbmltYXRjaC5tYWtlUmUgPSBmdW5jdGlvbiAocGF0dGVybiwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IE1pbmltYXRjaChwYXR0ZXJuLCBvcHRpb25zIHx8IHt9KS5tYWtlUmUoKVxufVxuXG5NaW5pbWF0Y2gucHJvdG90eXBlLm1ha2VSZSA9IG1ha2VSZVxuZnVuY3Rpb24gbWFrZVJlICgpIHtcbiAgaWYgKHRoaXMucmVnZXhwIHx8IHRoaXMucmVnZXhwID09PSBmYWxzZSkgcmV0dXJuIHRoaXMucmVnZXhwXG5cbiAgLy8gYXQgdGhpcyBwb2ludCwgdGhpcy5zZXQgaXMgYSAyZCBhcnJheSBvZiBwYXJ0aWFsXG4gIC8vIHBhdHRlcm4gc3RyaW5ncywgb3IgXCIqKlwiLlxuICAvL1xuICAvLyBJdCdzIGJldHRlciB0byB1c2UgLm1hdGNoKCkuICBUaGlzIGZ1bmN0aW9uIHNob3VsZG4ndFxuICAvLyBiZSB1c2VkLCByZWFsbHksIGJ1dCBpdCdzIHByZXR0eSBjb252ZW5pZW50IHNvbWV0aW1lcyxcbiAgLy8gd2hlbiB5b3UganVzdCB3YW50IHRvIHdvcmsgd2l0aCBhIHJlZ2V4LlxuICB2YXIgc2V0ID0gdGhpcy5zZXRcblxuICBpZiAoIXNldC5sZW5ndGgpIHtcbiAgICB0aGlzLnJlZ2V4cCA9IGZhbHNlXG4gICAgcmV0dXJuIHRoaXMucmVnZXhwXG4gIH1cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNcblxuICB2YXIgdHdvU3RhciA9IG9wdGlvbnMubm9nbG9ic3RhciA/IHN0YXJcbiAgICA6IG9wdGlvbnMuZG90ID8gdHdvU3RhckRvdFxuICAgIDogdHdvU3Rhck5vRG90XG4gIHZhciBmbGFncyA9IG9wdGlvbnMubm9jYXNlID8gJ2knIDogJydcblxuICB2YXIgcmUgPSBzZXQubWFwKGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4ubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gKHAgPT09IEdMT0JTVEFSKSA/IHR3b1N0YXJcbiAgICAgIDogKHR5cGVvZiBwID09PSAnc3RyaW5nJykgPyByZWdFeHBFc2NhcGUocClcbiAgICAgIDogcC5fc3JjXG4gICAgfSkuam9pbignXFxcXFxcLycpXG4gIH0pLmpvaW4oJ3wnKVxuXG4gIC8vIG11c3QgbWF0Y2ggZW50aXJlIHBhdHRlcm5cbiAgLy8gZW5kaW5nIGluIGEgKiBvciAqKiB3aWxsIG1ha2UgaXQgbGVzcyBzdHJpY3QuXG4gIHJlID0gJ14oPzonICsgcmUgKyAnKSQnXG5cbiAgLy8gY2FuIG1hdGNoIGFueXRoaW5nLCBhcyBsb25nIGFzIGl0J3Mgbm90IHRoaXMuXG4gIGlmICh0aGlzLm5lZ2F0ZSkgcmUgPSAnXig/IScgKyByZSArICcpLiokJ1xuXG4gIHRyeSB7XG4gICAgdGhpcy5yZWdleHAgPSBuZXcgUmVnRXhwKHJlLCBmbGFncylcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICB0aGlzLnJlZ2V4cCA9IGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRoaXMucmVnZXhwXG59XG5cbm1pbmltYXRjaC5tYXRjaCA9IGZ1bmN0aW9uIChsaXN0LCBwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBtbSA9IG5ldyBNaW5pbWF0Y2gocGF0dGVybiwgb3B0aW9ucylcbiAgbGlzdCA9IGxpc3QuZmlsdGVyKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIG1tLm1hdGNoKGYpXG4gIH0pXG4gIGlmIChtbS5vcHRpb25zLm5vbnVsbCAmJiAhbGlzdC5sZW5ndGgpIHtcbiAgICBsaXN0LnB1c2gocGF0dGVybilcbiAgfVxuICByZXR1cm4gbGlzdFxufVxuXG5NaW5pbWF0Y2gucHJvdG90eXBlLm1hdGNoID0gbWF0Y2hcbmZ1bmN0aW9uIG1hdGNoIChmLCBwYXJ0aWFsKSB7XG4gIHRoaXMuZGVidWcoJ21hdGNoJywgZiwgdGhpcy5wYXR0ZXJuKVxuICAvLyBzaG9ydC1jaXJjdWl0IGluIHRoZSBjYXNlIG9mIGJ1c3RlZCB0aGluZ3MuXG4gIC8vIGNvbW1lbnRzLCBldGMuXG4gIGlmICh0aGlzLmNvbW1lbnQpIHJldHVybiBmYWxzZVxuICBpZiAodGhpcy5lbXB0eSkgcmV0dXJuIGYgPT09ICcnXG5cbiAgaWYgKGYgPT09ICcvJyAmJiBwYXJ0aWFsKSByZXR1cm4gdHJ1ZVxuXG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zXG5cbiAgLy8gd2luZG93czogbmVlZCB0byB1c2UgLywgbm90IFxcXG4gIGlmIChwYXRoLnNlcCAhPT0gJy8nKSB7XG4gICAgZiA9IGYuc3BsaXQocGF0aC5zZXApLmpvaW4oJy8nKVxuICB9XG5cbiAgLy8gdHJlYXQgdGhlIHRlc3QgcGF0aCBhcyBhIHNldCBvZiBwYXRocGFydHMuXG4gIGYgPSBmLnNwbGl0KHNsYXNoU3BsaXQpXG4gIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCAnc3BsaXQnLCBmKVxuXG4gIC8vIGp1c3QgT05FIG9mIHRoZSBwYXR0ZXJuIHNldHMgaW4gdGhpcy5zZXQgbmVlZHMgdG8gbWF0Y2hcbiAgLy8gaW4gb3JkZXIgZm9yIGl0IHRvIGJlIHZhbGlkLiAgSWYgbmVnYXRpbmcsIHRoZW4ganVzdCBvbmVcbiAgLy8gbWF0Y2ggbWVhbnMgdGhhdCB3ZSBoYXZlIGZhaWxlZC5cbiAgLy8gRWl0aGVyIHdheSwgcmV0dXJuIG9uIHRoZSBmaXJzdCBoaXQuXG5cbiAgdmFyIHNldCA9IHRoaXMuc2V0XG4gIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCAnc2V0Jywgc2V0KVxuXG4gIC8vIEZpbmQgdGhlIGJhc2VuYW1lIG9mIHRoZSBwYXRoIGJ5IGxvb2tpbmcgZm9yIHRoZSBsYXN0IG5vbi1lbXB0eSBzZWdtZW50XG4gIHZhciBmaWxlbmFtZVxuICB2YXIgaVxuICBmb3IgKGkgPSBmLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgZmlsZW5hbWUgPSBmW2ldXG4gICAgaWYgKGZpbGVuYW1lKSBicmVha1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwYXR0ZXJuID0gc2V0W2ldXG4gICAgdmFyIGZpbGUgPSBmXG4gICAgaWYgKG9wdGlvbnMubWF0Y2hCYXNlICYmIHBhdHRlcm4ubGVuZ3RoID09PSAxKSB7XG4gICAgICBmaWxlID0gW2ZpbGVuYW1lXVxuICAgIH1cbiAgICB2YXIgaGl0ID0gdGhpcy5tYXRjaE9uZShmaWxlLCBwYXR0ZXJuLCBwYXJ0aWFsKVxuICAgIGlmIChoaXQpIHtcbiAgICAgIGlmIChvcHRpb25zLmZsaXBOZWdhdGUpIHJldHVybiB0cnVlXG4gICAgICByZXR1cm4gIXRoaXMubmVnYXRlXG4gICAgfVxuICB9XG5cbiAgLy8gZGlkbid0IGdldCBhbnkgaGl0cy4gIHRoaXMgaXMgc3VjY2VzcyBpZiBpdCdzIGEgbmVnYXRpdmVcbiAgLy8gcGF0dGVybiwgZmFpbHVyZSBvdGhlcndpc2UuXG4gIGlmIChvcHRpb25zLmZsaXBOZWdhdGUpIHJldHVybiBmYWxzZVxuICByZXR1cm4gdGhpcy5uZWdhdGVcbn1cblxuLy8gc2V0IHBhcnRpYWwgdG8gdHJ1ZSB0byB0ZXN0IGlmLCBmb3IgZXhhbXBsZSxcbi8vIFwiL2EvYlwiIG1hdGNoZXMgdGhlIHN0YXJ0IG9mIFwiLyovYi8qL2RcIlxuLy8gUGFydGlhbCBtZWFucywgaWYgeW91IHJ1biBvdXQgb2YgZmlsZSBiZWZvcmUgeW91IHJ1blxuLy8gb3V0IG9mIHBhdHRlcm4sIHRoZW4gdGhhdCdzIGZpbmUsIGFzIGxvbmcgYXMgYWxsXG4vLyB0aGUgcGFydHMgbWF0Y2guXG5NaW5pbWF0Y2gucHJvdG90eXBlLm1hdGNoT25lID0gZnVuY3Rpb24gKGZpbGUsIHBhdHRlcm4sIHBhcnRpYWwpIHtcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNcblxuICB0aGlzLmRlYnVnKCdtYXRjaE9uZScsXG4gICAgeyAndGhpcyc6IHRoaXMsIGZpbGU6IGZpbGUsIHBhdHRlcm46IHBhdHRlcm4gfSlcblxuICB0aGlzLmRlYnVnKCdtYXRjaE9uZScsIGZpbGUubGVuZ3RoLCBwYXR0ZXJuLmxlbmd0aClcblxuICBmb3IgKHZhciBmaSA9IDAsXG4gICAgICBwaSA9IDAsXG4gICAgICBmbCA9IGZpbGUubGVuZ3RoLFxuICAgICAgcGwgPSBwYXR0ZXJuLmxlbmd0aFxuICAgICAgOyAoZmkgPCBmbCkgJiYgKHBpIDwgcGwpXG4gICAgICA7IGZpKyssIHBpKyspIHtcbiAgICB0aGlzLmRlYnVnKCdtYXRjaE9uZSBsb29wJylcbiAgICB2YXIgcCA9IHBhdHRlcm5bcGldXG4gICAgdmFyIGYgPSBmaWxlW2ZpXVxuXG4gICAgdGhpcy5kZWJ1ZyhwYXR0ZXJuLCBwLCBmKVxuXG4gICAgLy8gc2hvdWxkIGJlIGltcG9zc2libGUuXG4gICAgLy8gc29tZSBpbnZhbGlkIHJlZ2V4cCBzdHVmZiBpbiB0aGUgc2V0LlxuICAgIGlmIChwID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlXG5cbiAgICBpZiAocCA9PT0gR0xPQlNUQVIpIHtcbiAgICAgIHRoaXMuZGVidWcoJ0dMT0JTVEFSJywgW3BhdHRlcm4sIHAsIGZdKVxuXG4gICAgICAvLyBcIioqXCJcbiAgICAgIC8vIGEvKiovYi8qKi9jIHdvdWxkIG1hdGNoIHRoZSBmb2xsb3dpbmc6XG4gICAgICAvLyBhL2IveC95L3ovY1xuICAgICAgLy8gYS94L3kvei9iL2NcbiAgICAgIC8vIGEvYi94L2IveC9jXG4gICAgICAvLyBhL2IvY1xuICAgICAgLy8gVG8gZG8gdGhpcywgdGFrZSB0aGUgcmVzdCBvZiB0aGUgcGF0dGVybiBhZnRlclxuICAgICAgLy8gdGhlICoqLCBhbmQgc2VlIGlmIGl0IHdvdWxkIG1hdGNoIHRoZSBmaWxlIHJlbWFpbmRlci5cbiAgICAgIC8vIElmIHNvLCByZXR1cm4gc3VjY2Vzcy5cbiAgICAgIC8vIElmIG5vdCwgdGhlICoqIFwic3dhbGxvd3NcIiBhIHNlZ21lbnQsIGFuZCB0cnkgYWdhaW4uXG4gICAgICAvLyBUaGlzIGlzIHJlY3Vyc2l2ZWx5IGF3ZnVsLlxuICAgICAgLy9cbiAgICAgIC8vIGEvKiovYi8qKi9jIG1hdGNoaW5nIGEvYi94L3kvei9jXG4gICAgICAvLyAtIGEgbWF0Y2hlcyBhXG4gICAgICAvLyAtIGRvdWJsZXN0YXJcbiAgICAgIC8vICAgLSBtYXRjaE9uZShiL3gveS96L2MsIGIvKiovYylcbiAgICAgIC8vICAgICAtIGIgbWF0Y2hlcyBiXG4gICAgICAvLyAgICAgLSBkb3VibGVzdGFyXG4gICAgICAvLyAgICAgICAtIG1hdGNoT25lKHgveS96L2MsIGMpIC0+IG5vXG4gICAgICAvLyAgICAgICAtIG1hdGNoT25lKHkvei9jLCBjKSAtPiBub1xuICAgICAgLy8gICAgICAgLSBtYXRjaE9uZSh6L2MsIGMpIC0+IG5vXG4gICAgICAvLyAgICAgICAtIG1hdGNoT25lKGMsIGMpIHllcywgaGl0XG4gICAgICB2YXIgZnIgPSBmaVxuICAgICAgdmFyIHByID0gcGkgKyAxXG4gICAgICBpZiAocHIgPT09IHBsKSB7XG4gICAgICAgIHRoaXMuZGVidWcoJyoqIGF0IHRoZSBlbmQnKVxuICAgICAgICAvLyBhICoqIGF0IHRoZSBlbmQgd2lsbCBqdXN0IHN3YWxsb3cgdGhlIHJlc3QuXG4gICAgICAgIC8vIFdlIGhhdmUgZm91bmQgYSBtYXRjaC5cbiAgICAgICAgLy8gaG93ZXZlciwgaXQgd2lsbCBub3Qgc3dhbGxvdyAvLngsIHVubGVzc1xuICAgICAgICAvLyBvcHRpb25zLmRvdCBpcyBzZXQuXG4gICAgICAgIC8vIC4gYW5kIC4uIGFyZSAqbmV2ZXIqIG1hdGNoZWQgYnkgKiosIGZvciBleHBsb3NpdmVseVxuICAgICAgICAvLyBleHBvbmVudGlhbCByZWFzb25zLlxuICAgICAgICBmb3IgKDsgZmkgPCBmbDsgZmkrKykge1xuICAgICAgICAgIGlmIChmaWxlW2ZpXSA9PT0gJy4nIHx8IGZpbGVbZmldID09PSAnLi4nIHx8XG4gICAgICAgICAgICAoIW9wdGlvbnMuZG90ICYmIGZpbGVbZmldLmNoYXJBdCgwKSA9PT0gJy4nKSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cblxuICAgICAgLy8gb2ssIGxldCdzIHNlZSBpZiB3ZSBjYW4gc3dhbGxvdyB3aGF0ZXZlciB3ZSBjYW4uXG4gICAgICB3aGlsZSAoZnIgPCBmbCkge1xuICAgICAgICB2YXIgc3dhbGxvd2VlID0gZmlsZVtmcl1cblxuICAgICAgICB0aGlzLmRlYnVnKCdcXG5nbG9ic3RhciB3aGlsZScsIGZpbGUsIGZyLCBwYXR0ZXJuLCBwciwgc3dhbGxvd2VlKVxuXG4gICAgICAgIC8vIFhYWCByZW1vdmUgdGhpcyBzbGljZS4gIEp1c3QgcGFzcyB0aGUgc3RhcnQgaW5kZXguXG4gICAgICAgIGlmICh0aGlzLm1hdGNoT25lKGZpbGUuc2xpY2UoZnIpLCBwYXR0ZXJuLnNsaWNlKHByKSwgcGFydGlhbCkpIHtcbiAgICAgICAgICB0aGlzLmRlYnVnKCdnbG9ic3RhciBmb3VuZCBtYXRjaCEnLCBmciwgZmwsIHN3YWxsb3dlZSlcbiAgICAgICAgICAvLyBmb3VuZCBhIG1hdGNoLlxuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY2FuJ3Qgc3dhbGxvdyBcIi5cIiBvciBcIi4uXCIgZXZlci5cbiAgICAgICAgICAvLyBjYW4gb25seSBzd2FsbG93IFwiLmZvb1wiIHdoZW4gZXhwbGljaXRseSBhc2tlZC5cbiAgICAgICAgICBpZiAoc3dhbGxvd2VlID09PSAnLicgfHwgc3dhbGxvd2VlID09PSAnLi4nIHx8XG4gICAgICAgICAgICAoIW9wdGlvbnMuZG90ICYmIHN3YWxsb3dlZS5jaGFyQXQoMCkgPT09ICcuJykpIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWcoJ2RvdCBkZXRlY3RlZCEnLCBmaWxlLCBmciwgcGF0dGVybiwgcHIpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vICoqIHN3YWxsb3dzIGEgc2VnbWVudCwgYW5kIGNvbnRpbnVlLlxuICAgICAgICAgIHRoaXMuZGVidWcoJ2dsb2JzdGFyIHN3YWxsb3cgYSBzZWdtZW50LCBhbmQgY29udGludWUnKVxuICAgICAgICAgIGZyKytcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBubyBtYXRjaCB3YXMgZm91bmQuXG4gICAgICAvLyBIb3dldmVyLCBpbiBwYXJ0aWFsIG1vZGUsIHdlIGNhbid0IHNheSB0aGlzIGlzIG5lY2Vzc2FyaWx5IG92ZXIuXG4gICAgICAvLyBJZiB0aGVyZSdzIG1vcmUgKnBhdHRlcm4qIGxlZnQsIHRoZW5cbiAgICAgIGlmIChwYXJ0aWFsKSB7XG4gICAgICAgIC8vIHJhbiBvdXQgb2YgZmlsZVxuICAgICAgICB0aGlzLmRlYnVnKCdcXG4+Pj4gbm8gbWF0Y2gsIHBhcnRpYWw/JywgZmlsZSwgZnIsIHBhdHRlcm4sIHByKVxuICAgICAgICBpZiAoZnIgPT09IGZsKSByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgLy8gc29tZXRoaW5nIG90aGVyIHRoYW4gKipcbiAgICAvLyBub24tbWFnaWMgcGF0dGVybnMganVzdCBoYXZlIHRvIG1hdGNoIGV4YWN0bHlcbiAgICAvLyBwYXR0ZXJucyB3aXRoIG1hZ2ljIGhhdmUgYmVlbiB0dXJuZWQgaW50byByZWdleHBzLlxuICAgIHZhciBoaXRcbiAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAob3B0aW9ucy5ub2Nhc2UpIHtcbiAgICAgICAgaGl0ID0gZi50b0xvd2VyQ2FzZSgpID09PSBwLnRvTG93ZXJDYXNlKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhpdCA9IGYgPT09IHBcbiAgICAgIH1cbiAgICAgIHRoaXMuZGVidWcoJ3N0cmluZyBtYXRjaCcsIHAsIGYsIGhpdClcbiAgICB9IGVsc2Uge1xuICAgICAgaGl0ID0gZi5tYXRjaChwKVxuICAgICAgdGhpcy5kZWJ1ZygncGF0dGVybiBtYXRjaCcsIHAsIGYsIGhpdClcbiAgICB9XG5cbiAgICBpZiAoIWhpdCkgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBOb3RlOiBlbmRpbmcgaW4gLyBtZWFucyB0aGF0IHdlJ2xsIGdldCBhIGZpbmFsIFwiXCJcbiAgLy8gYXQgdGhlIGVuZCBvZiB0aGUgcGF0dGVybi4gIFRoaXMgY2FuIG9ubHkgbWF0Y2ggYVxuICAvLyBjb3JyZXNwb25kaW5nIFwiXCIgYXQgdGhlIGVuZCBvZiB0aGUgZmlsZS5cbiAgLy8gSWYgdGhlIGZpbGUgZW5kcyBpbiAvLCB0aGVuIGl0IGNhbiBvbmx5IG1hdGNoIGFcbiAgLy8gYSBwYXR0ZXJuIHRoYXQgZW5kcyBpbiAvLCB1bmxlc3MgdGhlIHBhdHRlcm4ganVzdFxuICAvLyBkb2Vzbid0IGhhdmUgYW55IG1vcmUgZm9yIGl0LiBCdXQsIGEvYi8gc2hvdWxkICpub3QqXG4gIC8vIG1hdGNoIFwiYS9iLypcIiwgZXZlbiB0aG91Z2ggXCJcIiBtYXRjaGVzIGFnYWluc3QgdGhlXG4gIC8vIFteL10qPyBwYXR0ZXJuLCBleGNlcHQgaW4gcGFydGlhbCBtb2RlLCB3aGVyZSBpdCBtaWdodFxuICAvLyBzaW1wbHkgbm90IGJlIHJlYWNoZWQgeWV0LlxuICAvLyBIb3dldmVyLCBhL2IvIHNob3VsZCBzdGlsbCBzYXRpc2Z5IGEvKlxuXG4gIC8vIG5vdyBlaXRoZXIgd2UgZmVsbCBvZmYgdGhlIGVuZCBvZiB0aGUgcGF0dGVybiwgb3Igd2UncmUgZG9uZS5cbiAgaWYgKGZpID09PSBmbCAmJiBwaSA9PT0gcGwpIHtcbiAgICAvLyByYW4gb3V0IG9mIHBhdHRlcm4gYW5kIGZpbGVuYW1lIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAgLy8gYW4gZXhhY3QgaGl0IVxuICAgIHJldHVybiB0cnVlXG4gIH0gZWxzZSBpZiAoZmkgPT09IGZsKSB7XG4gICAgLy8gcmFuIG91dCBvZiBmaWxlLCBidXQgc3RpbGwgaGFkIHBhdHRlcm4gbGVmdC5cbiAgICAvLyB0aGlzIGlzIG9rIGlmIHdlJ3JlIGRvaW5nIHRoZSBtYXRjaCBhcyBwYXJ0IG9mXG4gICAgLy8gYSBnbG9iIGZzIHRyYXZlcnNhbC5cbiAgICByZXR1cm4gcGFydGlhbFxuICB9IGVsc2UgaWYgKHBpID09PSBwbCkge1xuICAgIC8vIHJhbiBvdXQgb2YgcGF0dGVybiwgc3RpbGwgaGF2ZSBmaWxlIGxlZnQuXG4gICAgLy8gdGhpcyBpcyBvbmx5IGFjY2VwdGFibGUgaWYgd2UncmUgb24gdGhlIHZlcnkgbGFzdFxuICAgIC8vIGVtcHR5IHNlZ21lbnQgb2YgYSBmaWxlIHdpdGggYSB0cmFpbGluZyBzbGFzaC5cbiAgICAvLyBhLyogc2hvdWxkIG1hdGNoIGEvYi9cbiAgICB2YXIgZW1wdHlGaWxlRW5kID0gKGZpID09PSBmbCAtIDEpICYmIChmaWxlW2ZpXSA9PT0gJycpXG4gICAgcmV0dXJuIGVtcHR5RmlsZUVuZFxuICB9XG5cbiAgLy8gc2hvdWxkIGJlIHVucmVhY2hhYmxlLlxuICB0aHJvdyBuZXcgRXJyb3IoJ3d0Zj8nKVxufVxuXG4vLyByZXBsYWNlIHN0dWZmIGxpa2UgXFwqIHdpdGggKlxuZnVuY3Rpb24gZ2xvYlVuZXNjYXBlIChzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoL1xcXFwoLikvZywgJyQxJylcbn1cblxuZnVuY3Rpb24gcmVnRXhwRXNjYXBlIChzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJylcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImV2ZW50c1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInV0aWxcIik7IiwidmFyIGNvbmNhdE1hcCA9IHJlcXVpcmUoJ2NvbmNhdC1tYXAnKTtcbnZhciBiYWxhbmNlZCA9IHJlcXVpcmUoJ2JhbGFuY2VkLW1hdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwYW5kVG9wO1xuXG52YXIgZXNjU2xhc2ggPSAnXFwwU0xBU0gnK01hdGgucmFuZG9tKCkrJ1xcMCc7XG52YXIgZXNjT3BlbiA9ICdcXDBPUEVOJytNYXRoLnJhbmRvbSgpKydcXDAnO1xudmFyIGVzY0Nsb3NlID0gJ1xcMENMT1NFJytNYXRoLnJhbmRvbSgpKydcXDAnO1xudmFyIGVzY0NvbW1hID0gJ1xcMENPTU1BJytNYXRoLnJhbmRvbSgpKydcXDAnO1xudmFyIGVzY1BlcmlvZCA9ICdcXDBQRVJJT0QnK01hdGgucmFuZG9tKCkrJ1xcMCc7XG5cbmZ1bmN0aW9uIG51bWVyaWMoc3RyKSB7XG4gIHJldHVybiBwYXJzZUludChzdHIsIDEwKSA9PSBzdHJcbiAgICA/IHBhcnNlSW50KHN0ciwgMTApXG4gICAgOiBzdHIuY2hhckNvZGVBdCgwKTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlQnJhY2VzKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KCdcXFxcXFxcXCcpLmpvaW4oZXNjU2xhc2gpXG4gICAgICAgICAgICAuc3BsaXQoJ1xcXFx7Jykuam9pbihlc2NPcGVuKVxuICAgICAgICAgICAgLnNwbGl0KCdcXFxcfScpLmpvaW4oZXNjQ2xvc2UpXG4gICAgICAgICAgICAuc3BsaXQoJ1xcXFwsJykuam9pbihlc2NDb21tYSlcbiAgICAgICAgICAgIC5zcGxpdCgnXFxcXC4nKS5qb2luKGVzY1BlcmlvZCk7XG59XG5cbmZ1bmN0aW9uIHVuZXNjYXBlQnJhY2VzKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KGVzY1NsYXNoKS5qb2luKCdcXFxcJylcbiAgICAgICAgICAgIC5zcGxpdChlc2NPcGVuKS5qb2luKCd7JylcbiAgICAgICAgICAgIC5zcGxpdChlc2NDbG9zZSkuam9pbignfScpXG4gICAgICAgICAgICAuc3BsaXQoZXNjQ29tbWEpLmpvaW4oJywnKVxuICAgICAgICAgICAgLnNwbGl0KGVzY1BlcmlvZCkuam9pbignLicpO1xufVxuXG5cbi8vIEJhc2ljYWxseSBqdXN0IHN0ci5zcGxpdChcIixcIiksIGJ1dCBoYW5kbGluZyBjYXNlc1xuLy8gd2hlcmUgd2UgaGF2ZSBuZXN0ZWQgYnJhY2VkIHNlY3Rpb25zLCB3aGljaCBzaG91bGQgYmVcbi8vIHRyZWF0ZWQgYXMgaW5kaXZpZHVhbCBtZW1iZXJzLCBsaWtlIHthLHtiLGN9LGR9XG5mdW5jdGlvbiBwYXJzZUNvbW1hUGFydHMoc3RyKSB7XG4gIGlmICghc3RyKVxuICAgIHJldHVybiBbJyddO1xuXG4gIHZhciBwYXJ0cyA9IFtdO1xuICB2YXIgbSA9IGJhbGFuY2VkKCd7JywgJ30nLCBzdHIpO1xuXG4gIGlmICghbSlcbiAgICByZXR1cm4gc3RyLnNwbGl0KCcsJyk7XG5cbiAgdmFyIHByZSA9IG0ucHJlO1xuICB2YXIgYm9keSA9IG0uYm9keTtcbiAgdmFyIHBvc3QgPSBtLnBvc3Q7XG4gIHZhciBwID0gcHJlLnNwbGl0KCcsJyk7XG5cbiAgcFtwLmxlbmd0aC0xXSArPSAneycgKyBib2R5ICsgJ30nO1xuICB2YXIgcG9zdFBhcnRzID0gcGFyc2VDb21tYVBhcnRzKHBvc3QpO1xuICBpZiAocG9zdC5sZW5ndGgpIHtcbiAgICBwW3AubGVuZ3RoLTFdICs9IHBvc3RQYXJ0cy5zaGlmdCgpO1xuICAgIHAucHVzaC5hcHBseShwLCBwb3N0UGFydHMpO1xuICB9XG5cbiAgcGFydHMucHVzaC5hcHBseShwYXJ0cywgcCk7XG5cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG5mdW5jdGlvbiBleHBhbmRUb3Aoc3RyKSB7XG4gIGlmICghc3RyKVxuICAgIHJldHVybiBbXTtcblxuICAvLyBJIGRvbid0IGtub3cgd2h5IEJhc2ggNC4zIGRvZXMgdGhpcywgYnV0IGl0IGRvZXMuXG4gIC8vIEFueXRoaW5nIHN0YXJ0aW5nIHdpdGgge30gd2lsbCBoYXZlIHRoZSBmaXJzdCB0d28gYnl0ZXMgcHJlc2VydmVkXG4gIC8vIGJ1dCAqb25seSogYXQgdGhlIHRvcCBsZXZlbCwgc28ge30sYX1iIHdpbGwgbm90IGV4cGFuZCB0byBhbnl0aGluZyxcbiAgLy8gYnV0IGF7fSxifWMgd2lsbCBiZSBleHBhbmRlZCB0byBbYX1jLGFiY10uXG4gIC8vIE9uZSBjb3VsZCBhcmd1ZSB0aGF0IHRoaXMgaXMgYSBidWcgaW4gQmFzaCwgYnV0IHNpbmNlIHRoZSBnb2FsIG9mXG4gIC8vIHRoaXMgbW9kdWxlIGlzIHRvIG1hdGNoIEJhc2gncyBydWxlcywgd2UgZXNjYXBlIGEgbGVhZGluZyB7fVxuICBpZiAoc3RyLnN1YnN0cigwLCAyKSA9PT0gJ3t9Jykge1xuICAgIHN0ciA9ICdcXFxce1xcXFx9JyArIHN0ci5zdWJzdHIoMik7XG4gIH1cblxuICByZXR1cm4gZXhwYW5kKGVzY2FwZUJyYWNlcyhzdHIpLCB0cnVlKS5tYXAodW5lc2NhcGVCcmFjZXMpO1xufVxuXG5mdW5jdGlvbiBpZGVudGl0eShlKSB7XG4gIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBlbWJyYWNlKHN0cikge1xuICByZXR1cm4gJ3snICsgc3RyICsgJ30nO1xufVxuZnVuY3Rpb24gaXNQYWRkZWQoZWwpIHtcbiAgcmV0dXJuIC9eLT8wXFxkLy50ZXN0KGVsKTtcbn1cblxuZnVuY3Rpb24gbHRlKGksIHkpIHtcbiAgcmV0dXJuIGkgPD0geTtcbn1cbmZ1bmN0aW9uIGd0ZShpLCB5KSB7XG4gIHJldHVybiBpID49IHk7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZChzdHIsIGlzVG9wKSB7XG4gIHZhciBleHBhbnNpb25zID0gW107XG5cbiAgdmFyIG0gPSBiYWxhbmNlZCgneycsICd9Jywgc3RyKTtcbiAgaWYgKCFtIHx8IC9cXCQkLy50ZXN0KG0ucHJlKSkgcmV0dXJuIFtzdHJdO1xuXG4gIHZhciBpc051bWVyaWNTZXF1ZW5jZSA9IC9eLT9cXGQrXFwuXFwuLT9cXGQrKD86XFwuXFwuLT9cXGQrKT8kLy50ZXN0KG0uYm9keSk7XG4gIHZhciBpc0FscGhhU2VxdWVuY2UgPSAvXlthLXpBLVpdXFwuXFwuW2EtekEtWl0oPzpcXC5cXC4tP1xcZCspPyQvLnRlc3QobS5ib2R5KTtcbiAgdmFyIGlzU2VxdWVuY2UgPSBpc051bWVyaWNTZXF1ZW5jZSB8fCBpc0FscGhhU2VxdWVuY2U7XG4gIHZhciBpc09wdGlvbnMgPSBtLmJvZHkuaW5kZXhPZignLCcpID49IDA7XG4gIGlmICghaXNTZXF1ZW5jZSAmJiAhaXNPcHRpb25zKSB7XG4gICAgLy8ge2F9LGJ9XG4gICAgaWYgKG0ucG9zdC5tYXRjaCgvLC4qXFx9LykpIHtcbiAgICAgIHN0ciA9IG0ucHJlICsgJ3snICsgbS5ib2R5ICsgZXNjQ2xvc2UgKyBtLnBvc3Q7XG4gICAgICByZXR1cm4gZXhwYW5kKHN0cik7XG4gICAgfVxuICAgIHJldHVybiBbc3RyXTtcbiAgfVxuXG4gIHZhciBuO1xuICBpZiAoaXNTZXF1ZW5jZSkge1xuICAgIG4gPSBtLmJvZHkuc3BsaXQoL1xcLlxcLi8pO1xuICB9IGVsc2Uge1xuICAgIG4gPSBwYXJzZUNvbW1hUGFydHMobS5ib2R5KTtcbiAgICBpZiAobi5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIHh7e2EsYn19eSA9PT4geHthfXkgeHtifXlcbiAgICAgIG4gPSBleHBhbmQoblswXSwgZmFsc2UpLm1hcChlbWJyYWNlKTtcbiAgICAgIGlmIChuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YXIgcG9zdCA9IG0ucG9zdC5sZW5ndGhcbiAgICAgICAgICA/IGV4cGFuZChtLnBvc3QsIGZhbHNlKVxuICAgICAgICAgIDogWycnXTtcbiAgICAgICAgcmV0dXJuIHBvc3QubWFwKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICByZXR1cm4gbS5wcmUgKyBuWzBdICsgcDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gYXQgdGhpcyBwb2ludCwgbiBpcyB0aGUgcGFydHMsIGFuZCB3ZSBrbm93IGl0J3Mgbm90IGEgY29tbWEgc2V0XG4gIC8vIHdpdGggYSBzaW5nbGUgZW50cnkuXG5cbiAgLy8gbm8gbmVlZCB0byBleHBhbmQgcHJlLCBzaW5jZSBpdCBpcyBndWFyYW50ZWVkIHRvIGJlIGZyZWUgb2YgYnJhY2Utc2V0c1xuICB2YXIgcHJlID0gbS5wcmU7XG4gIHZhciBwb3N0ID0gbS5wb3N0Lmxlbmd0aFxuICAgID8gZXhwYW5kKG0ucG9zdCwgZmFsc2UpXG4gICAgOiBbJyddO1xuXG4gIHZhciBOO1xuXG4gIGlmIChpc1NlcXVlbmNlKSB7XG4gICAgdmFyIHggPSBudW1lcmljKG5bMF0pO1xuICAgIHZhciB5ID0gbnVtZXJpYyhuWzFdKTtcbiAgICB2YXIgd2lkdGggPSBNYXRoLm1heChuWzBdLmxlbmd0aCwgblsxXS5sZW5ndGgpXG4gICAgdmFyIGluY3IgPSBuLmxlbmd0aCA9PSAzXG4gICAgICA/IE1hdGguYWJzKG51bWVyaWMoblsyXSkpXG4gICAgICA6IDE7XG4gICAgdmFyIHRlc3QgPSBsdGU7XG4gICAgdmFyIHJldmVyc2UgPSB5IDwgeDtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgaW5jciAqPSAtMTtcbiAgICAgIHRlc3QgPSBndGU7XG4gICAgfVxuICAgIHZhciBwYWQgPSBuLnNvbWUoaXNQYWRkZWQpO1xuXG4gICAgTiA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IHg7IHRlc3QoaSwgeSk7IGkgKz0gaW5jcikge1xuICAgICAgdmFyIGM7XG4gICAgICBpZiAoaXNBbHBoYVNlcXVlbmNlKSB7XG4gICAgICAgIGMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpO1xuICAgICAgICBpZiAoYyA9PT0gJ1xcXFwnKVxuICAgICAgICAgIGMgPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGMgPSBTdHJpbmcoaSk7XG4gICAgICAgIGlmIChwYWQpIHtcbiAgICAgICAgICB2YXIgbmVlZCA9IHdpZHRoIC0gYy5sZW5ndGg7XG4gICAgICAgICAgaWYgKG5lZWQgPiAwKSB7XG4gICAgICAgICAgICB2YXIgeiA9IG5ldyBBcnJheShuZWVkICsgMSkuam9pbignMCcpO1xuICAgICAgICAgICAgaWYgKGkgPCAwKVxuICAgICAgICAgICAgICBjID0gJy0nICsgeiArIGMuc2xpY2UoMSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIGMgPSB6ICsgYztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIE4ucHVzaChjKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgTiA9IGNvbmNhdE1hcChuLCBmdW5jdGlvbihlbCkgeyByZXR1cm4gZXhwYW5kKGVsLCBmYWxzZSkgfSk7XG4gIH1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IE4ubGVuZ3RoOyBqKyspIHtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHBvc3QubGVuZ3RoOyBrKyspIHtcbiAgICAgIHZhciBleHBhbnNpb24gPSBwcmUgKyBOW2pdICsgcG9zdFtrXTtcbiAgICAgIGlmICghaXNUb3AgfHwgaXNTZXF1ZW5jZSB8fCBleHBhbnNpb24pXG4gICAgICAgIGV4cGFuc2lvbnMucHVzaChleHBhbnNpb24pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBleHBhbnNpb25zO1xufVxuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4cywgZm4pIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgeCA9IGZuKHhzW2ldLCBpKTtcbiAgICAgICAgaWYgKGlzQXJyYXkoeCkpIHJlcy5wdXNoLmFwcGx5KHJlcywgeCk7XG4gICAgICAgIGVsc2UgcmVzLnB1c2goeCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBiYWxhbmNlZDtcbmZ1bmN0aW9uIGJhbGFuY2VkKGEsIGIsIHN0cikge1xuICBpZiAoYSBpbnN0YW5jZW9mIFJlZ0V4cCkgYSA9IG1heWJlTWF0Y2goYSwgc3RyKTtcbiAgaWYgKGIgaW5zdGFuY2VvZiBSZWdFeHApIGIgPSBtYXliZU1hdGNoKGIsIHN0cik7XG5cbiAgdmFyIHIgPSByYW5nZShhLCBiLCBzdHIpO1xuXG4gIHJldHVybiByICYmIHtcbiAgICBzdGFydDogclswXSxcbiAgICBlbmQ6IHJbMV0sXG4gICAgcHJlOiBzdHIuc2xpY2UoMCwgclswXSksXG4gICAgYm9keTogc3RyLnNsaWNlKHJbMF0gKyBhLmxlbmd0aCwgclsxXSksXG4gICAgcG9zdDogc3RyLnNsaWNlKHJbMV0gKyBiLmxlbmd0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWF5YmVNYXRjaChyZWcsIHN0cikge1xuICB2YXIgbSA9IHN0ci5tYXRjaChyZWcpO1xuICByZXR1cm4gbSA/IG1bMF0gOiBudWxsO1xufVxuXG5iYWxhbmNlZC5yYW5nZSA9IHJhbmdlO1xuZnVuY3Rpb24gcmFuZ2UoYSwgYiwgc3RyKSB7XG4gIHZhciBiZWdzLCBiZWcsIGxlZnQsIHJpZ2h0LCByZXN1bHQ7XG4gIHZhciBhaSA9IHN0ci5pbmRleE9mKGEpO1xuICB2YXIgYmkgPSBzdHIuaW5kZXhPZihiLCBhaSArIDEpO1xuICB2YXIgaSA9IGFpO1xuXG4gIGlmIChhaSA+PSAwICYmIGJpID4gMCkge1xuICAgIGJlZ3MgPSBbXTtcbiAgICBsZWZ0ID0gc3RyLmxlbmd0aDtcblxuICAgIHdoaWxlIChpID49IDAgJiYgIXJlc3VsdCkge1xuICAgICAgaWYgKGkgPT0gYWkpIHtcbiAgICAgICAgYmVncy5wdXNoKGkpO1xuICAgICAgICBhaSA9IHN0ci5pbmRleE9mKGEsIGkgKyAxKTtcbiAgICAgIH0gZWxzZSBpZiAoYmVncy5sZW5ndGggPT0gMSkge1xuICAgICAgICByZXN1bHQgPSBbIGJlZ3MucG9wKCksIGJpIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWcgPSBiZWdzLnBvcCgpO1xuICAgICAgICBpZiAoYmVnIDwgbGVmdCkge1xuICAgICAgICAgIGxlZnQgPSBiZWc7XG4gICAgICAgICAgcmlnaHQgPSBiaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJpID0gc3RyLmluZGV4T2YoYiwgaSArIDEpO1xuICAgICAgfVxuXG4gICAgICBpID0gYWkgPCBiaSAmJiBhaSA+PSAwID8gYWkgOiBiaTtcbiAgICB9XG5cbiAgICBpZiAoYmVncy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCA9IFsgbGVmdCwgcmlnaHQgXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdmFybmFtZSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNhbWVsYmFjazogY2FtZWxiYWNrLFxuICAgIGNhbWVsY2FzZTogY2FtZWxjYXNlLFxuICAgIGRhc2g6IGRhc2gsXG4gICAgdW5kZXJzY29yZTogdW5kZXJzY29yZSxcbiAgICBzcGxpdDogc3BsaXRcbn07XG5cbi8vIENvbnZlcnQgYSB2YXJpYWJsZSBuYW1lIHN0cmluZyB0byBjYW1lbGJhY2sgc3R5bGVcbmZ1bmN0aW9uIGNhbWVsYmFjayAobmFtZSkge1xuICAgIHZhciBwYXJ0cyA9IHZhcm5hbWUuc3BsaXQobmFtZSk7XG4gICAgcmV0dXJuIHBhcnRzLnNoaWZ0KCkgKyB0aXRsZUNhc2VXb3JkcyhwYXJ0cykuam9pbignJyk7XG59XG5cbi8vIENvbnZlcnQgYSB2YXJpYWJsZSBuYW1lIHN0cmluZyB0byBjYW1lbGNhc2Ugc3R5bGVcbmZ1bmN0aW9uIGNhbWVsY2FzZSAobmFtZSkge1xuICAgIHZhciBwYXJ0cyA9IHZhcm5hbWUuc3BsaXQobmFtZSk7XG4gICAgcmV0dXJuIHRpdGxlQ2FzZVdvcmRzKHBhcnRzKS5qb2luKCcnKTtcbn1cblxuLy8gQ29udmVydCBhIHZhcmlhYmxlIG5hbWUgc3RyaW5nIHRvIGRhc2gtc2VwYXJhdGVkIHN0eWxlXG5mdW5jdGlvbiBkYXNoIChuYW1lKSB7XG4gICAgcmV0dXJuIHZhcm5hbWUuc3BsaXQobmFtZSkuam9pbignLScpO1xufVxuXG4vLyBDb252ZXJ0IGEgdmFyaWFibGUgbmFtZSBzdHJpbmcgdG8gdW5kZXJzY29yZS1zZXBhcmF0ZWQgc3R5bGVcbmZ1bmN0aW9uIHVuZGVyc2NvcmUgKG5hbWUpIHtcbiAgICByZXR1cm4gdmFybmFtZS5zcGxpdChuYW1lKS5qb2luKCdfJyk7XG59XG5cbi8vIFNwbGl0IGEgdmFyaWFibGUgbmFtZSBzdHJpbmcgaW50byBwYXJ0c1xuZnVuY3Rpb24gc3BsaXQgKG5hbWUpIHtcbiAgICBuYW1lID0gbmFtZVxuICAgICAgICAucmVwbGFjZSgvW15hLXowLTldKy9naSwgJyAnKVxuICAgICAgICAucmVwbGFjZSgvKFtBLVowLTldKykoW0EtWl1bYS16XSkvZywgJyQxICQyJylcbiAgICAgICAgLnJlcGxhY2UoLyhbYS16MC05XSkoW0EtWl0pL2csICckMSAkMicpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB0cmltKG5hbWUpLnNwbGl0KC9cXHMrLyk7XG59XG5cbi8vIFRyaW0gd2hpdGVzcGFjZSBmcm9tIGEgc3RyaW5nXG5mdW5jdGlvbiB0cmltIChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cblxuLy8gQ29udmVydCBhbGwgc3RyaW5ncyBpbiBhbiBhcnJheSB0byB0aXRsZS1jYXNlXG5mdW5jdGlvbiB0aXRsZUNhc2VXb3JkcyAocGFydHMpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpICsrKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChwYXJ0c1tpXS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHBhcnRzW2ldLnN1YnN0cigxKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xufVxuIiwiZXhwb3J0IGVudW0gSUVudHJ5VHlwZSB7XG4gIEZJTEUgPSAxLFxuICBESVJFQ1RPUlkgPSAyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVudHJ5IHtcbiAgdHlwZTogSUVudHJ5VHlwZTtcbiAgZmlsZW5hbWU6IHN0cmluZztcbiAgYmFzZWRpcjogc3RyaW5nO1xuICBleHBvcnRlZE5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQXNzZXRzT3B0aW9ucyB7XG4gIG1vZHVsZTogXCJlczZcIiB8IFwiY29tbW9uanNcIjtcbiAgZmlsZXR5cGU6IFwidHNcIiB8IFwianNcIjtcbiAgbWF0Y2g6IHN0cmluZztcbiAgYXNzZXRzUGF0aExpc3Q6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdEFzc2V0c09wdGlvbnM6IElBc3NldHNPcHRpb25zID0ge1xuICBtb2R1bGU6IFwiZXM2XCIsXG4gIGZpbGV0eXBlOiBcInRzXCIsXG4gIG1hdGNoOiBcIiouKyhwbmd8anBnfHBuZ3xzdmd8cGRmfGdpZnxtb3Z8aWNvfHhtbClcIixcbiAgYXNzZXRzUGF0aExpc3Q6IFtcIi4vYXNzZXRzXCJdXG59O1xuIiwiaW1wb3J0IHtcbiAgSUVudHJ5LFxuICBJRW50cnlUeXBlLFxuICBkZWZhdWx0QXNzZXRzT3B0aW9ucyxcbiAgSUFzc2V0c09wdGlvbnNcbn0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgbWluaW1hdGNoIGZyb20gXCJtaW5pbWF0Y2hcIjtcbi8vIE5vIHR5cGUgZGVmaW5lZCBmaWxlXG5jb25zdCB2YXJuYW1lID0gcmVxdWlyZShcInZhcm5hbWVcIik7XG5cbmV4cG9ydCBjbGFzcyBQYXJzZXIge1xuICBwdWJsaWMgc3RhdGljIHBhcnNlRGlyZWN0b3J5KFxuICAgIGRpcnBhdGg6IHN0cmluZyxcbiAgICBvcHRpb25zOiBJQXNzZXRzT3B0aW9ucyA9IGRlZmF1bHRBc3NldHNPcHRpb25zXG4gICk6IElFbnRyeVtdIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgZGlyU3RhdHM7XG4gICAgdHJ5IHtcbiAgICAgIGRpclN0YXRzID0gZnMubHN0YXRTeW5jKGRpcnBhdGgpO1xuXG4gICAgICBpZiAoIWRpclN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbGVuYW1lcyA9IGZzLnJlYWRkaXJTeW5jKGRpcnBhdGgpO1xuXG4gICAgcmV0dXJuIGZpbGVuYW1lc1xuICAgICAgLm1hcChmaWxlbmFtZSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXRzID0gZnMubHN0YXRTeW5jKHBhdGgucmVzb2x2ZShkaXJwYXRoLCBmaWxlbmFtZSkpO1xuICAgICAgICByZXR1cm4geyBmaWxlbmFtZSwgc3RhdHMgfTtcbiAgICAgIH0pXG4gICAgICAuZmlsdGVyKCh7IGZpbGVuYW1lLCBzdGF0cyB9KSA9PiB7XG4gICAgICAgIC8vIE9ubHkgcHJvY2VzcyByZWd1bGFyIGZpbGUgb3IgZGlyZWN0b3J5XG4gICAgICAgIGlmIChzdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhdHMuaXNGaWxlKCkpIHtcbiAgICAgICAgICAvLyBpZiB0eXBlIGlzIGZpbGUsIGNoZWNrIG1hdGNoIG9wdGlvbiB0byBkZXRlcm1pbmUgaWYgbmVlZFxuICAgICAgICAgIHJldHVybiBtaW5pbWF0Y2goZmlsZW5hbWUsIG9wdGlvbnMubWF0Y2gsIHsgbWF0Y2hCYXNlOiB0cnVlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSlcbiAgICAgIC5tYXAoKHsgZmlsZW5hbWUsIHN0YXRzIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBzdGF0cy5pc0RpcmVjdG9yeSgpID8gSUVudHJ5VHlwZS5ESVJFQ1RPUlkgOiBJRW50cnlUeXBlLkZJTEUsXG4gICAgICAgICAgZmlsZW5hbWUsXG4gICAgICAgICAgYmFzZWRpcjogZGlycGF0aCxcbiAgICAgICAgICBleHBvcnRlZE5hbWU6IHZhcm5hbWUuY2FtZWxiYWNrKGZpbGVuYW1lKVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IElBc3NldHNPcHRpb25zLCBkZWZhdWx0QXNzZXRzT3B0aW9ucywgSUVudHJ5VHlwZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBHZW5lcmF0b3IgfSBmcm9tIFwiLi9nZW5lcmF0b3JcIjtcbmltcG9ydCB7IFBhcnNlciB9IGZyb20gXCIuL3BhcnNlclwiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUluZGV4RmlsZUZvckRpcmVjdG9yeSA9IChcbiAgZGlycGF0aDogc3RyaW5nLFxuICByZWN1cnNpdmU6IGJvb2xlYW4sXG4gIG9wdGlvbnM6IElBc3NldHNPcHRpb25zID0gZGVmYXVsdEFzc2V0c09wdGlvbnMsXG4gIHZlcmJvc2U6IGJvb2xlYW4gPSBmYWxzZVxuKSA9PiB7XG4gIGNvbnN0IGVudHJ5TGlzdCA9IFBhcnNlci5wYXJzZURpcmVjdG9yeShkaXJwYXRoLCBvcHRpb25zKTtcblxuICBpZiAoZW50cnlMaXN0KSB7XG4gICAgbGV0IGluZGV4RmlsZW5hbWUgPSBcImluZGV4XCI7XG4gICAgY29uc3QgaW5kZXhGaWxlQ29udGVudCA9IEdlbmVyYXRvci5nZW5lcmF0ZUNvbnRlbnRCeUVudGVyeUxpc3QoXG4gICAgICBlbnRyeUxpc3QsXG4gICAgICBvcHRpb25zXG4gICAgKTtcblxuICAgIGlmIChvcHRpb25zLmZpbGV0eXBlID09PSBcInRzXCIpIHtcbiAgICAgIGluZGV4RmlsZW5hbWUgKz0gXCIudHNcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5kZXhGaWxlbmFtZSArPSBcIi5qc1wiO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4RmlsZUZ1bGxQYXRoID0gcGF0aC5yZXNvbHZlKGRpcnBhdGgsIGluZGV4RmlsZW5hbWUpO1xuICAgIGZzLndyaXRlRmlsZVN5bmMoaW5kZXhGaWxlRnVsbFBhdGgsIGluZGV4RmlsZUNvbnRlbnQpO1xuICAgIGlmICh2ZXJib3NlKSB7XG4gICAgICBjb25zb2xlLmxvZyhgR2VuZXJhdGVkICR7aW5kZXhGaWxlbmFtZX0gb24gZGlyZWN0b3J5OiAke2RpcnBhdGh9YCk7XG4gICAgfVxuXG4gICAgLy8gaWYgcmVjdXJzaXZlIHNldCwgcmVjdXJzaXZlbHkgcHJvY2VzcyBhbGwgc3ViLWRpcmVjdG9yeVxuICAgIGlmIChyZWN1cnNpdmUpIHtcbiAgICAgIGVudHJ5TGlzdFxuICAgICAgICAuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LnR5cGUgPT09IElFbnRyeVR5cGUuRElSRUNUT1JZKVxuICAgICAgICAuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgICAgZ2VuZXJhdGVJbmRleEZpbGVGb3JEaXJlY3RvcnkoXG4gICAgICAgICAgICBwYXRoLnJlc29sdmUoZGlycGF0aCwgZW50cnkuZmlsZW5hbWUpLFxuICAgICAgICAgICAgcmVjdXJzaXZlLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIHZlcmJvc2VcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG4iLCJpbXBvcnQge1xuICBJRW50cnksXG4gIElFbnRyeVR5cGUsXG4gIElBc3NldHNPcHRpb25zLFxuICBkZWZhdWx0QXNzZXRzT3B0aW9uc1xufSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgY2xhc3MgR2VuZXJhdG9yIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBlbnRyeUxpc3QgZW50cnkgbGlzdCB0byBwcm9jZXNzIGluIHRoaXMgcGF0aFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZW5lcmF0ZUNvbnRlbnRCeUVudGVyeUxpc3QoXG4gICAgZW50cnlMaXN0OiBJRW50cnlbXSxcbiAgICBvcHRpb25zOiBJQXNzZXRzT3B0aW9ucyA9IGRlZmF1bHRBc3NldHNPcHRpb25zXG4gICkge1xuICAgIGNvbnN0IHN5bWJvbHNUb0V4cG9ydDogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBpbXBvcnRMaW5lczogc3RyaW5nW10gPSBbXTtcblxuICAgIC8vIHNvcnQgZmlyc3RcbiAgICBlbnRyeUxpc3RcbiAgICAgIC5zb3J0KChlbnRyeSwgZW50cnlOZXh0KSA9PiBlbnRyeS50eXBlIC0gZW50cnlOZXh0LnR5cGUpXG4gICAgICAuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgIHN5bWJvbHNUb0V4cG9ydC5wdXNoKGVudHJ5LmV4cG9ydGVkTmFtZSk7XG4gICAgICAgIGlmIChvcHRpb25zLm1vZHVsZSA9PSBcImVzNlwiKSB7XG4gICAgICAgICAgaW1wb3J0TGluZXMucHVzaChcbiAgICAgICAgICAgIGBpbXBvcnQgJHtlbnRyeS5leHBvcnRlZE5hbWV9IGZyb20gJy4vJHtlbnRyeS5maWxlbmFtZX0nO2BcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMubW9kdWxlID09IFwiY29tbW9uanNcIikge1xuICAgICAgICAgIGltcG9ydExpbmVzLnB1c2goXG4gICAgICAgICAgICBgY29uc3QgJHtlbnRyeS5leHBvcnRlZE5hbWV9ID0gcmVxdWlyZSgnLi8ke2VudHJ5LmZpbGVuYW1lfScpO2BcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIGNvbnN0IGltcG9ydEJsb2NrID0gaW1wb3J0TGluZXMuam9pbihcIlxcblwiKTtcbiAgICBsZXQgZXhwb3J0QmxvY2s7XG5cbiAgICBpZiAob3B0aW9ucy5tb2R1bGUgPT09IFwiZXM2XCIpIHtcbiAgICAgIGV4cG9ydEJsb2NrID0gYGV4cG9ydCBkZWZhdWx0IHtcbiAgICAke3N5bWJvbHNUb0V4cG9ydC5qb2luKFwiLFxcbiAgICBcIil9XG59O2A7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLm1vZHVsZSA9PT0gXCJjb21tb25qc1wiKSB7XG4gICAgICBleHBvcnRCbG9jayA9IGBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAke3N5bWJvbHNUb0V4cG9ydC5qb2luKFwiLFxcbiAgICBcIil9XG59O2A7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtpbXBvcnRCbG9jaywgXCJcXG5cIiwgZXhwb3J0QmxvY2tdLmpvaW4oXCJcXG5cIik7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCJhc3NldHMtY29yZS9zcmMvY29uZmlnXCI7XG5pbXBvcnQgKiBhcyBwcm9ncmFtIGZyb20gXCJjb21tYW5kZXJcIjtcbmltcG9ydCB7IGdlbmVyYXRlSW5kZXhGaWxlRm9yRGlyZWN0b3J5IH0gZnJvbSBcImFzc2V0cy1jb3JlL3NyYy9pbmRleFwiO1xuaW1wb3J0IHsgSUFzc2V0c09wdGlvbnMsIGRlZmF1bHRBc3NldHNPcHRpb25zIH0gZnJvbSBcImFzc2V0cy1jb3JlL3NyYy90eXBlc1wiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5cbmxldCBkaXJlY3Rvcnk7XG5cbnByb2dyYW1cbiAgLmFyZ3VtZW50cyhcIjxkaXJlY290cnk+XCIpXG4gIC5vcHRpb24oXCItbSwgLS1tb2R1bGUgPG1vZHVsZT5cIiwgXCJ1c2Ugd2hpY2ggSlMgbW9kdWxlIHN5c3RlbXM6IGVzNi9jb21tb25qc1wiKVxuICAub3B0aW9uKFwiLXYsIC0tdmVyYm9zZVwiLCBcIm91cHV0IGRldGFpbCBtZXNzYWdlIHRvIHN0ZG91dFwiKVxuICAub3B0aW9uKFwiLXQsIC0tZmlsZXR5cGUgPGZpbGV0eXBlPlwiLCBcIndoaWNoIGZpbGUgZXh0aW9uc2lvbiB0byB1c2U6IHRzL2pzXCIpXG4gIC5vcHRpb24oXG4gICAgXCItYywgLS1jb25maWcgPGNvbmZpZz5cIixcbiAgICBcImNvbmZpZyBmaWxlIHRvIHJlYWQuIGRlZmF1bHQgPGN3ZD4vLmFzc2V0c3JjXCIsXG4gICAgXCIuL2Fzc2V0c3JjXCJcbiAgKVxuICAub3B0aW9uKFxuICAgIFwiLW0sIC0tbWF0Y2ggPG1hdGNoPlwiLFxuICAgIFwiV2hpY2ggZmlsZXMgdG8gaW1wb3J0LiBpbiBtaW5pbWF0Y2ggZm9ybWF0OiBlZy4gKi4rKHBuZy9zdmcpXCJcbiAgKVxuICAuYWN0aW9uKHJvb3REaXJlY290cnkgPT4ge1xuICAgIGRpcmVjdG9yeSA9IHJvb3REaXJlY290cnk7XG4gIH0pXG4gIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG4vLyBjb25maWcgcHJpb3JpdHkgY2xpIG9wdGlvbnMgPiBjb25maWdfZmlsZSA+IGRlZmF1bHRfdmFsdWVcblxubGV0IG9wdGlvbnM6IElBc3NldHNPcHRpb25zID0gZGVmYXVsdEFzc2V0c09wdGlvbnM7XG5cbmlmIChwcm9ncmFtLmNvbmZpZyAhPT0gdW5kZWZpbmVkKSB7XG4gIHRyeSB7XG4gICAgaWYgKGZzLmxzdGF0U3luYyhwcm9ncmFtLmNvbmZpZykuaXNGaWxlKCkpIHtcbiAgICAgIGlmIChwcm9ncmFtLnZlcmJvc2UpIHtcbiAgICAgICAgY29uc29sZS5sb2coYENvbmZpZyBmaWxlIGZvdW5kZWQhIGxvYWQgZnJvbSAke3Byb2dyYW0uY29uZmlnfWApO1xuICAgICAgICBvcHRpb25zID0gQ29uZmlnLmxvYWRPcHRpb25zRnJvbUNvbmZpZ0ZpbGUocHJvZ3JhbS5jb25maWcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvZ3JhbS52ZXJib3NlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ29uZmlnIGZpbGUgbm90IGZvdW5kZWQhIHVzZSBkZWZhdWx0IGNvbmZpZ1wiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocHJvZ3JhbS52ZXJib3NlKSB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgXCJDb25maWcgZmlsZSB5b3VyIHByb3ZpZGUgaGFzIHNvbWUgcHJvYmxlbXMsIGNhbiBub3QgbG9hZCwgZmFsbGJhY2sgdG8gdXNlIGRlZmF1bHQgY29uZmlnXCJcbiAgICAgICk7XG4gICAgfVxuICB9XG59IGVsc2Uge1xuICBpZiAocHJvZ3JhbS52ZXJib3NlKSB7XG4gICAgY29uc29sZS5sb2coXCJDb25maWcgZmlsZSBub3QgZm91bmRlZCEgdXNlIGRlZmF1bHQgY29uZmlnXCIpO1xuICB9XG59XG5cbmlmIChkaXJlY3RvcnkgIT09IHVuZGVmaW5lZCkge1xuICBvcHRpb25zID0ge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgYXNzZXRzUGF0aExpc3Q6IFtkaXJlY3RvcnldXG4gIH07XG59XG5cbmlmIChwcm9ncmFtLm1vZHVsZSkge1xuICBvcHRpb25zID0ge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgbW9kdWxlOiBwcm9ncmFtLm1vZHVsZVxuICB9O1xufVxuXG5pZiAocHJvZ3JhbS5maWxldHlwZSkge1xuICBvcHRpb25zID0ge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgZmlsZXR5cGU6IHByb2dyYW0uZmlsZXR5cGVcbiAgfTtcbn1cblxuaWYgKHByb2dyYW0ubWF0Y2gpIHtcbiAgb3B0aW9ucyA9IHtcbiAgICAuLi5vcHRpb25zLFxuICAgIG1hdGNoOiBwcm9ncmFtLm1hdGNoXG4gIH07XG59XG5cbmlmIChwcm9ncmFtLnZlcmJvc2UpIHtcbiAgY29uc29sZS5sb2coYE9wdGlvbnMgaXM6IFxcbiR7SlNPTi5zdHJpbmdpZnkob3B0aW9ucywgdW5kZWZpbmVkLCAyKX1gKTtcbn1cblxub3B0aW9ucy5hc3NldHNQYXRoTGlzdC5mb3JFYWNoKGFzc2V0c1BhdGggPT4ge1xuICAvLyBSdW4gZ2VuZXJhdGUgY29tbWFuZFxuICBnZW5lcmF0ZUluZGV4RmlsZUZvckRpcmVjdG9yeShhc3NldHNQYXRoLCB0cnVlLCBvcHRpb25zLCBwcm9ncmFtLnZlcmJvc2UpO1xufSk7XG4iLCJpbXBvcnQgeyBkZWZhdWx0QXNzZXRzT3B0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcblxuLyoqXG4gKiBMb2FkIGNvbmZpZyBmcm9tIGZpbGUsIGlmIGVycm9yIG9yIGZpbGUgaXMgbm90IGV4aXN0aW5nLCB1c2UgZGVmYXVsdCBvcHRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25maWcge1xuICBwdWJsaWMgc3RhdGljIGxvYWRPcHRpb25zRnJvbUNvbmZpZ0ZpbGUoY29uZmlnRmlsZU5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHN0YXRzID0gZnMubHN0YXRTeW5jKGNvbmZpZ0ZpbGVOYW1lKTtcbiAgICBpZiAoIXN0YXRzLmlzRmlsZSgpKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdEFzc2V0c09wdGlvbnM7XG4gICAgfVxuXG4gICAgY29uc3QgY29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhjb25maWdGaWxlTmFtZSwgeyBlbmNvZGluZzogXCJ1dGYtOFwiIH0pO1xuXG4gICAgaWYgKCFjb250ZW50KSB7XG4gICAgICByZXR1cm4gZGVmYXVsdEFzc2V0c09wdGlvbnM7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNvbmZpZ09iamVjdCA9IEpTT04ucGFyc2UoY29udGVudCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5kZWZhdWx0QXNzZXRzT3B0aW9ucyxcbiAgICAgICAgLi4uY29uZmlnT2JqZWN0XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0QXNzZXRzT3B0aW9ucztcbiAgICB9XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=