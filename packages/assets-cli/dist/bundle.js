!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=11)}([function(t,e,n){var r=n(4).EventEmitter,i=n(5).spawn,o=n(2),s=o.dirname,a=o.basename,u=n(1);function c(t,e){this.flags=t,this.required=t.indexOf("<")>=0,this.optional=t.indexOf("[")>=0,this.bool=-1===t.indexOf("-no-"),(t=t.split(/[ ,|]+/)).length>1&&!/^[[<]/.test(t[1])&&(this.short=t.shift()),this.long=t.shift(),this.description=e||""}function p(t){this.commands=[],this.options=[],this._execs={},this._allowUnknownOption=!1,this._args=[],this._name=t||""}function h(t,e){var n=Math.max(0,e-t.length);return t+Array(n+1).join(" ")}function l(t,e){e=e||[];for(var n=0;n<e.length;n++)"--help"!==e[n]&&"-h"!==e[n]||(t.outputHelp(),process.exit(0))}function f(t){var e=t.name+(!0===t.variadic?"...":"");return t.required?"<"+e+">":"["+e+"]"}function g(t){try{if(u.statSync(t).isFile())return!0}catch(t){return!1}}n(6).inherits(p,r),(e=t.exports=new p).Command=p,e.Option=c,c.prototype.name=function(){return this.long.replace("--","").replace("no-","")},c.prototype.attributeName=function(){return this.name().split("-").reduce(function(t,e){return t+e[0].toUpperCase()+e.slice(1)})},c.prototype.is=function(t){return this.short===t||this.long===t},p.prototype.command=function(t,e,n){"object"==typeof e&&null!==e&&(n=e,e=null),n=n||{};var r=t.split(/ +/),i=new p(r.shift());return e&&(i.description(e),this.executables=!0,this._execs[i._name]=!0,n.isDefault&&(this.defaultExecutable=i._name)),i._noHelp=!!n.noHelp,this.commands.push(i),i.parseExpectedArgs(r),i.parent=this,e?this:i},p.prototype.arguments=function(t){return this.parseExpectedArgs(t.split(/ +/))},p.prototype.addImplicitHelpCommand=function(){this.command("help [cmd]","display help for [cmd]")},p.prototype.parseExpectedArgs=function(t){if(t.length){var e=this;return t.forEach(function(t){var n={required:!1,name:"",variadic:!1};switch(t[0]){case"<":n.required=!0,n.name=t.slice(1,-1);break;case"[":n.name=t.slice(1,-1)}n.name.length>3&&"..."===n.name.slice(-3)&&(n.variadic=!0,n.name=n.name.slice(0,-3)),n.name&&e._args.push(n)}),this}},p.prototype.action=function(t){var e=this,n=function(n,r){n=n||[],r=r||[];var i=e.parseOptions(r);l(e,i.unknown),i.unknown.length>0&&e.unknownOption(i.unknown[0]),i.args.length&&(n=i.args.concat(n)),e._args.forEach(function(t,r){t.required&&null==n[r]?e.missingArgument(t.name):t.variadic&&(r!==e._args.length-1&&e.variadicArgNotLast(t.name),n[r]=n.splice(r))}),e._args.length?n[e._args.length]=e:n.push(e),t.apply(e,n)},r=this.parent||this,i=r===this?"*":this._name;return r.on("command:"+i,n),this._alias&&r.on("command:"+this._alias,n),this},p.prototype.option=function(t,e,n,r){var i=this,o=new c(t,e),s=o.name(),a=o.attributeName();if("function"!=typeof n)if(n instanceof RegExp){var u=n;n=function(t,e){var n=u.exec(t);return n?n[0]:e}}else r=n,n=null;return(!o.bool||o.optional||o.required)&&(o.bool||(r=!0),void 0!==r&&(i[a]=r,o.defaultValue=r)),this.options.push(o),this.on("option:"+s,function(t){null!==t&&n&&(t=n(t,void 0===i[a]?r:i[a])),"boolean"==typeof i[a]||void 0===i[a]?i[a]=null==t?!!o.bool&&(r||!0):t:null!==t&&(i[a]=t)}),this},p.prototype.allowUnknownOption=function(t){return this._allowUnknownOption=0===arguments.length||t,this},p.prototype.parse=function(t){this.executables&&this.addImplicitHelpCommand(),this.rawArgs=t,this._name=this._name||a(t[1],".js"),this.executables&&t.length<3&&!this.defaultExecutable&&t.push("--help");var e=this.parseOptions(this.normalize(t.slice(2))),n=this.args=e.args,r=this.parseArgs(this.args,e.unknown),i=r.args[0],o=null;return i&&(o=this.commands.filter(function(t){return t.alias()===i})[0]),this._execs[i]&&"function"!=typeof this._execs[i]?this.executeSubCommand(t,n,e.unknown):o?(n[0]=o._name,this.executeSubCommand(t,n,e.unknown)):this.defaultExecutable?(n.unshift(this.defaultExecutable),this.executeSubCommand(t,n,e.unknown)):r},p.prototype.executeSubCommand=function(t,e,n){(e=e.concat(n)).length||this.help(),"help"===e[0]&&1===e.length&&this.help(),"help"===e[0]&&(e[0]=e[1],e[1]="--help");var r,c=t[1],p=a(c,o.extname(c))+"-"+e[0],h=u.lstatSync(c).isSymbolicLink()?u.readlinkSync(c):c;h!==c&&"/"!==h.charAt(0)&&(h=o.join(s(c),h)),r=s(h);var l,f=o.join(r,p),m=!1;g(f+".js")?(p=f+".js",m=!0):g(f+".ts")?(p=f+".ts",m=!0):g(f)&&(p=f),e=e.slice(1),"win32"!==process.platform?m?(e.unshift(p),e=(process.execArgv||[]).concat(e),l=i(process.argv[0],e,{stdio:"inherit",customFds:[0,1,2]})):l=i(p,e,{stdio:"inherit",customFds:[0,1,2]}):(e.unshift(p),l=i(process.execPath,e,{stdio:"inherit"}));["SIGUSR1","SIGUSR2","SIGTERM","SIGINT","SIGHUP"].forEach(function(t){process.on(t,function(){!1===l.killed&&null===l.exitCode&&l.kill(t)})}),l.on("close",process.exit.bind(process)),l.on("error",function(t){"ENOENT"===t.code?console.error("error: %s(1) does not exist, try --help",p):"EACCES"===t.code&&console.error("error: %s(1) not executable. try chmod or run with root",p),process.exit(1)}),this.runningCommand=l},p.prototype.normalize=function(t){for(var e,n,r,i=[],o=0,s=t.length;o<s;++o){if(e=t[o],o>0&&(n=this.optionFor(t[o-1])),"--"===e){i=i.concat(t.slice(o));break}n&&n.required?i.push(e):e.length>1&&"-"===e[0]&&"-"!==e[1]?e.slice(1).split("").forEach(function(t){i.push("-"+t)}):/^--/.test(e)&&~(r=e.indexOf("="))?i.push(e.slice(0,r),e.slice(r+1)):i.push(e)}return i},p.prototype.parseArgs=function(t,e){var n;return t.length?(n=t[0],this.listeners("command:"+n).length?this.emit("command:"+t.shift(),t,e):this.emit("command:*",t)):(l(this,e),e.length>0&&this.unknownOption(e[0]),0===this.commands.length&&0===this._args.filter(function(t){return t.required}).length&&this.emit("command:*")),this},p.prototype.optionFor=function(t){for(var e=0,n=this.options.length;e<n;++e)if(this.options[e].is(t))return this.options[e]},p.prototype.parseOptions=function(t){for(var e,n,r,i=[],o=t.length,s=[],a=0;a<o;++a)if(r=t[a],e)i.push(r);else if("--"!==r)if(n=this.optionFor(r))if(n.required){if(null==(r=t[++a]))return this.optionMissingArgument(n);this.emit("option:"+n.name(),r)}else n.optional?(null==(r=t[a+1])||"-"===r[0]&&"-"!==r?r=null:++a,this.emit("option:"+n.name(),r)):this.emit("option:"+n.name());else r.length>1&&"-"===r[0]?(s.push(r),a+1<t.length&&"-"!==t[a+1][0]&&s.push(t[++a])):i.push(r);else e=!0;return{args:i,unknown:s}},p.prototype.opts=function(){for(var t={},e=this.options.length,n=0;n<e;n++){var r=this.options[n].attributeName();t[r]=r===this._versionOptionName?this._version:this[r]}return t},p.prototype.missingArgument=function(t){console.error("error: missing required argument `%s'",t),process.exit(1)},p.prototype.optionMissingArgument=function(t,e){e?console.error("error: option `%s' argument missing, got `%s'",t.flags,e):console.error("error: option `%s' argument missing",t.flags),process.exit(1)},p.prototype.unknownOption=function(t){this._allowUnknownOption||(console.error("error: unknown option `%s'",t),process.exit(1))},p.prototype.variadicArgNotLast=function(t){console.error("error: variadic arguments must be last `%s'",t),process.exit(1)},p.prototype.version=function(t,e){if(0===arguments.length)return this._version;this._version=t;var n=new c(e=e||"-V, --version","output the version number");return this._versionOptionName=n.long.substr(2)||"version",this.options.push(n),this.on("option:"+this._versionOptionName,function(){process.stdout.write(t+"\n"),process.exit(0)}),this},p.prototype.description=function(t,e){return 0===arguments.length?this._description:(this._description=t,this._argsDescription=e,this)},p.prototype.alias=function(t){var e=this;if(0!==this.commands.length&&(e=this.commands[this.commands.length-1]),0===arguments.length)return e._alias;if(t===e._name)throw new Error("Command alias can't be the same as its name");return e._alias=t,this},p.prototype.usage=function(t){var e=this._args.map(function(t){return f(t)}),n="[options]"+(this.commands.length?" [command]":"")+(this._args.length?" "+e.join(" "):"");return 0===arguments.length?this._usage||n:(this._usage=t,this)},p.prototype.name=function(t){return 0===arguments.length?this._name:(this._name=t,this)},p.prototype.prepareCommands=function(){return this.commands.filter(function(t){return!t._noHelp}).map(function(t){var e=t._args.map(function(t){return f(t)}).join(" ");return[t._name+(t._alias?"|"+t._alias:"")+(t.options.length?" [options]":"")+(e?" "+e:""),t._description]})},p.prototype.largestCommandLength=function(){return this.prepareCommands().reduce(function(t,e){return Math.max(t,e[0].length)},0)},p.prototype.largestOptionLength=function(){var t=[].slice.call(this.options);return t.push({flags:"-h, --help"}),t.reduce(function(t,e){return Math.max(t,e.flags.length)},0)},p.prototype.largestArgLength=function(){return this._args.reduce(function(t,e){return Math.max(t,e.name.length)},0)},p.prototype.padWidth=function(){var t=this.largestOptionLength();return this._argsDescription&&this._args.length&&this.largestArgLength()>t&&(t=this.largestArgLength()),this.commands&&this.commands.length&&this.largestCommandLength()>t&&(t=this.largestCommandLength()),t},p.prototype.optionHelp=function(){var t=this.padWidth();return this.options.map(function(e){return h(e.flags,t)+"  "+e.description+(e.bool&&void 0!==e.defaultValue?" (default: "+JSON.stringify(e.defaultValue)+")":"")}).concat([h("-h, --help",t)+"  output usage information"]).join("\n")},p.prototype.commandHelp=function(){if(!this.commands.length)return"";var t=this.prepareCommands(),e=this.padWidth();return["Commands:",t.map(function(t){var n=t[1]?"  "+t[1]:"";return(n?h(t[0],e):t[0])+n}).join("\n").replace(/^/gm,"  "),""].join("\n")},p.prototype.helpInformation=function(){var t=[];if(this._description){t=[this._description,""];var e=this._argsDescription;if(e&&this._args.length){var n=this.padWidth();t.push("Arguments:"),t.push(""),this._args.forEach(function(r){t.push("  "+h(r.name,n)+"  "+e[r.name])}),t.push("")}}var r=this._name;this._alias&&(r=r+"|"+this._alias);var i=["Usage: "+r+" "+this.usage(),""],o=[],s=this.commandHelp();s&&(o=[s]);var a=["Options:",""+this.optionHelp().replace(/^/gm,"  "),""];return i.concat(t).concat(a).concat(o).join("\n")},p.prototype.outputHelp=function(t){t||(t=function(t){return t}),process.stdout.write(t(this.helpInformation())),this.emit("--help")},p.prototype.help=function(t){this.outputHelp(t),process.exit()}},function(t,e){t.exports=require("fs")},function(t,e){t.exports=require("path")},function(t,e,n){t.exports=g,g.Minimatch=m;var r={sep:"/"};try{r=n(2)}catch(t){}var i=g.GLOBSTAR=m.GLOBSTAR={},o=n(7),s={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},a="[^/]",u=a+"*?",c="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",p="(?:(?!(?:\\/|^)\\.).)*?",h="().*{}+?[]^$\\!".split("").reduce(function(t,e){return t[e]=!0,t},{});var l=/\/+/;function f(t,e){t=t||{},e=e||{};var n={};return Object.keys(e).forEach(function(t){n[t]=e[t]}),Object.keys(t).forEach(function(e){n[e]=t[e]}),n}function g(t,e,n){if("string"!=typeof e)throw new TypeError("glob pattern string required");return n||(n={}),!(!n.nocomment&&"#"===e.charAt(0))&&(""===e.trim()?""===t:new m(e,n).match(t))}function m(t,e){if(!(this instanceof m))return new m(t,e);if("string"!=typeof t)throw new TypeError("glob pattern string required");e||(e={}),t=t.trim(),"/"!==r.sep&&(t=t.split(r.sep).join("/")),this.options=e,this.set=[],this.pattern=t,this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.make()}function d(t,e){if(e||(e=this instanceof m?this.options:{}),void 0===(t=void 0===t?this.pattern:t))throw new TypeError("undefined pattern");return e.nobrace||!t.match(/\{.*\}/)?[t]:o(t)}g.filter=function(t,e){return e=e||{},function(n,r,i){return g(n,t,e)}},g.defaults=function(t){if(!t||!Object.keys(t).length)return g;var e=g,n=function(n,r,i){return e.minimatch(n,r,f(t,i))};return n.Minimatch=function(n,r){return new e.Minimatch(n,f(t,r))},n},m.defaults=function(t){return t&&Object.keys(t).length?g.defaults(t).Minimatch:m},m.prototype.debug=function(){},m.prototype.make=function(){if(this._made)return;var t=this.pattern,e=this.options;if(!e.nocomment&&"#"===t.charAt(0))return void(this.comment=!0);if(!t)return void(this.empty=!0);this.parseNegate();var n=this.globSet=this.braceExpand();e.debug&&(this.debug=console.error);this.debug(this.pattern,n),n=this.globParts=n.map(function(t){return t.split(l)}),this.debug(this.pattern,n),n=n.map(function(t,e,n){return t.map(this.parse,this)},this),this.debug(this.pattern,n),n=n.filter(function(t){return-1===t.indexOf(!1)}),this.debug(this.pattern,n),this.set=n},m.prototype.parseNegate=function(){var t=this.pattern,e=!1,n=this.options,r=0;if(n.nonegate)return;for(var i=0,o=t.length;i<o&&"!"===t.charAt(i);i++)e=!e,r++;r&&(this.pattern=t.substr(r));this.negate=e},g.braceExpand=function(t,e){return d(t,e)},m.prototype.braceExpand=d,m.prototype.parse=function(t,e){if(t.length>65536)throw new TypeError("pattern is too long");var n=this.options;if(!n.noglobstar&&"**"===t)return i;if(""===t)return"";var r,o="",c=!!n.nocase,p=!1,l=[],f=[],g=!1,m=-1,d=-1,y="."===t.charAt(0)?"":n.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",b=this;function x(){if(r){switch(r){case"*":o+=u,c=!0;break;case"?":o+=a,c=!0;break;default:o+="\\"+r}b.debug("clearStateChar %j %j",r,o),r=!1}}for(var _,w=0,j=t.length;w<j&&(_=t.charAt(w));w++)if(this.debug("%s\t%s %s %j",t,w,o,_),p&&h[_])o+="\\"+_,p=!1;else switch(_){case"/":return!1;case"\\":x(),p=!0;continue;case"?":case"*":case"+":case"@":case"!":if(this.debug("%s\t%s %s %j <-- stateChar",t,w,o,_),g){this.debug("  in class"),"!"===_&&w===d+1&&(_="^"),o+=_;continue}b.debug("call clearStateChar %j",r),x(),r=_,n.noext&&x();continue;case"(":if(g){o+="(";continue}if(!r){o+="\\(";continue}l.push({type:r,start:w-1,reStart:o.length,open:s[r].open,close:s[r].close}),o+="!"===r?"(?:(?!(?:":"(?:",this.debug("plType %j %j",r,o),r=!1;continue;case")":if(g||!l.length){o+="\\)";continue}x(),c=!0;var O=l.pop();o+=O.close,"!"===O.type&&f.push(O),O.reEnd=o.length;continue;case"|":if(g||!l.length||p){o+="\\|",p=!1;continue}x(),o+="|";continue;case"[":if(x(),g){o+="\\"+_;continue}g=!0,d=w,m=o.length,o+=_;continue;case"]":if(w===d+1||!g){o+="\\"+_,p=!1;continue}if(g){var E=t.substring(d+1,w);try{RegExp("["+E+"]")}catch(t){var S=this.parse(E,v);o=o.substr(0,m)+"\\["+S[0]+"\\]",c=c||S[1],g=!1;continue}}c=!0,g=!1,o+=_;continue;default:x(),p?p=!1:!h[_]||"^"===_&&g||(o+="\\"),o+=_}g&&(E=t.substr(d+1),S=this.parse(E,v),o=o.substr(0,m)+"\\["+S[0],c=c||S[1]);for(O=l.pop();O;O=l.pop()){var C=o.slice(O.reStart+O.open.length);this.debug("setting tail",o,O),C=C.replace(/((?:\\{2}){0,64})(\\?)\|/g,function(t,e,n){return n||(n="\\"),e+e+n+"|"}),this.debug("tail=%j\n   %s",C,C,O,o);var A="*"===O.type?u:"?"===O.type?a:"\\"+O.type;c=!0,o=o.slice(0,O.reStart)+A+"\\("+C}x(),p&&(o+="\\\\");var k=!1;switch(o.charAt(0)){case".":case"[":case"(":k=!0}for(var $=f.length-1;$>-1;$--){var R=f[$],L=o.slice(0,R.reStart),M=o.slice(R.reStart,R.reEnd-8),N=o.slice(R.reEnd-8,R.reEnd),F=o.slice(R.reEnd);N+=F;var I=L.split("(").length-1,q=F;for(w=0;w<I;w++)q=q.replace(/\)[+*?]?/,"");var T="";""===(F=q)&&e!==v&&(T="$");var D=L+M+F+T+N;o=D}""!==o&&c&&(o="(?=.)"+o);k&&(o=y+o);if(e===v)return[o,c];if(!c)return t.replace(/\\(.)/g,"$1");var H=n.nocase?"i":"";try{var P=new RegExp("^"+o+"$",H)}catch(t){return new RegExp("$.")}return P._glob=t,P._src=o,P};var v={};g.makeRe=function(t,e){return new m(t,e||{}).makeRe()},m.prototype.makeRe=function(){if(this.regexp||!1===this.regexp)return this.regexp;var t=this.set;if(!t.length)return this.regexp=!1,this.regexp;var e=this.options,n=e.noglobstar?u:e.dot?c:p,r=e.nocase?"i":"",o=t.map(function(t){return t.map(function(t){return t===i?n:"string"==typeof t?t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"):t._src}).join("\\/")}).join("|");o="^(?:"+o+")$",this.negate&&(o="^(?!"+o+").*$");try{this.regexp=new RegExp(o,r)}catch(t){this.regexp=!1}return this.regexp},g.match=function(t,e,n){var r=new m(e,n=n||{});return t=t.filter(function(t){return r.match(t)}),r.options.nonull&&!t.length&&t.push(e),t},m.prototype.match=function(t,e){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return""===t;if("/"===t&&e)return!0;var n=this.options;"/"!==r.sep&&(t=t.split(r.sep).join("/"));t=t.split(l),this.debug(this.pattern,"split",t);var i,o,s=this.set;for(this.debug(this.pattern,"set",s),o=t.length-1;o>=0&&!(i=t[o]);o--);for(o=0;o<s.length;o++){var a=s[o],u=t;n.matchBase&&1===a.length&&(u=[i]);var c=this.matchOne(u,a,e);if(c)return!!n.flipNegate||!this.negate}return!n.flipNegate&&this.negate},m.prototype.matchOne=function(t,e,n){var r=this.options;this.debug("matchOne",{this:this,file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var o=0,s=0,a=t.length,u=e.length;o<a&&s<u;o++,s++){this.debug("matchOne loop");var c,p=e[s],h=t[o];if(this.debug(e,p,h),!1===p)return!1;if(p===i){this.debug("GLOBSTAR",[e,p,h]);var l=o,f=s+1;if(f===u){for(this.debug("** at the end");o<a;o++)if("."===t[o]||".."===t[o]||!r.dot&&"."===t[o].charAt(0))return!1;return!0}for(;l<a;){var g=t[l];if(this.debug("\nglobstar while",t,l,e,f,g),this.matchOne(t.slice(l),e.slice(f),n))return this.debug("globstar found match!",l,a,g),!0;if("."===g||".."===g||!r.dot&&"."===g.charAt(0)){this.debug("dot detected!",t,l,e,f);break}this.debug("globstar swallow a segment, and continue"),l++}return!(!n||(this.debug("\n>>> no match, partial?",t,l,e,f),l!==a))}if("string"==typeof p?(c=r.nocase?h.toLowerCase()===p.toLowerCase():h===p,this.debug("string match",p,h,c)):(c=h.match(p),this.debug("pattern match",p,h,c)),!c)return!1}if(o===a&&s===u)return!0;if(o===a)return n;if(s===u)return o===a-1&&""===t[o];throw new Error("wtf?")}},function(t,e){t.exports=require("events")},function(t,e){t.exports=require("child_process")},function(t,e){t.exports=require("util")},function(t,e,n){var r=n(8),i=n(9);t.exports=function(t){if(!t)return[];"{}"===t.substr(0,2)&&(t="\\{\\}"+t.substr(2));return function t(e,n){var o=[];var s=i("{","}",e);if(!s||/\$$/.test(s.pre))return[e];var u=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(s.body);var c=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(s.body);var h=u||c;var d=s.body.indexOf(",")>=0;if(!h&&!d)return s.post.match(/,.*\}/)?(e=s.pre+"{"+s.body+a+s.post,t(e)):[e];var v;if(h)v=s.body.split(/\.\./);else if(1===(v=function t(e){if(!e)return[""];var n=[];var r=i("{","}",e);if(!r)return e.split(",");var o=r.pre;var s=r.body;var a=r.post;var u=o.split(",");u[u.length-1]+="{"+s+"}";var c=t(a);a.length&&(u[u.length-1]+=c.shift(),u.push.apply(u,c));n.push.apply(n,u);return n}(s.body)).length&&1===(v=t(v[0],!1).map(l)).length){var y=s.post.length?t(s.post,!1):[""];return y.map(function(t){return s.pre+v[0]+t})}var b=s.pre;var y=s.post.length?t(s.post,!1):[""];var x;if(h){var _=p(v[0]),w=p(v[1]),j=Math.max(v[0].length,v[1].length),O=3==v.length?Math.abs(p(v[2])):1,E=g,S=w<_;S&&(O*=-1,E=m);var C=v.some(f);x=[];for(var A=_;E(A,w);A+=O){var k;if(c)"\\"===(k=String.fromCharCode(A))&&(k="");else if(k=String(A),C){var $=j-k.length;if($>0){var R=new Array($+1).join("0");k=A<0?"-"+R+k.slice(1):R+k}}x.push(k)}}else x=r(v,function(e){return t(e,!1)});for(var L=0;L<x.length;L++)for(var M=0;M<y.length;M++){var N=b+x[L]+y[M];(!n||h||N)&&o.push(N)}return o}(function(t){return t.split("\\\\").join(o).split("\\{").join(s).split("\\}").join(a).split("\\,").join(u).split("\\.").join(c)}(t),!0).map(h)};var o="\0SLASH"+Math.random()+"\0",s="\0OPEN"+Math.random()+"\0",a="\0CLOSE"+Math.random()+"\0",u="\0COMMA"+Math.random()+"\0",c="\0PERIOD"+Math.random()+"\0";function p(t){return parseInt(t,10)==t?parseInt(t,10):t.charCodeAt(0)}function h(t){return t.split(o).join("\\").split(s).join("{").split(a).join("}").split(u).join(",").split(c).join(".")}function l(t){return"{"+t+"}"}function f(t){return/^-?0\d/.test(t)}function g(t,e){return t<=e}function m(t,e){return t>=e}},function(t,e){t.exports=function(t,e){for(var r=[],i=0;i<t.length;i++){var o=e(t[i],i);n(o)?r.push.apply(r,o):r.push(o)}return r};var n=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,n){"use strict";function r(t,e,n){t instanceof RegExp&&(t=i(t,n)),e instanceof RegExp&&(e=i(e,n));var r=o(t,e,n);return r&&{start:r[0],end:r[1],pre:n.slice(0,r[0]),body:n.slice(r[0]+t.length,r[1]),post:n.slice(r[1]+e.length)}}function i(t,e){var n=e.match(t);return n?n[0]:null}function o(t,e,n){var r,i,o,s,a,u=n.indexOf(t),c=n.indexOf(e,u+1),p=u;if(u>=0&&c>0){for(r=[],o=n.length;p>=0&&!a;)p==u?(r.push(p),u=n.indexOf(t,p+1)):1==r.length?a=[r.pop(),c]:((i=r.pop())<o&&(o=i,s=c),c=n.indexOf(e,p+1)),p=u<c&&u>=0?u:c;r.length&&(a=[o,s])}return a}t.exports=r,r.range=o},function(t,e,n){"use strict";var r=t.exports={camelback:function(t){var e=r.split(t);return e.shift()+i(e).join("")},camelcase:function(t){return i(r.split(t)).join("")},dash:function(t){return r.split(t).join("-")},underscore:function(t){return r.split(t).join("_")},split:function(t){return(e=t=t.replace(/[^a-z0-9]+/gi," ").replace(/([A-Z0-9]+)([A-Z][a-z])/g,"$1 $2").replace(/([a-z0-9])([A-Z])/g,"$1 $2").toLowerCase(),e.replace(/^\s+|\s+$/g,"")).split(/\s+/);var e}};function i(t){for(var e=[],n=0;n<t.length;n++)e.push(t[n].charAt(0).toUpperCase()+t[n].substr(1));return e}},function(t,e,n){"use strict";let r;n.r(e),function(t){t[t.FILE=1]="FILE",t[t.DIRECTORY=2]="DIRECTORY"}(r||(r={}));const i={module:"es6",filetype:"ts",match:"*.+(png|jpg|png|svg|pdf|gif|mov|ico|xml)",assetsPathList:["./assets"],exportReactComponentForSvg:!1};var o=n(1);var s=n(0),a=n(2);var u=n(3);const c=n(10);const p=(t,e,n=i,s=!1)=>{const h=class{static parseDirectory(t,e=i){let n;try{if(!(n=o.lstatSync(t)).isDirectory())return}catch(t){return}return o.readdirSync(t).map(e=>({filename:e,stats:o.lstatSync(a.resolve(t,e))})).filter(({filename:t,stats:n})=>!!n.isDirectory()||!!n.isFile()&&u(t,e.match,{matchBase:!0})).map(({filename:e,stats:n})=>{const i=c.camelback(e),o=/\d/.test(i.substr(0,1))?"num"+i:i;return{type:n.isDirectory()?r.DIRECTORY:r.FILE,filename:e,basedir:t,exportedName:o}})}}.parseDirectory(t,n);if(h){let u="index";const c=class{static generateContentByEnteryList(t,e=i){const n=[],r=[];t.sort((t,e)=>t.type-e.type).forEach(t=>{if(n.push(t.exportedName),"es6"==e.module){if(r.push(`import ${t.exportedName} from './${t.filename}';`),e.exportReactComponentForSvg&&".svg"===a.extname(t.filename).toLowerCase()){const e=`${t.exportedName}Component`;r.push(`import { ReactComponent as ${e} } form './${t.filename}';`),n.push(e)}}else"commonjs"==e.module&&r.push(`const ${t.exportedName} = require('./${t.filename}');`)});const o=r.join("\n");let s;return"es6"===e.module?s=`export default {\n    ${n.join(",\n    ")}\n};`:"commonjs"===e.module&&(s=`module.exports = {\n    ${n.join(",\n    ")}\n};`),[o,"\n",s].join("\n")}}.generateContentByEnteryList(h,n);"ts"===n.filetype?u+=".ts":u+=".js";const l=a.resolve(t,u);o.writeFileSync(l,c),s&&console.log(`Generated ${u} on directory: ${t}`),e&&h.filter(t=>t.type===r.DIRECTORY).forEach(r=>{p(a.resolve(t,r.filename),e,n,s)})}};let h;s.arguments("<direcotry>").option("-m, --module <module>","use which JS module systems: es6/commonjs").option("-v, --verbose","ouput detail message to stdout").option("-t, --filetype <filetype>","which file extionsion to use: ts/js").option("-c, --config <config>","config file to read. default <cwd>/.assetsrc","./assetsrc").option("-a, --match <match>","which files to import. in minimatch format: eg. *.+(png/svg)").option("-r, --svg","whether generate svg react component or not",!1).action(t=>{h=t}).parse(process.argv);let l=i;if(void 0!==s.config)try{o.lstatSync(s.config).isFile()?s.verbose&&(console.log(`Config file founded! load from ${s.config}`),l=class{static loadOptionsFromConfigFile(t){if(!o.lstatSync(t).isFile())return i;const e=o.readFileSync(t,{encoding:"utf-8"});if(!e)return i;try{const t=JSON.parse(e);return{...i,...t}}catch(t){return i}}}.loadOptionsFromConfigFile(s.config)):s.verbose&&console.log("Config file not founded! use default config")}catch(t){s.verbose&&console.log("Config file your provide has some problems, can not load, fallback to use default config")}else s.verbose&&console.log("Config file not founded! use default config");void 0!==h&&(l={...l,assetsPathList:[h]}),s.module&&(l={...l,module:s.module}),s.filetype&&(l={...l,filetype:s.filetype}),s.match&&(l={...l,match:s.match}),console.log(s.svg),s.svg&&(l={...l,exportReactComponentForSvg:s.svg}),s.verbose&&console.log(`Options is: \n${JSON.stringify(l,void 0,2)}`),l.assetsPathList.forEach(t=>{p(t,!0,l,s.verbose)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,